using System;
using System.Collections;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using KLTS.Data;
using System.Globalization;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using ShriKartikeya.Portal.DAL;
using System.Net.Mail;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using System.Collections.Generic;
using System.Data.OleDb;

namespace ShriKartikeya.Portal
{
    public partial class ClientBilling : System.Web.UI.Page
    {
        AppConfiguration config = new AppConfiguration();
        GridViewExportUtil gve = new GridViewExportUtil();
        string EmpIDPrefix = "";
        string CmpIDPrefix = "";
        string UserId = "";
        string Clength = "";
        string Username = "";
        string FontStyle = "Calibri";
        string BranchID = "";

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {

                GetWebConfigdata();
                if (!IsPostBack)
                {
                    if (Session["UserId"] != null && Session["AccessLevel"] != null)
                    {

                    }
                    else
                    {
                        Response.Redirect("login.aspx");
                    }
                    if (this.Master != null)
                    {
                        HtmlControl emplink = (HtmlControl)this.Master.Master.FindControl("ContentPlaceHolder1").FindControl("c4");
                        if (emplink != null)
                        {
                            emplink.Attributes["class"] = "current";
                        }
                    }
                    //LoadClientList();
                    //LoadClientNames();
                    LoadMonths();
                    getfont();

                    ClearData();

                }
            }
            catch (Exception ex)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Your Session Expired');", true);
                Response.Redirect("~/Login.aspx");
            }

        }

        public void getfont()
        {
            int totalfonts = FontFactory.RegisterDirectory("c:\\WINDOWS\\fonts");
            StringBuilder sa = new StringBuilder();
            foreach (string fontname in FontFactory.RegisteredFonts)
            {
                sa.Append(fontname + "\n");
            }

        }

        protected void LoadMonths()
        {
            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            string currentMonth = monthName[DateTime.Now.Month - 1];
            string month = "";
            string LastMonth = "";
            try
            {
                month = monthName[DateTime.Now.Month - 2];
            }
            catch (IndexOutOfRangeException ex)
            {
                month = monthName[12 - (2 - DateTime.Now.Month)];
            }
            try
            {
                LastMonth = monthName[DateTime.Now.Month - 3];
            }
            catch (IndexOutOfRangeException ex)
            {
                LastMonth = monthName[12 - (3 - DateTime.Now.Month)];
            }
            ddlmonth.Items.Add(currentMonth);
            ddlmonth.Items.Add(month);
            ddlmonth.Items.Add(LastMonth);


            ddlmonth.Items.Insert(0, "-select-");
        }

        protected void LoadClientNames()
        {
            DataTable dtBranch = GlobalData.Instance.LoadBranchOnUserID(BranchID);

            DataTable DtClientids = GlobalData.Instance.LoadCNames(CmpIDPrefix, dtBranch);
            if (DtClientids.Rows.Count > 0)
            {
                ddlCname.DataValueField = "Clientid";
                ddlCname.DataTextField = "clientname";
                ddlCname.DataSource = DtClientids;
                ddlCname.DataBind();
            }
            ddlCname.Items.Insert(0, "-Select-");

        }

        protected void LoadClientList()
        {
            DataTable dtBranch = GlobalData.Instance.LoadBranchOnUserID(BranchID);

            DataTable DtClientNames = GlobalData.Instance.LoadCIds(CmpIDPrefix, dtBranch);
            if (DtClientNames.Rows.Count > 0)
            {
                ddlclientid.DataValueField = "Clientid";
                ddlclientid.DataTextField = "Clientid";
                ddlclientid.DataSource = DtClientNames;
                ddlclientid.DataBind();
            }
            ddlclientid.Items.Insert(0, "-Select-");
        }

        protected void GetWebConfigdata()
        {
            if (Session.Keys.Count > 0)
            {
                EmpIDPrefix = Session["EmpIDPrefix"].ToString();
                CmpIDPrefix = Session["CmpIDPrefix"].ToString();
                Username = Session["UserId"].ToString();
                BranchID = Session["BranchID"].ToString();
            }
            else
            {
                Response.Redirect("Login.aspx");
            }
        }

        public void btnvisible()
        {

            string chkpdfsquery = "select pdfs from Contracts where clientid='" + ddlclientid.SelectedValue + "'";
            DataTable dtchkpdfs = config.ExecuteAdaptorAsyncWithQueryParams(chkpdfsquery).Result;
            string chkpdf = "False";
            if (dtchkpdfs.Rows.Count > 0)
                chkpdf = dtchkpdfs.Rows[0]["pdfs"].ToString();

            if (chkpdf == "True")
            {

            }
        }

        public void btnvisible_cname()
        {

            string chkpdfsquery = "select pdfs,c.ClientName from Contracts  ct inner join Clients c on ct.ClientId=c.ClientId where c.clientname='" + ddlCname.SelectedItem.Text + "'";
            DataTable dtchkpdfs = config.ExecuteAdaptorAsyncWithQueryParams(chkpdfsquery).Result;
            string chkpdf = "False";
            if (dtchkpdfs.Rows.Count > 0)
                chkpdf = dtchkpdfs.Rows[0]["pdfs"].ToString();

            if (chkpdf == "True")
            {
            }
        }

        protected void ClearData()
        {
            lblTotalResources.Text = "0";
            lblMachinery.Text = "0";
            lblMaterial.Text = "0";
            lblServiceCharges.Text = "0";
            lblServiceTax.Text = "0";
            lblGrandTotal.Text = "0";
            lblCESS.Text = "0";
            lblSheCESS.Text = "0";
            lblSBCESS.Text = "0";
            lblKKCESS.Text = "0";
            lblbillnolatest.Text = "";
            lblCGST.Text = "0";
            lblSGST.Text = "0";
            lblIGST.Text = "0";
            lblCess1.Text = "0";
            lblCess2.Text = "0";

        }

        protected void DisplayDataInGrid()
        {
            try
            {
                lblResult.Text = string.Empty;
                DataTable DtBilling = null;
                decimal TotalResourceCost = 0;
                string dutiestotalamount = "0";
                decimal MachineryCost = 0;
                decimal MaterialCost = 0;
                decimal ExtraOneAmt = 0;
                decimal ExtraTwoAmt = 0;
                decimal DisCountTwoAmt = 0;
                decimal ServiceCharge = 0;
                decimal ServiceTax = 0;
                decimal GrandTotal = 0;
                decimal sbCess = 0;
                decimal kkCess = 0;
                decimal CGST = 0;
                decimal SGST = 0;
                decimal IGST = 0;
                decimal Cess1 = 0;
                decimal Cess2 = 0;

                decimal Cess = 0;
                decimal Shecess = 0;
                decimal lessST75 = 0;
                decimal lessST25 = 0;
                decimal GRANDTOTAL = 0;
                bool ExtraDataSTCheck = false;
                decimal machineryCost = 0;
                decimal materialCost = 0;
                decimal maintenancecost = 0;
                decimal extraamountonecost = 0;
                decimal extraamoounttwocost = 0;
                decimal discountone = 0;
                decimal discounttwo = 0;
                decimal Staxonservicecharge = 0;
                decimal SCamtonMachinary = 0;
                decimal SCamtonMaintenance = 0;
                decimal SCamtonMaterial = 0;
                decimal SCamtonExtraone = 0;
                decimal SCamtonExtratwo = 0;
                decimal RelChrgAmt = 0;
                float Bpfamt = 0;
                float Besiamt = 0;
                float BpfPer = 0;
                float BesiPer = 0;
                ClearExtraDataForBilling();

                ClearData();
                // int month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                int month = GetMonthBasedOnSelectionDateorMonth();




                lbltotalamount.Text = "";

                DataTable Dtunit = null;
                gvClientBilling.DataSource = Dtunit;
                gvClientBilling.DataBind();

                DateTime LastDate = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    LastDate = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    LastDate = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }
                #region  Begin Code For Display Invoice Data Based On The ClientIdAndMonth as on [04-03-2014]
                var SPNameD = "GetInvoiceDataForDisplay";
                Hashtable HTDisplayForInvoice = new Hashtable();
                HTDisplayForInvoice.Add("@Clientid", ddlclientid.SelectedValue);
                HTDisplayForInvoice.Add("@Month", month);
                HTDisplayForInvoice.Add("@LastDay", LastDate);
                DataTable dtContracts = config.ExecuteAdaptorAsyncWithParams(SPNameD, HTDisplayForInvoice).Result;
                if (dtContracts.Rows.Count <= 0)
                {
                    btnFreeze.Visible = false;
                    btnUnFreeze.Visible = false;
                    lblbillnolatest.Text = "";
                    //ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Data Not Avaialable For This Month ');", true);
                    lblResult.Text = "";
                    //DisplayDataForNotGeneratingBill();
                    //return;
                }
                else
                {
                    string monthreports = "";


                    string paymentType = dtContracts.Rows[0]["Paymenttype"].ToString();
                    double DIncludeST = double.Parse(dtContracts.Rows[0]["servicetax"].ToString());
                    double DstrST75 = double.Parse(dtContracts.Rows[0]["ServiceTax75"].ToString());
                    bool bIncludeST = false;
                    if (DIncludeST == 0)
                    {
                        bIncludeST = true;
                    }
                    bool bST75 = false;
                    if (DstrST75 > 0)
                    {
                        bST75 = true;
                    }

                    string CCGST = dtContracts.Rows[0]["CCGST"].ToString();
                    string CSGST = dtContracts.Rows[0]["CSGST"].ToString();
                    string CIGST = dtContracts.Rows[0]["CIGST"].ToString();
                    string CCess1 = dtContracts.Rows[0]["CCess1"].ToString();
                    string CCess2 = dtContracts.Rows[0]["CCess2"].ToString();

                    lblbillnolatest.Text = dtContracts.Rows[0]["billno"].ToString();
                    txtfromdate.Text = DateTime.Parse(dtContracts.Rows[0]["fromdt"].ToString()).ToString("dd/MM/yyyy");
                    txttodate.Text = DateTime.Parse(dtContracts.Rows[0]["todt"].ToString()).ToString("dd/MM/yyyy");


                    txtbilldate.Text = DateTime.Parse(dtContracts.Rows[0]["billdt"].ToString()).ToString("dd/MM/yyyy");
                    txtduedate.Text = DateTime.Parse(dtContracts.Rows[0]["Duedt"].ToString()).ToString("dd/MM/yyyy");


                    bool Extradatacheck = false;

                    #region New code for extradata for billing titles as on 10/03/2014 by venkat

                    string Machinarycosttitle = "";
                    string Materialcosttitle = "";
                    string Maintanancecosttitle = "";
                    string Extraonetitle = "";
                    string Extratwotitle = "";
                    string Discountonetitle = "";
                    string Discounttwotitle = "";

                    #endregion

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;


                    if (paymentType == "False")
                    {

                        #region  Begin Man Power Part

                        #region Begin Code For Retrive Data From UnitBillBreakup As on [02-03-2014]

                        #region  Begin  Variable Declaration
                        var UBBSPName = "";
                        var UBBClientId = "";
                        var UBBMonth = 0;
                        Hashtable HtUBB = new Hashtable();
                        #endregion End Variable Declaration

                        #region  Begin Assign Values To the Variable
                        UBBSPName = "GetUnitbillbreakupdataBasedonClientdAndMonth";
                        UBBClientId = ddlclientid.SelectedValue;
                        UBBMonth = month;
                        #endregion End Assign Values To the Variable


                        #region Begin Calling Stored Procedure
                        HtUBB.Add("@clientid", UBBClientId);
                        HtUBB.Add("@month", month);
                        Dtunit = config.ExecuteAdaptorAsyncWithParams(UBBSPName, HtUBB).Result;
                        #endregion End Calling Stored Procedure

                        #endregion End Code For Retrive Data From UnitBillBreakup As on [02-03-2014]


                        if (Dtunit.Rows.Count > 0)
                        {
                            gvClientBilling.DataSource = Dtunit;
                            gvClientBilling.DataBind();

                            for (int i = 0; i < gvClientBilling.Rows.Count; i++)
                            {

                                Label lblextra = gvClientBilling.Rows[i].FindControl("lblextra") as Label;
                                CheckBox chkExtra = gvClientBilling.Rows[i].FindControl("chkExtra") as CheckBox;
                                Label lblSno = gvClientBilling.Rows[i].FindControl("lblSno") as Label;
                                TextBox lbldesgn = gvClientBilling.Rows[i].FindControl("lbldesgn") as TextBox;
                                TextBox lblnoofemployees = gvClientBilling.Rows[i].FindControl("lblnoofemployees") as TextBox;
                                TextBox lblNoOfDuties = gvClientBilling.Rows[i].FindControl("lblNoOfDuties") as TextBox;
                                TextBox lblpayrate = gvClientBilling.Rows[i].FindControl("lblpayrate") as TextBox;
                                TextBox txthsnnumber = gvClientBilling.Rows[i].FindControl("txtHSNNumber") as TextBox;
                                TextBox lblda = gvClientBilling.Rows[i].FindControl("lblda") as TextBox;
                                TextBox lblAmount = gvClientBilling.Rows[i].FindControl("lblAmount") as TextBox;
                                DropDownList ddlnoofdays = gvClientBilling.Rows[i].FindControl("ddlnod") as DropDownList;
                                TextBox txtempname = gvClientBilling.Rows[i].FindControl("txtempname") as TextBox;
                                if (lblextra.Text.Contains("E"))
                                {
                                    chkExtra.Checked = true;
                                    lblSno.Enabled = true;
                                    lbldesgn.Enabled = true;
                                    lblnoofemployees.Enabled = true;
                                    lblNoOfDuties.Enabled = true;
                                    lblpayrate.Enabled = true;
                                    lblda.Enabled = true;
                                    lblAmount.Enabled = true;
                                    ddlnoofdays.Enabled = true;
                                    txthsnnumber.Enabled = true;

                                }
                                else
                                {
                                    chkExtra.Checked = false;
                                    lblSno.Enabled = false;
                                    lbldesgn.Enabled = false;
                                    lblnoofemployees.Enabled = false;
                                    lblNoOfDuties.Enabled = false;
                                    lblpayrate.Enabled = false;
                                    lblda.Enabled = false;
                                    lblAmount.Enabled = false;
                                    ddlnoofdays.Enabled = false;
                                    txthsnnumber.Enabled = false;
                                    //txtempname.Visible = false;

                                }
                            }

                        }

                        else
                        {
                            //LblResult.Text = "There Is No Bills  For The Selected Client";
                            return;
                        }
                        double totalamount = 0;
                        for (int index = 0; index < Dtunit.Rows.Count; index++)
                        {
                            totalamount = totalamount + double.Parse(Dtunit.Rows[index]["PayRate"].ToString());

                            decimal DutyHrs = decimal.Parse(Dtunit.Rows[index]["DutyHours"].ToString());
                            decimal noofems = decimal.Parse(Dtunit.Rows[index]["noofemps"].ToString());
                            decimal payrate = decimal.Parse(Dtunit.Rows[index]["payrate"].ToString());
                            decimal basic = decimal.Parse(Dtunit.Rows[index]["BasicDA"].ToString());
                            decimal OTAmount = 0;
                            if (String.IsNullOrEmpty(Dtunit.Rows[index]["otamount"].ToString()) == false)
                            {
                                OTAmount = decimal.Parse(Dtunit.Rows[index]["otamount"].ToString());
                            }

                            gvClientBilling.Columns[9].Visible = true;
                            DropDownList Nods = gvClientBilling.Rows[index].FindControl("ddlnod") as DropDownList;
                            // Nods.Enabled = false;
                            if (Nods != null)
                            {

                                float noofdays = float.Parse(Dtunit.Rows[index]["noofdays"].ToString());
                                Nods.SelectedValue = Dtunit.Rows[index]["noofdays"].ToString();

                            }
                            decimal amount = basic /*+ hra + Conveyance + WashAllowance + OtherAllowance + pf + esi*/ ;
                            Label lblOt = gvClientBilling.Rows[index].FindControl("lblOtAmount") as Label;
                            TextBox totAmount = gvClientBilling.Rows[index].FindControl("lblamount") as TextBox;
                            TextBox PayRateWithType = gvClientBilling.Rows[index].FindControl("lblpayrate") as TextBox;
                            PayRateWithType.Text = payrate.ToString("0.00");
                            lblOt.Text = OTAmount.ToString("0.00");
                            totAmount.Text = (amount).ToString("0.00");

                        }



                        #endregion End Man Power Part

                    }
                    else
                    {

                        #region Begin  Lampsum Part

                        if (dtContracts.Rows.Count > 0)
                        {
                            DataTable tempTable = new DataTable();
                            DataColumn col = new DataColumn();
                            col.DataType = System.Type.GetType("System.String");
                            col.AllowDBNull = true;
                            col.Caption = "Location";
                            col.ColumnName = "Location";
                            tempTable.Columns.Add(col);

                            DataColumn colstorecode = new DataColumn();
                            colstorecode.DataType = System.Type.GetType("System.String");
                            colstorecode.AllowDBNull = true;
                            colstorecode.Caption = "storecode";
                            colstorecode.ColumnName = "storecode";
                            tempTable.Columns.Add(colstorecode);

                            DataColumn col1 = new DataColumn();
                            col1.DataType = System.Type.GetType("System.String");
                            col1.AllowDBNull = true;
                            col1.Caption = "UnitId";
                            col1.ColumnName = "UnitId";
                            tempTable.Columns.Add(col1);
                            DataColumn col2 = new DataColumn();
                            col2.DataType = System.Type.GetType("System.String");
                            col2.AllowDBNull = true;
                            col2.Caption = "Designation";
                            col2.ColumnName = "Designation";
                            tempTable.Columns.Add(col2);

                            DataColumn col12 = new DataColumn();
                            col12.DataType = System.Type.GetType("System.String");
                            col12.AllowDBNull = true;
                            col12.Caption = "Designid";
                            col12.ColumnName = "Designid";
                            tempTable.Columns.Add(col12);

                            DataColumn col112 = new DataColumn();
                            col112.DataType = System.Type.GetType("System.String");
                            col112.AllowDBNull = true;
                            col112.Caption = "type";
                            col112.ColumnName = "type";
                            tempTable.Columns.Add(col112);



                            DataColumn col1121ss = new DataColumn();
                            col1121ss.DataType = System.Type.GetType("System.String");
                            col1121ss.AllowDBNull = true;
                            col1121ss.Caption = "Branch";
                            col1121ss.ColumnName = "Branch";
                            tempTable.Columns.Add(col1121ss);


                            DataColumn col1121 = new DataColumn();
                            col1121.DataType = System.Type.GetType("System.String");
                            col1121.AllowDBNull = true;
                            col1121.Caption = "noofdays";
                            col1121.ColumnName = "noofdays";
                            tempTable.Columns.Add(col1121);

                            DataColumn col3 = new DataColumn();
                            col3.DataType = System.Type.GetType("System.String");
                            col3.AllowDBNull = true;
                            col3.Caption = "BasicDA";
                            col3.ColumnName = "BasicDA";
                            tempTable.Columns.Add(col3);
                            DataColumn col4 = new DataColumn();
                            col4.DataType = System.Type.GetType("System.String");
                            col4.AllowDBNull = true;
                            col4.Caption = "NoofEmps";
                            col4.ColumnName = "NoofEmps";
                            tempTable.Columns.Add(col4);
                            DataColumn col5 = new DataColumn();
                            col5.DataType = System.Type.GetType("System.String");
                            col5.AllowDBNull = true;
                            col5.Caption = "PayRate";
                            col5.ColumnName = "PayRate";
                            tempTable.Columns.Add(col5);

                            DataColumn col51 = new DataColumn();
                            col51.DataType = System.Type.GetType("System.String");
                            col51.AllowDBNull = true;
                            col51.Caption = "newPayRate";
                            col51.ColumnName = "newPayRate";
                            tempTable.Columns.Add(col51);
                            DataColumn col6 = new DataColumn();
                            col6.DataType = System.Type.GetType("System.String");
                            col6.AllowDBNull = true;
                            col6.Caption = "DutyHours";
                            col6.ColumnName = "DutyHours";
                            tempTable.Columns.Add(col6);
                            DataColumn col7 = new DataColumn();
                            col7.DataType = System.Type.GetType("System.String");
                            col7.AllowDBNull = true;
                            col7.Caption = "OT Amount";
                            col7.ColumnName = "otamount";
                            tempTable.Columns.Add(col7);


                            DataColumn col8 = new DataColumn();
                            col8.DataType = System.Type.GetType("System.String");
                            col8.AllowDBNull = true;
                            col8.Caption = "DutyHrs";
                            col8.ColumnName = "DutyHrs";
                            tempTable.Columns.Add(col8);

                            DataColumn col824 = new DataColumn();
                            col824.DataType = System.Type.GetType("System.String");
                            col824.AllowDBNull = true;
                            col824.Caption = "CGSTAmt";
                            col824.ColumnName = "CGSTAmt";
                            tempTable.Columns.Add(col824);


                            DataColumn col825 = new DataColumn();
                            col825.DataType = System.Type.GetType("System.String");
                            col825.AllowDBNull = true;
                            col825.Caption = "CGSTPrc";
                            col825.ColumnName = "CGSTPrc";
                            tempTable.Columns.Add(col825);


                            DataColumn col826 = new DataColumn();
                            col826.DataType = System.Type.GetType("System.String");
                            col826.AllowDBNull = true;
                            col826.Caption = "SGSTAmt";
                            col826.ColumnName = "SGSTAmt";
                            tempTable.Columns.Add(col826);


                            DataColumn col827 = new DataColumn();
                            col827.DataType = System.Type.GetType("System.String");
                            col827.AllowDBNull = true;
                            col827.Caption = "SGSTPrc";
                            col827.ColumnName = "SGSTPrc";
                            tempTable.Columns.Add(col827);


                            DataColumn col828 = new DataColumn();
                            col828.DataType = System.Type.GetType("System.String");
                            col828.AllowDBNull = true;
                            col828.Caption = "IGSTAmt";
                            col828.ColumnName = "IGSTAmt";
                            tempTable.Columns.Add(col828);


                            DataColumn col829 = new DataColumn();
                            col829.DataType = System.Type.GetType("System.String");
                            col829.AllowDBNull = true;
                            col829.Caption = "IGSTPrc";
                            col829.ColumnName = "IGSTPrc";
                            tempTable.Columns.Add(col829);

                            DataColumn col830 = new DataColumn();
                            col830.DataType = System.Type.GetType("System.String");
                            col830.AllowDBNull = true;
                            col830.Caption = "TotalTaxAmount";
                            col830.ColumnName = "TotalTaxAmount";
                            tempTable.Columns.Add(col830);

                            DataColumn col831 = new DataColumn();
                            col831.DataType = System.Type.GetType("System.String");
                            col831.AllowDBNull = true;
                            col831.Caption = "HSNNumber";
                            col831.ColumnName = "HSNNumber";
                            tempTable.Columns.Add(col831);



                            DataColumn col832 = new DataColumn();
                            col832.DataType = System.Type.GetType("System.String");
                            col832.AllowDBNull = true;
                            col832.Caption = "GSTper";
                            col832.ColumnName = "GSTper";
                            tempTable.Columns.Add(col832);

                            DataColumn colextra2 = new DataColumn();
                            colextra2.DataType = System.Type.GetType("System.String");
                            colextra2.AllowDBNull = true;
                            colextra2.Caption = "Extra";
                            colextra2.ColumnName = "Extra";
                            tempTable.Columns.Add(colextra2);

                            DataColumn col833 = new DataColumn();
                            col833.DataType = System.Type.GetType("System.String");
                            col833.AllowDBNull = true;
                            col833.Caption = "UOM";
                            col833.ColumnName = "UOM";
                            tempTable.Columns.Add(col833);


                            string strQry = "Select Designations from ContractDetails where ClientID='" + ddlclientid.SelectedValue + "'";
                            string lumquery = "Select lumpsumtext from Contracts  where ClientID='" + ddlclientid.SelectedValue + "'";
                            DataTable desigTable = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                            DataTable designTable = config.ExecuteAdaptorAsyncWithQueryParams(lumquery).Result;
                            string designation = "Lumpsum";
                            if (desigTable.Rows.Count > 0)
                            {
                                designation = desigTable.Rows[0]["Designations"].ToString();
                            }
                            DataRow row = tempTable.NewRow();
                            row["UnitId"] = ddlclientid.SelectedValue;
                            row["Designation"] = designTable.Rows[0]["lumpsumtext"].ToString();
                            row["Branch"] = "0";
                            row["BasicDA"] = "0";
                            row["NoofEmps"] = "0";
                            row["DutyHrs"] = "0";
                            row["PayRate"] = "0";
                            row["DutyHours"] = "";
                            row["otamount"] = "0";
                            row["newpayrate"] = "0";


                            tempTable.Rows.Add(row);

                            gvClientBilling.DataSource = tempTable;
                            gvClientBilling.DataBind();

                            if (gvClientBilling.Rows.Count > 0)
                            {
                                TextBox totAmount = gvClientBilling.Rows[0].FindControl("lblAmount") as TextBox;
                                TextBox lblpayrate = gvClientBilling.Rows[0].FindControl("lblpayrate") as TextBox;

                                decimal lumpsumAmount = 0;
                                if (dtContracts.Rows[0]["TotalChrg"].ToString().Trim().Length > 0)
                                    lumpsumAmount = Convert.ToDecimal(dtContracts.Rows[0]["TotalChrg"].ToString().Trim());
                                totAmount.Text = dtContracts.Rows[0]["TotalChrg"].ToString();
                                TotalResourceCost = lumpsumAmount;
                                lblpayrate.Text = dtContracts.Rows[0]["TotalChrg"].ToString();
                            }
                        }
                        else
                        {
                            gvClientBilling.DataSource = null;
                            gvClientBilling.DataBind();
                        }

                        #endregion End Lumsum Part
                    }

                    #region Begin Extra Data For Billing

                    if (dtContracts.Rows.Count > 0)
                    {
                        string strServCharge = dtContracts.Rows[0]["ServiceChrg"].ToString();
                        string strServTax = dtContracts.Rows[0]["ServiceTax"].ToString();
                        string strsbCess = dtContracts.Rows[0]["SBCESSAmt"].ToString();
                        string strkkCess = dtContracts.Rows[0]["KKCESSAmt"].ToString();
                        string strCess = dtContracts.Rows[0]["CESS"].ToString();
                        string strSheCess = dtContracts.Rows[0]["SHECess"].ToString();
                        string strRelChrgAmt = dtContracts.Rows[0]["RelChrgAmt"].ToString();

                        string strBPFAmt = dtContracts.Rows[0]["Bpfamt"].ToString();
                        string strBESIAmt = dtContracts.Rows[0]["Besiamt"].ToString();
                        string strBPFPer = dtContracts.Rows[0]["BpfPer"].ToString();
                        string strBESIPer = dtContracts.Rows[0]["BesiPer"].ToString();

                        string strCGST = dtContracts.Rows[0]["CGSTAmt"].ToString();
                        string strSGST = dtContracts.Rows[0]["SGSTAmt"].ToString();
                        string strIGST = dtContracts.Rows[0]["IGSTAmt"].ToString();
                        string strCess1 = dtContracts.Rows[0]["Cess1Amt"].ToString();
                        string strCess2 = dtContracts.Rows[0]["Cess2Amt"].ToString();


                        dutiestotalamount = dtContracts.Rows[0]["dutiestotalamount"].ToString();
                        //TotalResourceCost = Convert.ToSingle(dtContracts.Rows[0]["dutiestotalamount"].ToString());

                        machineryCost = decimal.Parse(dtContracts.Rows[0]["MachinaryCost"].ToString());
                        materialCost = decimal.Parse(dtContracts.Rows[0]["MaterialCost"].ToString());
                        maintenancecost = decimal.Parse(dtContracts.Rows[0]["ElectricalChrg"].ToString());
                        extraamountonecost = decimal.Parse(dtContracts.Rows[0]["ExtraAmtone"].ToString());
                        extraamoounttwocost = decimal.Parse(dtContracts.Rows[0]["ExtraAmtTwo"].ToString());
                        discountone = decimal.Parse(dtContracts.Rows[0]["Discount"].ToString());
                        discounttwo = decimal.Parse(dtContracts.Rows[0]["Discounttwo"].ToString());

                        txtRemarks.Text = dtContracts.Rows[0]["Remarks"].ToString();

                        txtmachinarycost.Text = dtContracts.Rows[0]["Machinarycosttitle"].ToString();
                        txtMaterialcost.Text = dtContracts.Rows[0]["Materialcosttitle"].ToString();
                        txtMaintanancecost.Text = dtContracts.Rows[0]["Maintanancecosttitle"].ToString();
                        txtextraonetitle.Text = dtContracts.Rows[0]["Extraonetitle"].ToString();
                        txtextratwotitle.Text = dtContracts.Rows[0]["Extratwotitle"].ToString();
                        txtdiscount.Text = dtContracts.Rows[0]["Discountonetitle"].ToString();
                        txtdiscounttwotitle.Text = dtContracts.Rows[0]["Discounttwotitle"].ToString();


                        #region New code for extradata for billing titles as on 20/01/2014 by venkat

                        Machinarycosttitle = dtContracts.Rows[0]["Machinarycosttitle"].ToString();
                        Materialcosttitle = dtContracts.Rows[0]["Materialcosttitle"].ToString();
                        Maintanancecosttitle = dtContracts.Rows[0]["Maintanancecosttitle"].ToString();
                        Extraonetitle = dtContracts.Rows[0]["Extraonetitle"].ToString();
                        Extratwotitle = dtContracts.Rows[0]["Extratwotitle"].ToString();
                        Discountonetitle = dtContracts.Rows[0]["Discountonetitle"].ToString();
                        Discounttwotitle = dtContracts.Rows[0]["Discounttwotitle"].ToString();

                        #endregion

                        #region New code for extradata  as on 27/01/2014 by venkat

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            Extradatacheck = Boolean.Parse(dtContracts.Rows[0]["Extradatacheck"].ToString());
                            if (Extradatacheck == true)
                            {
                                checkExtraData.Checked = true;
                            }
                            else
                            {
                                checkExtraData.Checked = false;
                            }
                        }


                        if (checkExtraData.Checked == true)
                        {
                            if (Chk_Month.Checked == false)
                            {
                                if (ddlclientid.SelectedIndex > 0 && ddlmonth.SelectedIndex > 0)
                                {
                                    panelRemarks.Visible = true;
                                }
                            }
                            if (Chk_Month.Checked == true)
                            {
                                if (ddlclientid.SelectedIndex > 0 && txtmonth.Text.Trim().Length > 0)
                                {
                                    panelRemarks.Visible = true;
                                }
                            }
                        }

                        #endregion

                        #region Begin New Code for service tax extradata  as 01/04/2014 by venkat

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            STMachinary = Boolean.Parse(dtContracts.Rows[0]["STMachinary"].ToString());
                            if (STMachinary == true)
                            {
                                chkSTYesMachinary.Checked = true;
                            }
                            else
                            {
                                chkSTYesMachinary.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            STMaterial = Boolean.Parse(dtContracts.Rows[0]["STMaterial"].ToString());
                            if (STMaterial == true)
                            {
                                chkSTYesMaterial.Checked = true;
                            }
                            else
                            {
                                chkSTYesMaterial.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            STMaintenance = Boolean.Parse(dtContracts.Rows[0]["STMaintenance"].ToString());
                            if (STMaintenance == true)
                            {
                                chkSTYesElectrical.Checked = true;
                            }
                            else
                            {
                                chkSTYesElectrical.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            STExtraone = Boolean.Parse(dtContracts.Rows[0]["STExtraone"].ToString());
                            if (STExtraone == true)
                            {
                                chkSTYesExtraone.Checked = true;
                            }
                            else
                            {
                                chkSTYesExtraone.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            STExtratwo = Boolean.Parse(dtContracts.Rows[0]["STExtratwo"].ToString());
                            if (STExtratwo == true)
                            {
                                chkSTYesExtratwo.Checked = true;
                            }
                            else
                            {
                                chkSTYesExtratwo.Checked = false;
                            }
                        }


                        #endregion

                        #region Begin New Code for service Charge on extradata  as 01/04/2014 by venkat

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            SCMachinary = Boolean.Parse(dtContracts.Rows[0]["SCMachinary"].ToString());
                            if (SCMachinary == true)
                            {
                                chkSCYesMachinary.Checked = true;
                            }
                            else
                            {
                                chkSCYesMachinary.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            SCMaterial = Boolean.Parse(dtContracts.Rows[0]["SCMaterial"].ToString());
                            if (SCMaterial == true)
                            {
                                chkSCYesMaterial.Checked = true;
                            }
                            else
                            {
                                chkSCYesMaterial.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            SCMaintenance = Boolean.Parse(dtContracts.Rows[0]["SCMaintenance"].ToString());
                            if (SCMaintenance == true)
                            {
                                chkSCYesElectrical.Checked = true;
                            }
                            else
                            {
                                chkSCYesElectrical.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            SCExtraone = Boolean.Parse(dtContracts.Rows[0]["SCExtraone"].ToString());
                            if (SCExtraone == true)
                            {
                                chkSCYesExtraone.Checked = true;
                            }
                            else
                            {
                                chkSCYesExtraone.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            SCExtratwo = Boolean.Parse(dtContracts.Rows[0]["SCExtratwo"].ToString());
                            if (SCExtratwo == true)
                            {
                                chkSCYesExtratwo.Checked = true;
                            }
                            else
                            {
                                chkSCYesExtratwo.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            STDiscountone = Boolean.Parse(dtContracts.Rows[0]["STDiscountone"].ToString());
                            if (STDiscountone == true)
                            {
                                chkSTDiscountone.Checked = true;
                            }
                            else
                            {
                                chkSTDiscountone.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(dtContracts.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            STDiscounttwo = Boolean.Parse(dtContracts.Rows[0]["STDiscounttwo"].ToString());
                            if (STDiscounttwo == true)
                            {
                                chkSTDiscounttwo.Checked = true;
                            }
                            else
                            {
                                chkSTDiscounttwo.Checked = false;
                            }
                        }


                        #endregion

                        #region Begin New Code for Service tax amount on Extradata as on 01/04/2014 by venkat

                        Staxonservicecharge = decimal.Parse(dtContracts.Rows[0]["Staxonservicecharge"].ToString());
                        SCamtonMachinary = decimal.Parse(dtContracts.Rows[0]["SCamtonMachinary"].ToString());
                        SCamtonMaintenance = decimal.Parse(dtContracts.Rows[0]["SCamtonMaintenance"].ToString());
                        SCamtonMaterial = decimal.Parse(dtContracts.Rows[0]["SCamtonMaterial"].ToString());
                        SCamtonExtraone = decimal.Parse(dtContracts.Rows[0]["SCamtonExtraone"].ToString());
                        SCamtonExtratwo = decimal.Parse(dtContracts.Rows[0]["SCamtonExtratwo"].ToString());

                        #endregion


                        GRANDTOTAL = decimal.Parse(dtContracts.Rows[0]["GrandTotal"].ToString());
                        /* End New code As on [01-07-2013]   */


                        txtMachinery.Text = machineryCost.ToString();
                        txtMaterial.Text = materialCost.ToString();
                        txtElectical.Text = maintenancecost.ToString();
                        txtextraonevalue.Text = extraamountonecost.ToString();
                        txtextratwovalue.Text = extraamoounttwocost.ToString();
                        txtDiscounts.Text = discountone.ToString();
                        txtdiscounttwovalue.Text = discounttwo.ToString();

                        lblRemarks.Text = txtRemarks.Text;

                        if (strRelChrgAmt.Trim().Length > 0)
                        {
                            RelChrgAmt = Convert.ToDecimal(strRelChrgAmt);
                            lblRelChrgAmt.Text = RelChrgAmt.ToString("0.00");
                        }

                        if (strBPFAmt.Trim().Length > 0)
                        {
                            Bpfamt = Convert.ToSingle(strBPFAmt);
                            lblBPFAmt.Text = Bpfamt.ToString("0.00");
                        }

                        if (strBESIAmt.Trim().Length > 0)
                        {
                            Besiamt = Convert.ToSingle(strBESIAmt);
                            lblBESiAmt.Text = Besiamt.ToString("0.00");
                        }

                        if (strBPFPer.Trim().Length > 0)
                        {
                            BpfPer = Convert.ToSingle(strBPFPer);
                            TxtPfPrc.Text = BpfPer.ToString("0.00");
                        }

                        if (strBESIPer.Trim().Length > 0)
                        {
                            BesiPer = Convert.ToSingle(strBESIPer);
                            TxtEsiPrc.Text = BesiPer.ToString("0.00");
                        }


                        if (strServCharge.Trim().Length > 0)
                        {
                            ServiceCharge = Convert.ToDecimal(strServCharge);
                            lblServiceCharges.Text = ServiceCharge.ToString("0.00");
                        }
                        if (strServTax.Trim().Length > 0)
                        {
                            ServiceTax = Convert.ToDecimal(strServTax);
                            lblServiceTax.Text = ServiceTax.ToString("0.00");
                        }
                        if (strsbCess.Trim().Length > 0)
                        {
                            sbCess = Convert.ToDecimal(strsbCess);
                            lblSBCESS.Text = sbCess.ToString("0.00");
                        }

                        if (strkkCess.Trim().Length > 0)
                        {
                            kkCess = Convert.ToDecimal(strkkCess);
                            lblKKCESS.Text = kkCess.ToString("0.00");
                        }


                        #region for GST on 17-6-2017 by swathi

                        if (strCGST.Trim().Length > 0)
                        {
                            CGST = Convert.ToDecimal(strCGST);
                            lblCGST.Text = CGST.ToString("0.00");
                        }


                        if (strSGST.Trim().Length > 0)
                        {
                            SGST = Convert.ToDecimal(strSGST);
                            lblSGST.Text = SGST.ToString("0.00");
                        }


                        if (strIGST.Trim().Length > 0)
                        {
                            IGST = Convert.ToDecimal(strIGST);
                            lblIGST.Text = IGST.ToString("0.00");
                        }

                        if (strCess1.Trim().Length > 0)
                        {
                            Cess1 = Convert.ToDecimal(strCess1);
                            lblCess1.Text = Cess1.ToString("0.00");
                        }

                        if (strCess2.Trim().Length > 0)
                        {
                            Cess2 = Convert.ToDecimal(strCess2);
                            lblCess2.Text = Cess2.ToString("0.00");
                        }



                        #endregion for GST on 17-6-2017

                        if (strCess.Trim().Length > 0)
                        {
                            Cess = Convert.ToDecimal(strCess);
                            lblCESS.Text = Cess.ToString("0.00");
                        }
                        if (strSheCess.Trim().Length > 0)
                        {
                            Shecess = Convert.ToDecimal(strSheCess);
                            lblSheCESS.Text = Shecess.ToString("0.00");
                        }
                        if (bIncludeST)
                        {
                            lblServiceTaxTitle.Visible = false;
                            lblServiceTax.Visible = false;
                            lblCESS.Visible = false;
                            lblCESSTitle.Visible = false;
                            lblSheCESS.Visible = false;
                            lblSheCESSTitle.Visible = false;
                            lblSBCESS.Visible = false;
                            lblSBCESSTitle.Visible = false;
                            lblKKCESS.Visible = false;
                            lblKKCESSTitle.Visible = false;
                        }
                        else
                        {
                            lblServiceTaxTitle.Visible = true;
                            lblServiceTax.Visible = true;
                            lblCESS.Visible = true;
                            lblCESSTitle.Visible = true;
                            lblSheCESS.Visible = true;
                            lblSheCESSTitle.Visible = true;
                            lblSBCESS.Visible = true;
                            lblSBCESSTitle.Visible = true;
                            lblKKCESS.Visible = true;
                            lblKKCESSTitle.Visible = true;
                        }
                        #region for GST  on 17-6-2017 by swathi

                        if (CCGST == "True")
                        {
                            lblCGST.Visible = true;
                            TxtCGSTPrc.Visible = false;
                            lblCGSTTitle.Visible = true;
                        }
                        else
                        {
                            lblCGST.Visible = false;
                            TxtCGSTPrc.Visible = false;
                            lblCGSTTitle.Visible = false;
                        }

                        if (CSGST == "True")
                        {
                            lblSGST.Visible = true;
                            TxtSGSTPrc.Visible = false;
                            lblSGSTTitle.Visible = true;
                        }
                        else
                        {
                            lblSGST.Visible = false;
                            TxtSGSTPrc.Visible = false;
                            lblSGSTTitle.Visible = false;
                        }

                        if (CIGST == "True")
                        {
                            lblIGST.Visible = true;
                            TxtIGSTPrc.Visible = false;
                            lblIGSTTitle.Visible = true;
                        }
                        else
                        {
                            lblIGST.Visible = false;
                            TxtIGSTPrc.Visible = false;
                            lblIGSTTitle.Visible = false;
                        }


                        if (CCess1 == "True")
                        {
                            lblCess1.Visible = true;
                            TxtCess1Prc.Visible = false;
                            lblCess1Title.Visible = true;
                        }
                        else
                        {
                            lblCess1.Visible = false;
                            TxtCess1Prc.Visible = false;
                            lblCess1Title.Visible = false;
                        }

                        if (CCess2 == "True")
                        {
                            lblCess2.Visible = true;
                            TxtCess2Prc.Visible = false;
                            lblCess2Title.Visible = true;
                        }
                        else
                        {
                            lblCess2.Visible = false;
                            TxtCess2Prc.Visible = false;
                            lblCess2Title.Visible = false;
                        }


                        #endregion for GST  on 17-6-2017 by swathi
                    }
                    #endregion End Extra Data For Billing

                    DateTime today = DateTime.Now.Date;
                    lblServiceChargeTitle.Visible = false;
                    lblServiceCharges.Visible = false;


                    #region Begin Extra Data For Billing Part - 2


                    decimal electricalCost = 0;
                    decimal discountAmount = 0;

                    if (dtContracts.Rows.Count > 0)
                    {
                        string seviceChargetype = dtContracts.Rows[0]["ServiceChargeType"].ToString();

                        #region Machinary Cost checking

                        if (machineryCost > 0)
                        {
                            MachineryCost = Convert.ToDecimal(machineryCost);
                            if (MachineryCost > 0)
                            {

                                if (STMachinary == true)
                                {
                                    lblMachinerywithst.Text = MachineryCost.ToString("0.00");
                                    lblMachinerywithst.Visible = true;
                                    lblMachineryTitlewithst.Visible = true;
                                    // lblMachineryTitlewithst.Text = txtmachinarycost.Text;
                                    lblMachineryTitlewithst.Text = Machinarycosttitle;
                                }
                                else
                                {
                                    lblMachinery.Text = MachineryCost.ToString("0.00");
                                    lblMachinery.Visible = true;
                                    lblMachineryTitle.Visible = true;
                                    //lblMachineryTitle.Text = txtmachinarycost.Text;
                                    lblMachineryTitle.Text = Machinarycosttitle;
                                }
                            }
                            else
                            {

                                #region New code as on 21/01/2014


                                lblMachinerywithst.Text = string.Empty; ;
                                lblMachineryTitlewithst.Text = string.Empty;
                                lblMachinerywithst.Text = string.Empty;
                                lblMachineryTitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }

                        #endregion

                        #region Material Cost checking

                        if (materialCost > 0)
                        {
                            MaterialCost = Convert.ToDecimal(materialCost);
                            if (MaterialCost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    lblMaterialwithst.Text = MaterialCost.ToString("0.00");
                                    lblMaterialwithst.Visible = true;
                                    lblMaterialTitlewithst.Visible = true;
                                    //lblMaterialTitlewithst.Text = txtMaterialcost.Text;
                                    lblMaterialTitlewithst.Text = Materialcosttitle;
                                }
                                else
                                {
                                    lblMaterial.Text = MaterialCost.ToString("0.00");
                                    lblMaterial.Visible = true;
                                    lblMaterialTitle.Visible = true;
                                    //lblMaterialTitle.Text = txtMaterialcost.Text;
                                    lblMaterialTitle.Text = Materialcosttitle;
                                }

                            }
                            else
                            {

                                lblMaterial.Text = string.Empty;
                                lblMaterialTitle.Text = string.Empty;
                                lblMaterialwithst.Text = string.Empty;
                                lblMaterialTitlewithst.Text = string.Empty;

                            }
                        }
                        #endregion


                        if (RelChrgAmt > 0)
                        {
                            lblRelChrTitle.Visible = true;
                            lblRelChrgAmt.Visible = true;
                        }

                        else
                        {
                            lblRelChrTitle.Visible = false;
                            lblRelChrgAmt.Visible = false;
                        }

                        if (seviceChargetype.Length > 0)
                        {
                            if (ServiceCharge > 0)
                            {
                                lblServiceChargeTitle.Visible = true;
                                lblServiceCharges.Visible = true;
                            }
                        }
                        else
                        {
                            lblServiceChargeTitle.Visible = false;
                            lblServiceCharges.Visible = false;
                        }

                        if (Bpfamt > 0)
                        {
                            lblBPFTitle.Visible = true;
                            lblBPFAmt.Visible = true;
                            TxtPfPrc.Visible = true;

                        }
                        else
                        {
                            lblBPFTitle.Visible = false;
                            lblBPFAmt.Visible = false;
                            TxtPfPrc.Visible = false;
                        }
                        if (Besiamt > 0)
                        {
                            lblBESiTitle.Visible = true;
                            lblBESiAmt.Visible = true;
                            TxtEsiPrc.Visible = true;
                        }
                        else
                        {
                            lblBESiTitle.Visible = false;
                            lblBESiAmt.Visible = false;
                            TxtEsiPrc.Visible = false;
                        }

                        #region Maintenance Cost Checking

                        if (maintenancecost > 0)
                        {
                            electricalCost = Convert.ToDecimal(maintenancecost);
                            if (electricalCost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    lblElectricalTitlewithst.Visible = true;
                                    lblElectricalwithst.Visible = true;
                                    lblElectricalwithst.Text = electricalCost.ToString("0.00");
                                    lblElectricalTitlewithst.Text = Maintanancecosttitle;
                                }
                                else
                                {
                                    lblElectricalTitle.Visible = true;
                                    lblElectrical.Visible = true;
                                    lblElectrical.Text = electricalCost.ToString("0.00");
                                    lblElectricalTitle.Text = Maintanancecosttitle;
                                }
                            }
                            else
                            {

                                lblElectrical.Text = string.Empty;
                                lblElectricalTitle.Text = string.Empty;
                                lblElectricalwithst.Text = string.Empty;
                                lblElectricalTitlewithst.Text = string.Empty;

                            }
                        }

                        #endregion

                        #region Discount one


                        if (discountone > 0)
                        {
                            discountAmount = Convert.ToDecimal(discountone);
                            if (discountAmount > 0)
                            {
                                if (STDiscountone == true)
                                {

                                    lblDiscountwithst.Visible = true;
                                    lblDiscountTitlewithst.Visible = true;
                                    lblDiscountwithst.Text = discountAmount.ToString("0.00");
                                    lblDiscountTitlewithst.Text = Discountonetitle;


                                }
                                else
                                {

                                    lblDiscount.Visible = true;
                                    lblDiscountTitle.Visible = true;
                                    lblDiscount.Text = discountAmount.ToString("0.00");
                                    lblDiscountTitle.Text = Discountonetitle;
                                }

                            }
                            else
                            {

                                #region New code as on 21/01/2014

                                lblDiscountwithst.Visible = false;
                                lblDiscountTitlewithst.Visible = false;
                                lblDiscount.Visible = false;
                                lblDiscountTitle.Visible = false;

                                lblDiscount.Text = string.Empty;
                                lblDiscountTitle.Text = string.Empty;
                                lblDiscountwithst.Text = string.Empty;
                                lblDiscountTitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }

                        #endregion

                        /* Begin  New code as on [01-07-2013]*/

                        #region Extraamount One



                        if (extraamountonecost > 0)
                        {
                            ExtraOneAmt = Convert.ToDecimal(extraamountonecost);
                            if (ExtraOneAmt > 0)
                            {
                                if (STExtraone == true)
                                {

                                    lblextraonetitlewithst.Visible = true;
                                    lblextraonewithst.Visible = true;
                                    lblextraonewithst.Text = ExtraOneAmt.ToString("0.00");
                                    //lblextraonetitlewithst.Text = txtextraonetitle.Text;
                                    lblextraonetitlewithst.Text = Extraonetitle;
                                }
                                else
                                {
                                    lblextraoneamttitle.Visible = true;
                                    lblextraamt.Visible = true;
                                    lblextraamt.Text = ExtraOneAmt.ToString("0.00");
                                    //lblextraoneamttitle.Text = txtextraonetitle.Text;
                                    lblextraoneamttitle.Text = Extraonetitle;
                                }
                            }

                            else
                            {

                                #region New code as on 21/01/2014

                                lblextraamt.Text = string.Empty;
                                lblextraoneamttitle.Text = string.Empty;
                                lblextraonewithst.Text = string.Empty;
                                lblextraonetitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }
                        #endregion

                        #region Extraamount Two


                        if (extraamoounttwocost > 0)
                        {
                            ExtraTwoAmt = Convert.ToDecimal(extraamoounttwocost);
                            if (ExtraTwoAmt > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    lblextratwotitlewithst.Visible = true;
                                    lblextratwowithst.Visible = true;
                                    lblextratwowithst.Text = ExtraTwoAmt.ToString("0.00");
                                    //lblextratwotitlewithst.Text = txtextratwotitle.Text;
                                    lblextratwotitlewithst.Text = Extratwotitle;
                                }
                                else
                                {
                                    lblextratwoamttitle.Visible = true;
                                    lblextratwoamt.Visible = true;
                                    lblextratwoamt.Text = ExtraTwoAmt.ToString("0.00");
                                    lblextratwoamttitle.Text = txtextratwotitle.Text;
                                }
                            }

                            else
                            {

                                #region New code as on 21/01/2014

                                lblextratwoamt.Text = string.Empty;
                                lblextratwoamttitle.Text = string.Empty;
                                lblextratwowithst.Text = string.Empty;
                                lblextratwotitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }
                        #endregion


                        #region Discount two


                        if (discounttwo > 0)
                        {
                            DisCountTwoAmt = Convert.ToDecimal(discounttwo);
                            if (DisCountTwoAmt > 0)
                            {
                                if (STDiscounttwo == true)
                                {
                                    lblDiscounttwowithst.Visible = true;
                                    lblDiscounttwotitlewithst.Visible = true;
                                    lblDiscounttwowithst.Text = DisCountTwoAmt.ToString("0.00");
                                    lblDiscounttwotitlewithst.Text = Discounttwotitle;




                                }
                                else
                                {
                                    lblDiscounttwo.Visible = true;
                                    lblDiscounttwoTitle.Visible = true;
                                    lblDiscounttwo.Text = DisCountTwoAmt.ToString("0.00");
                                    lblDiscounttwoTitle.Text = Discounttwotitle;


                                }
                            }
                            else
                            {

                                #region New code as on 21/01/2014
                                lblDiscounttwowithst.Visible = false;
                                lblDiscounttwotitlewithst.Visible = false;
                                lblDiscounttwo.Visible = false;
                                lblDiscounttwoTitle.Visible = false;

                                lblDiscounttwo.Text = string.Empty;
                                lblDiscounttwoTitle.Text = string.Empty;
                                lblDiscounttwowithst.Text = string.Empty;
                                lblDiscounttwotitlewithst.Text = string.Empty;

                                #endregion
                            }

                        }

                        #endregion
                        /*End  New code As on [01-07-2013]*/

                        #region Begin New Code for Service tax amount on Individual extra detail as on 01/04/2014 by Venkat

                        if (Staxonservicecharge > 0)
                        {
                            lblStaxamtonServicechargetitle.Visible = true;
                            lblStaxamtonServicecharge.Visible = true;
                            lblStaxamtonServicecharge.Text = Staxonservicecharge.ToString();
                        }
                        else
                        {

                            lblStaxamtonServicechargetitle.Visible = false;
                            lblStaxamtonServicecharge.Visible = false;
                            lblStaxamtonServicecharge.Text = string.Empty;
                        }

                        if (SCamtonMachinary > 0 && SCMachinary == true)
                        {

                            lblSChargeamtonMachinarytitle.Visible = true;
                            lblSChargeamtonMachinary.Visible = true;
                            lblSChargeamtonMachinary.Text = SCamtonMachinary.ToString();
                        }
                        else
                        {
                            lblSChargeamtonMachinarytitle.Visible = false;
                            lblSChargeamtonMachinary.Visible = false;
                            lblSChargeamtonMachinary.Text = string.Empty;
                        }


                        if (SCamtonMaintenance > 0 && SCMaintenance == true)
                        {

                            lblSchargeamtonMaintenancetitle.Visible = true;
                            lblSchargeamtonMaintenance.Visible = true;
                            lblSchargeamtonMaintenance.Text = SCamtonMaintenance.ToString();
                        }
                        else
                        {
                            lblSchargeamtonMaintenancetitle.Visible = false;
                            lblSchargeamtonMaintenance.Visible = false;
                            lblSchargeamtonMaintenance.Text = string.Empty;
                        }


                        if (SCamtonMaterial > 0 && SCMaterial == true)
                        {

                            lblSchargeamtonMaterialtitle.Visible = true;
                            lblSchargeamtonMaterial.Visible = true;
                            lblSchargeamtonMaterial.Text = SCamtonMaterial.ToString();

                        }
                        else
                        {
                            lblSchargeamtonMaterialtitle.Visible = false;
                            lblSchargeamtonMaterial.Visible = false;
                            lblSchargeamtonMaterial.Text = string.Empty;
                        }


                        if (SCamtonExtraone > 0 && SCExtraone == true)
                        {

                            lblSchargeamtonExtraonetitle.Visible = true;
                            lblSchargeamtonExtraone.Visible = true;
                            lblSchargeamtonExtraone.Text = SCamtonExtraone.ToString();

                        }
                        else
                        {
                            lblSchargeamtonExtraonetitle.Visible = false;
                            lblSchargeamtonExtraone.Visible = false;
                            lblSchargeamtonExtraone.Text = string.Empty;
                        }

                        if (SCamtonExtratwo > 0 && SCExtratwo == true)
                        {

                            lblSchargeamtonExtratwotitle.Visible = true;
                            lblSchargeamtonExtratwo.Visible = true;
                            lblSchargeamtonExtratwo.Text = SCamtonExtratwo.ToString();
                        }
                        else
                        {
                            lblSchargeamtonExtratwotitle.Visible = false;
                            lblSchargeamtonExtratwo.Visible = false;
                            lblSchargeamtonExtratwo.Text = string.Empty;
                        }

                        #endregion


                    }

                    #endregion End Extra Data For Billing Part - 2

                    #region Begin Code For Grand Total Part
                    TotalResourceCost = Convert.ToDecimal(dutiestotalamount);

                    lblTotalResources.Text = (TotalResourceCost).ToString("0.00");
                    // GrandTotal = TotalResourceCost + MachineryCost + MaterialCost + ServiceCharge + electricalCost;
                    // if (!bIncludeST)
                    //     GrandTotal += ServiceTax + Cess + Shecess + sbCess + kkCess;
                    // GrandTotal -= lessST75;
                    GrandTotal = 0;
                    if (dtContracts.Rows.Count > 0)
                        GrandTotal = Convert.ToDecimal(dtContracts.Rows[0]["Grandtotal"].ToString());
                    //GrandTotal = (float)Math.Round(GrandTotal, 0);
                    lblGrandTotal.Text = GrandTotal.ToString("0.00");
                    string GTotal = GrandTotal.ToString("0.00");
                    string[] arr = GTotal.ToString().Split("."[0]);
                    string inwords = "";
                    string rupee = (arr[0]);
                    string paise = "";
                    if (arr.Length == 2)
                    {
                        if (arr[1].Length > 0 && arr[1] != "00")
                        {
                            paise = (arr[1]);
                        }
                    }

                    if (paise != "0.00" && paise != "0" && paise != "")
                    {
                        int I = Int16.Parse(paise);
                        String p = NumberToEnglish.Instance.NumbersToWords(I, true);
                        paise = p;
                        rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), false);
                        inwords = " Rupees " + rupee + "" + paise + " Paise Only";

                    }
                    else
                    {
                        rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), true);
                        inwords = " Rupees " + rupee + " Only";
                    }



                    lblamtinwords.Text = inwords;





                    #endregion End Code For Grand Total Part

                    //VisibleFreeze();
                }
                #endregion  Begin Code For Display Invoice Data Based On The ClientIdAndMonth as on [04-03-2014]
                VisibleFreeze();
            }
            catch (Exception ex)
            {

            }
        }

        protected void btncleardata_Click(object sender, EventArgs e)
        {

            if (gvClientBilling.Rows.Count > 0)
            {
                for (int i = 0; i < gvClientBilling.Rows.Count; i++)
                {
                    TextBox txtgvdesgn = (TextBox)gvClientBilling.Rows[i].Cells[2].FindControl("lbldesgn");
                    TextBox txtstorecode = (TextBox)gvClientBilling.Rows[i].Cells[2].FindControl("txtstorecode");
                    TextBox txtHSNNumber = (TextBox)gvClientBilling.Rows[i].Cells[3].FindControl("txtHSNNumber");
                    TextBox txtnoofemployees = (TextBox)gvClientBilling.Rows[i].Cells[4].FindControl("lblnoofemployees");
                    TextBox txtNoOfDuties = (TextBox)gvClientBilling.Rows[i].Cells[5].FindControl("lblNoOfDuties");
                    TextBox txtPayRate = (TextBox)gvClientBilling.Rows[i].Cells[6].FindControl("lblpayrate");
                    TextBox txtNewPayRate = (TextBox)gvClientBilling.Rows[i].Cells[7].FindControl("txtNewPayRate");
                    DropDownList ddldutytype = (DropDownList)gvClientBilling.Rows[i].Cells[8].FindControl("ddldutytype");
                    DropDownList ddlnod = (DropDownList)gvClientBilling.Rows[i].Cells[9].FindControl("ddlnod");
                    TextBox txtda = (TextBox)gvClientBilling.Rows[i].Cells[10].FindControl("lblda");
                    TextBox txtAmount = (TextBox)gvClientBilling.Rows[i].Cells[11].FindControl("lblAmount");
                    TextBox txtempname = (TextBox)gvClientBilling.Rows[i].Cells[1].FindControl("txtempname");
                    txtgvdesgn.Text = "";
                    txtHSNNumber.Text = "";
                    txtstorecode.Text = "";
                    txtnoofemployees.Text = "0";
                    txtNoOfDuties.Text = "0";
                    txtPayRate.Text = "0";
                    txtda.Text = "0";
                    txtAmount.Text = "0";
                    ddldutytype.SelectedIndex = 0;
                    ddlnod.SelectedIndex = 0;
                    txtempname.Text = "";
                }
            }

        }
        public class PageEventHelper : PdfPageEventHelper
        {
            PdfContentByte cb;
            PdfTemplate template;

            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            public override void OnOpenDocument(PdfWriter writer, Document document)
            {
                cb = writer.DirectContent;
                template = cb.CreateTemplate(50, 50);
            }
            public override void OnEndPage(PdfWriter writer, Document document)
            {
                base.OnEndPage(writer, document);






                iTextSharp.text.Image imgfoot = iTextSharp.text.Image.GetInstance(HttpContext.Current.Server.MapPath("~/assets/Footer.png"));
                //iTextSharp.text.Image imghead = iTextSharp.text.Image.GetInstance(HttpContext.Current.Server.MapPath("~/assets/LetterheadHeader.png"));

                imgfoot.SetAbsolutePosition(0, 0);
                //imghead.SetAbsolutePosition(0, 0);

                //PdfContentByte cbhead = writer.DirectContent;
                //PdfTemplate tp = cbhead.CreateTemplate(500, 130);
                //tp.AddImage(imghead);

                PdfContentByte cbfoot = writer.DirectContent;
                PdfTemplate tpl = cbfoot.CreateTemplate(557, 100);
                tpl.AddImage(imgfoot);

                //cbhead.AddTemplate(tp, 25, 720);

                cbfoot.AddTemplate(tpl, 19, 27);

                //Phrase headPhraseImg = new Phrase(cbhead + "", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 7, iTextSharp.text.Font.NORMAL));
                Phrase footPhraseImg = new Phrase(cbfoot + "", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 7, iTextSharp.text.Font.NORMAL));
            }
        }

        protected void ddlclientid_SelectedIndexChanged(object sender, EventArgs e)
        {
            cleartext();
            btnvisible();
            lblResult.Text = "";
            lbltotalamount.Text = "";
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            rdbcreatebill.Checked = true;
            rdbmodifybill.Checked = false;

            ClearExtraDataForBilling();
            if (ddlclientid.SelectedIndex > 0)
            {
                string SqlQryGetCname = "select clientid from clients where clientid='" + ddlclientid.SelectedValue + "' and clientid like '%" + CmpIDPrefix + "%'";
                DataTable dt;
                dt = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryGetCname).Result;
                ddlCname.SelectedValue = dt.Rows[0]["clientid"].ToString();
                //ddlmonth.SelectedIndex = 0;
                dt = null;
                gvClientBilling.DataSource = dt;
                gvClientBilling.DataBind();

                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex > 0)
                    {
                        if (ddlType.SelectedIndex == 0)
                        {
                            FillMonthDetails();
                            DisplayDataInGrid();
                            VisibleFreeze();
                        }
                        else
                        {
                            FillMonthDetails();
                            LoadOldBillnos();
                            DisplayDataInGridManual();
                            EnabledFields();
                            VisibleFreeze();
                        }
                    }
                }

                else
                {
                    if (txtmonth.Text.Trim().Length > 0)
                    {
                        if (ddlType.SelectedIndex == 0)
                        {
                            FillMonthDetails();
                            DisplayDataInGrid();
                        }
                        else if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            FillMonthDetails();
                            LoadOldBillnos();
                            DisplayDataInGridManual();
                            EnabledFields();
                        }
                    }
                }
            }
            else
            {
                ddlCname.SelectedIndex = 0;
            }
        }

        protected void ddlCname_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            cleartext();
            btnvisible();
            lblResult.Text = "";
            lbltotalamount.Text = "";
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            rdbcreatebill.Checked = true;
            rdbmodifybill.Checked = false;

            ClearExtraDataForBilling();

            if (ddlCname.SelectedIndex > 0)
            {
                string SqlQryGetCname = "select clientid from clients where clientid='" + ddlCname.SelectedValue + "' and clientid like '%" + CmpIDPrefix + "%'";
                DataTable dt;
                dt = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryGetCname).Result;
                if (dt.Rows.Count > 0)
                {
                    ddlclientid.SelectedValue = dt.Rows[0]["clientid"].ToString();
                }

                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex > 0)
                    {
                        if (ddlType.SelectedIndex == 0)
                        {
                            FillMonthDetails();
                            DisplayDataInGrid();
                            VisibleFreeze();
                        }

                        else
                        {
                            LoadOldBillnos();
                            DisplayDataInGridManual();
                            EnabledFields();
                            VisibleFreeze();
                        }
                    }
                }

                else
                {
                    if (txtmonth.Text.Trim().Length > 0)
                    {
                        if (ddlType.SelectedIndex == 0)
                        {
                            FillMonthDetails();
                            DisplayDataInGrid();
                        }

                        else if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            LoadOldBillnos();
                            DisplayDataInGridManual();
                            EnabledFields();
                        }
                    }
                }
            }
            else
            {
                ddlclientid.SelectedIndex = 0;
            }
        }

        protected void checkExtraData_CheckedChanged(object sender, EventArgs e)
        {
            if (checkExtraData.Checked)
            {
                if (ddlclientid.SelectedIndex > 0)
                {
                    panelRemarks.Visible = true;

                    txtmachinarycost.Text = "Machinery Cost :";
                    txtMaterialcost.Text = "Material Cost :";
                    txtMaintanancecost.Text = "Maintenance Work :";
                    txtextraonetitle.Text = "Extra Amount one :";
                    txtextratwotitle.Text = "Extra Amount Two :";
                    txtdiscount.Text = "Discounts :";
                    txtdiscounttwotitle.Text = "Discount Two :";

                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Select Client details and month ');", true);
                    checkExtraData.Checked = false;
                }
            }
            else
            {
                panelRemarks.Visible = false;
            }
        }

        protected void ClearExtraDataForBilling()
        {
            lblResult.Text = "";
            txtDiscounts.Text = "";
            txtElectical.Text = "";
            txtMachinery.Text = "";
            txtMaterial.Text = "";
            txtRemarks.Text = "";
            lblDiscount.Text = "";
            lblElectrical.Text = "";
            lblRemarks.Text = "";
            lblMachinery.Text = "";
            lblMaterial.Text = "";
            lblServiceCharges.Text = "";
            txtbilldate.Text = "";
            txtbillno.Text = "";

            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            //txtfromdate.Text = "";
            //txttodate.Text = "";
            lblTotalResources.Text = "";
            lblServiceCharges.Text = "";
            lblServiceTax.Text = "";
            lblCESS.Text = "";
            lblSBCESS.Text = "";
            lblSheCESS.Text = "";
            lblST75.Text = "";
            lblMachinery.Text = "";
            lblMaterial.Text = "";
            lblElectrical.Text = "";
            lblDiscount.Text = "";
            lblGrandTotal.Text = "";
            lblST25.Text = "";



            checkExtraData.Checked = false;
            panelRemarks.Visible = false;


            lblMachineryTitle.Text = string.Empty;
            lblMachineryTitlewithst.Text = string.Empty;
            lblMachinery.Text = string.Empty;
            lblMachinerywithst.Text = string.Empty;

            lblMaterialTitle.Text = string.Empty;
            lblMaterialTitlewithst.Text = string.Empty;
            lblMaterial.Text = string.Empty;
            lblMaterialwithst.Text = string.Empty;

            lblElectricalTitle.Text = string.Empty;
            lblElectricalTitlewithst.Text = string.Empty;
            lblElectrical.Text = string.Empty;
            lblElectricalwithst.Text = string.Empty;

            lblextraoneamttitle.Text = string.Empty;
            lblextraonetitlewithst.Text = string.Empty;
            lblextraamt.Text = string.Empty;
            lblextraonewithst.Text = string.Empty;

            lblextratwoamttitle.Text = string.Empty;
            lblextratwotitlewithst.Text = string.Empty;
            lblextratwoamt.Text = string.Empty;
            lblextratwowithst.Text = string.Empty;

            lblDiscountTitle.Text = string.Empty;
            lblDiscountTitlewithst.Text = string.Empty;
            lblDiscount.Text = string.Empty;
            lblDiscountwithst.Text = string.Empty;

            lblDiscounttwoTitle.Text = string.Empty;
            lblDiscounttwotitlewithst.Text = string.Empty;
            lblDiscounttwo.Text = string.Empty;
            lblDiscounttwowithst.Text = string.Empty;

            txtmachinarycost.Text = "Machinery Cost :";
            txtMaterialcost.Text = "Material Cost :";
            txtMaintanancecost.Text = "Maintenance Work :";
            txtextraonetitle.Text = "Extra Amount one :";
            txtextratwotitle.Text = "Extra Amount Two :";
            txtdiscount.Text = "Discounts :";
            txtdiscounttwotitle.Text = "Discount Two :";


            chkSTYesMachinary.Checked = chkSTYesElectrical.Checked = chkSTYesMachinary.Checked = chkSTYesExtraone.Checked =
                chkSTYesExtratwo.Checked = chkSTDiscountone.Checked = chkSTDiscounttwo.Checked = false;

            chkSCYesMachinary.Checked = chkSCYesElectrical.Checked = chkSCYesMaterial.Checked = chkSCYesExtraone.Checked =
                chkSCYesExtratwo.Checked = false;

        }

        protected void txtbillno_OnTextChanged(object sender, EventArgs e)
        {
            string sqlqry = "Select Clients.Clientname,unitbill.unitid from unitbill  " +
                "  inner join  clients  on Clients.clientid=unitbill.unitid Where billno='" + txtbillno.Text.Trim() + "'";
            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(sqlqry).Result;
            if (dt.Rows.Count > 0)
            {
                txtclientid.Text = dt.Rows[0][1].ToString();
                txtclientname.Text = dt.Rows[0][0].ToString();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('invalid Bill  no');", true);
            }


        }

        protected void btndelelte_Click(object sender, EventArgs e)
        {

            string sqlqry = "  delete from unitbill  Where billno='" + txtbillno.Text.Trim() + "'";

            int status = config.ExecuteNonQueryWithQueryAsync(sqlqry).Result;
            if (status > 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Bill Deleted Successfully');", true);


                txtbillno.Text = "";
                txtclientid.Text = "";
                txtclientname.Text = "";

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Invalid Bill No');", true);

            }

        }

        protected int GetMonthBasedonSelection()
        {

            int Month = 0;
            if (ddlmonth.SelectedIndex == 1)
            {
                Month = GlobalData.Instance.GetIDForNextMonth();
            }
            else if (ddlmonth.SelectedIndex == 2)
            {
                Month = GlobalData.Instance.GetIDForThisMonth();
            }
            else if (ddlmonth.SelectedIndex == 3)
            {
                Month = GlobalData.Instance.GetIDForPrviousMonth();
            }
            else if (ddlmonth.SelectedIndex == 4)
            {
                Month = GlobalData.Instance.GetIDForPrviousoneMonth();
            }

            return Month;
        }

        protected void Btn_Genrate_Invoice_Click(object sender, EventArgs e)
        {
            try
            {

                #region  Begin  Validations as on [26-10-2013]
                if (ddlclientid.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Select Client Id ');", true);
                    return;
                }

                #region  Begin New code As on [10-03-2014]

                if (Chk_Month.Checked == true)
                {
                    if (txtmonth.Text.Trim().Length == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Enter Month for Bill ');", true);
                        return;
                    }
                    if (Timings.Instance.CheckEnteredDate(txtmonth.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid TO DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }
                else
                {
                    if (ddlmonth.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Select Month for Bill ');", true);

                        return;
                    }
                }
                #endregion  End Old Code As on [14-02-2014]

                if (txtfromdate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Please Fill The From Date  ');", true);
                    return;
                }
                else
                {
                    if (Timings.Instance.CheckEnteredDate(txtfromdate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid FROM DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }

                if (txttodate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Please Fill The To Date  ');", true);
                    return;
                }
                else
                {
                    if (Timings.Instance.CheckEnteredDate(txttodate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid TO DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }

                if (txtbilldate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Please Fill The Billdate  ');", true);
                    return;
                }
                else
                {
                    if (Timings.Instance.CheckEnteredDate(txtbilldate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid BILL DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }
                if (txtduedate.Text.Trim().Length > 0)
                {
                    if (Timings.Instance.CheckEnteredDate(txtbilldate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid DUE DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }


                #endregion End   Validations as on [26-10-2013]

                if (ddlType.SelectedIndex == 0)
                {

                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";
                    var bBillDates = 0;
                    var ServiceTaxType = false;
                    string SPName = "IMinvoiceformonth";

                    #region  Begin Get Contract Id Based on The Last Day


                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();
                        bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                        ServiceTaxType = bool.Parse(DTContractID.Rows[0]["ServiceTaxType"].ToString());
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                        return;
                    }



                    #endregion  End Get Contract Id Based on The Last Day

                    #region for GST State Checking

                    string Qry = "Select Cn.CGST,cn.SGST,Cn.IGST,S.GSTStateCode BillToStatecode,GM.GSTNo,GM.StateCode GMStatecode,GM.State GMStatename,S.State BillToStateName from clients C inner join GSTMaster GM on GM.ID=C.OurGSTIN left join States S on S.StateID=C.State left join Contracts Cn on Cn.ClientId=C.ClientId where C.ClientId='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(Qry).Result;
                    string BillToStatecode = "";
                    string GMStatecode = "";
                    string GMStatename = "";
                    string BillToStateName = "";
                    string GSTNo = "";
                    bool CGST = false;
                    bool SGST = false;
                    bool IGST = false;
                    if (dt.Rows.Count > 0)
                    {
                        BillToStatecode = dt.Rows[0]["BillToStatecode"].ToString();
                        GMStatecode = dt.Rows[0]["GMStatecode"].ToString();
                        GMStatename = dt.Rows[0]["GMStatename"].ToString();
                        BillToStateName = dt.Rows[0]["BillToStateName"].ToString();
                        GSTNo = dt.Rows[0]["GSTNo"].ToString();

                        CGST = bool.Parse(dt.Rows[0]["CGST"].ToString());
                        SGST = bool.Parse(dt.Rows[0]["SGST"].ToString());
                        IGST = bool.Parse(dt.Rows[0]["IGST"].ToString());

                        if (BillToStatecode != GMStatecode)
                        {
                            if (CGST == true)
                            {
                                lblResult.Text = "Please check GST option in Contracts.GST number is " + GSTNo + " GST State is " + GMStatename + " To state is " + BillToStateName;
                                return;
                            }

                        }
                        else if (BillToStatecode == GMStatecode)
                        {
                            if (IGST == true)
                            {
                                lblResult.Text = "Please check GST option in Contracts.GST number is " + GSTNo + " GST State is " + GMStatename + " To state is " + BillToStateName;
                                return;
                            }
                        }
                        else
                        {
                            lblResult.Text = "";
                        }
                    }

                    #endregion

                    #region Begin Variable Declarations as on [08-03-2014]


                    #region Begin Part One
                    var ClientId = "";
                    var month = 0;
                    var ContractId = "";
                    var LastDay = "";
                    var Fromdate = "";


                    #endregion End Part One

                    #region Begin  Part Two
                    var Todate = "";
                    var Duedate = "";
                    var BillDate = "";
                    var Gendays = 0;
                    var G_Sdays = 0;
                    // var  Staticdays=0;
                    #endregion End Part Two

                    #region Begin Part Three
                    var Extradatacheck = "0";
                    var Extradatastcheck = "0";
                    var MachinaryCost = "0";
                    var MaterialCost = "0";
                    var MaintenanceCost = "0";

                    var Extraamountone = "";
                    var Extraamounttwo = "";
                    var Discount = "";
                    var DiscountTwo = "";

                    #endregion End Part Three

                    #region Begin Part Four
                    var MaterialCostTitle = "";

                    var MachinaryCostTitle = "";
                    var MaintenanceCostTitle = "";
                    var ExtraamountoneTitle = "";
                    var ExtraamounttwoTitle = "";
                    var DiscountTitle = "";
                    var DiscountTwoTitle = "";
                    var BillNum = "";

                    //New Code as on 10/03/2014 by venkat

                    var STMachinary = 0;
                    var STMaterial = 0;
                    var STMaintenance = 0;
                    var STExtraone = 0;
                    var STExtratwo = 0;

                    var SCMachinary = 0;
                    var SCMaterial = 0;
                    var SCMaintenance = 0;
                    var SCExtraone = 0;
                    var SCExtratwo = 0;

                    var STDiscountone = 0;
                    var STDiscounttwo = 0;

                    #endregion End Part Four



                    #endregion End Variable Declarations as on [08-03-2014]

                    #region Begin Assign Values To The Variables as on [08-03-2014]
                    #region Begin Part One
                    ClientId = ddlclientid.SelectedValue;
                    // month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                    month = GetMonthBasedOnSelectionDateorMonth();
                    LastDay = DtLastDay.ToString();
                    ContractId = ContractID;
                    Fromdate = Timings.Instance.CheckDateFormat(txtfromdate.Text); ;
                    #endregion End Part One

                    #region Begin  Part Two

                    Todate = Timings.Instance.CheckDateFormat(txttodate.Text); ;
                    Duedate = Timings.Instance.CheckDateFormat(txtduedate.Text); ;
                    BillDate = Timings.Instance.CheckDateFormat(txtbilldate.Text); ;
                    if (Chk_Month.Checked == false)
                    {
                        Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bBillDates);
                    }

                    //New Code when select month in Textbox
                    if (Chk_Month.Checked == true)
                    {
                        DateTime mGendays = DateTime.Now;
                        DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        mGendays = DateTime.Parse(date.ToString());
                        Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bBillDates);
                    }
                    G_Sdays = Timings.Instance.Get_GS_Days(month, Gendays);
                    //Staticdays = "";

                    string qry = "delete from unitbillbreakup where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and Extra like 'E%'";
                    int deletestatus = SqlHelper.Instance.ExecuteDMLQry(qry);
                    int k = 0;
                    string Extra = "";
                    Hashtable htnew = new Hashtable();
                    int statusn = 0;
                    int m = 0;
                    foreach (GridViewRow GvRow in gvClientBilling.Rows)
                    {

                        string spname = "";
                        htnew.Clear();


                        string SerialNo = "select max(isnull(sino,0)) as sno from unitbillbreakup where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'";
                        DataTable dtSerial = SqlHelper.Instance.GetTableByQuery(SerialNo);

                        int SerialNumber = 1;

                        if (dtSerial.Rows.Count > 0)
                        {
                            SerialNumber = Int32.Parse(dtSerial.Rows[0]["sno"].ToString()) + 1;
                        }

                        //string sno = ((Label)GvRow.FindControl("lblSno")).Text;
                        string Desgn = ((TextBox)GvRow.FindControl("lbldesgn")).Text;
                        string NoOfEmps = ((TextBox)GvRow.FindControl("lblnoofemployees")).Text;
                        string NoOfDuties = ((TextBox)GvRow.FindControl("lblNoOfDuties")).Text;
                        string Payrate = ((TextBox)GvRow.FindControl("lblpayrate")).Text; //lblda
                        string DutiesAmount = ((TextBox)GvRow.FindControl("lblda")).Text;
                        string Total = ((TextBox)GvRow.FindControl("lblAmount")).Text;
                        string HSNNumber = ((TextBox)GvRow.FindControl("txtHSNNumber")).Text;
                        string noofdays = ((DropDownList)GvRow.FindControl("ddlnod")).SelectedValue;
                        if (((CheckBox)GvRow.FindControl("chkExtra")).Checked)
                        {
                            Extra = "E";
                        }
                        string designid = ((Label)GvRow.FindControl("lbldesignid")).Text;

                        float ToatlAmount = 0;
                        float basicda = 0;
                        ToatlAmount = (Total.Trim().Length != 0) ? float.Parse(Total) : 0;
                        basicda = (DutiesAmount.Trim().Length != 0) ? float.Parse(DutiesAmount) : 0;


                        string Ex = "E" + m;

                        if (Desgn.Length > 0 && Extra != "")
                        {
                            spname = "ExtraDataBilling";
                            htnew.Add("@clientid", ddlclientid.SelectedValue);
                            htnew.Add("@month", month);
                            htnew.Add("@contractid", ContractId);
                            htnew.Add("@remarks", Desgn);
                            htnew.Add("@Duties", NoOfDuties);
                            htnew.Add("@Noofemps", NoOfEmps);
                            htnew.Add("@Payrate", Payrate);
                            htnew.Add("@DutiesAmount", DutiesAmount);
                            htnew.Add("@Gendays", Gendays);
                            htnew.Add("@Extra", Ex);
                            htnew.Add("@sno", SerialNumber);
                            htnew.Add("@HSNNumber", HSNNumber);
                            htnew.Add("@NoofDays", noofdays);

                            statusn = SqlHelper.Instance.ExecuteQuery(spname, htnew);

                        }

                        m++;
                    }

                    #endregion End Part Two

                    #region Begin Part Three

                    if (checkExtraData.Checked)
                    {
                        Extradatacheck = "1";
                    }
                    if (Extradatacheck == "1")
                    {
                        if (txtMachinery.Text.Trim().Length > 0)
                        {
                            MachinaryCost = txtMachinery.Text;
                        }
                        if (txtMaterial.Text.Trim().Length > 0)
                        {
                            MaterialCost = txtMaterial.Text;
                        }
                        if (txtElectical.Text.Trim().Length > 0)
                        {
                            MaintenanceCost = txtElectical.Text;
                        }
                        if (txtextraonevalue.Text.Trim().Length > 0)
                        {
                            Extraamountone = txtextraonevalue.Text;
                        }
                        if (txtextratwovalue.Text.Trim().Length > 0)
                        {
                            Extraamounttwo = txtextratwovalue.Text;
                        }
                        if (txtDiscounts.Text.Trim().Length > 0)
                        {
                            Discount = txtDiscounts.Text;
                        }
                        if (txtdiscounttwovalue.Text.Trim().Length > 0)
                        {
                            DiscountTwo = txtdiscounttwovalue.Text;
                        }
                    }
                    #endregion End Part Three

                    #region Begin Part Four
                    if (Extradatacheck == "1")
                    {
                        MaterialCostTitle = txtMaterialcost.Text;
                        MachinaryCostTitle = txtmachinarycost.Text;
                        MaintenanceCostTitle = txtMaintanancecost.Text;
                        ExtraamountoneTitle = txtextraonetitle.Text;
                        ExtraamounttwoTitle = txtextratwotitle.Text;
                        DiscountTitle = txtdiscount.Text;
                        DiscountTwoTitle = txtdiscounttwotitle.Text;
                    }
                    BillNum = BillnoAutoGenrate(ServiceTaxType, ClientId, month);
                    #endregion End Part Three

                    #region New Code for Service tax for extra data check value on 01/04/2014

                    if (Extradatacheck == "1")
                    {

                        if (chkSTYesMachinary.Checked == true)
                        {
                            STMachinary = 1;
                        }
                        if (chkSTYesMaterial.Checked == true)
                        {
                            STMaterial = 1;
                        }
                        if (chkSTYesElectrical.Checked == true)
                        {
                            STMaintenance = 1;
                        }
                        if (chkSTYesExtraone.Checked == true)
                        {
                            STExtraone = 1;
                        }
                        if (chkSTYesExtratwo.Checked == true)
                        {
                            STExtratwo = 1;
                        }


                        if (chkSCYesMachinary.Checked == true)
                        {
                            SCMachinary = 1;
                        }
                        if (chkSCYesMaterial.Checked == true)
                        {
                            SCMaterial = 1;
                        }
                        if (chkSCYesElectrical.Checked == true)
                        {
                            SCMaintenance = 1;
                        }
                        if (chkSCYesExtraone.Checked == true)
                        {
                            SCExtraone = 1;
                        }
                        if (chkSCYesExtratwo.Checked == true)
                        {
                            SCExtratwo = 1;
                        }


                        if (chkSTDiscountone.Checked == true)
                        {
                            STDiscountone = 1;
                        }
                        if (chkSTDiscounttwo.Checked == true)
                        {
                            STDiscounttwo = 1;
                        }
                    }
                    #endregion


                    #endregion End Assign Values To The Variables as on [08-03-2014]

                    #region for insertion into empbillsheet

                    string chkpdfsquery = "select pdfs,WageType  from Contracts where clientid='" + ddlclientid.SelectedValue + "'";
                    DataTable dtchkpdfs = config.ExecuteAdaptorAsyncWithQueryParams(chkpdfsquery).Result;
                    string chkpdf = "False";
                    int Wagetype = 0;
                    if (dtchkpdfs.Rows.Count > 0)
                        chkpdf = dtchkpdfs.Rows[0]["pdfs"].ToString();
                    Wagetype = int.Parse(dtchkpdfs.Rows[0]["WageType"].ToString());

                    if (chkpdf == "True
                    {

                        #region  Begin Code For Variable Declarations as on [18-03-2014]
                        var ClientID = "";
                        var SPName1 = string.Empty;
                        DataTable DtEmpBillpaysheet = null;
                        Hashtable HTEmpBillpaysheet = new Hashtable();
                        if (Wagetype == 3)
                        {
                            SPName1 = "IMGenratePaysheet";
                        }
                        else
                        {
                            SPName1 = "IMGenratePaysheet";

                        }
                        #endregion End Code For Variable Declarations    as on [18-03-2014]



                        #region  Begin Code For Assign Values To the  Variable  as on [18-03-2014]
                        ClientID = ddlclientid.SelectedValue;
                        month = GetMonthBasedOnSelectionDateorMonth();
                        if (Chk_Month.Checked == false)
                        {
                            Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bBillDates);
                        }

                        //New Code when select month in Textbox
                        if (Chk_Month.Checked == true)
                        {
                            DateTime mGendays = DateTime.Now;
                            DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                            mGendays = DateTime.Parse(date.ToString());
                            Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bBillDates);
                        }
                        G_Sdays = Timings.Instance.Get_GS_Days(month, Gendays);
                        HTEmpBillpaysheet.Add("@Gendays", Gendays);
                        HTEmpBillpaysheet.Add("@G_Sdays", G_Sdays);
                        HTEmpBillpaysheet.Add("@clientid", ddlclientid.SelectedValue);
                        HTEmpBillpaysheet.Add("@month", month);
                        HTEmpBillpaysheet.Add("@lastday", DtLastDay);
                        HTEmpBillpaysheet.Add("@Type", 1);
                        #endregion End Code For  Assign Values To the Variable  as on [18-03-2014]

                        #region Begin Code For Calling Stored procedure as on [18-03-2014]
                        DtEmpBillpaysheet = config.ExecuteAdaptorAsyncWithParams(SPName1, HTEmpBillpaysheet).Result;
                        #endregion  end Code For Calling Stored procedure as on [18-03-2014]


                    }

                    #endregion for insertion into empbillsheet

                    #region Begin Code For Define & Assign Values To The Hash Table as on [08-03-2014]
                    Hashtable HTIMInvoice = new Hashtable();

                    #region Begin Part One

                    HTIMInvoice.Add("@ClientId", ClientId);
                    HTIMInvoice.Add("@month", month);
                    HTIMInvoice.Add("@ContractId", ContractId);
                    HTIMInvoice.Add("@LastDay", DtLastDay);
                    HTIMInvoice.Add("@Fromdate", Fromdate);

                    #endregion End Part One

                    #region Begin  Part Two
                    HTIMInvoice.Add("@Todate", Todate);
                    HTIMInvoice.Add("@Duedate", Duedate);
                    HTIMInvoice.Add("@BillDate", BillDate);
                    HTIMInvoice.Add("@Gendays", Gendays);
                    HTIMInvoice.Add("@G_Sdays", G_Sdays);
                    #endregion End Part Two

                    #region Begin Part Three

                    HTIMInvoice.Add("@Extradatacheck", Extradatacheck);
                    HTIMInvoice.Add("@Extradatastcheck", Extradatastcheck);
                    HTIMInvoice.Add("@MaterialCost", MaterialCost);
                    HTIMInvoice.Add("@MaintenanceCost", MaintenanceCost);
                    HTIMInvoice.Add("@MachinaryCost", MachinaryCost);

                    HTIMInvoice.Add("@Extraamountone", Extraamountone);
                    HTIMInvoice.Add("@Extraamounttwo", Extraamounttwo);
                    HTIMInvoice.Add("@Discount", Discount);
                    HTIMInvoice.Add("@DiscountTwo", DiscountTwo);


                    #endregion End Part Three

                    #region Begin Part Four

                    HTIMInvoice.Add("@MaterialCostTitle", MaterialCostTitle);
                    HTIMInvoice.Add("@MachinaryCostTitle", MachinaryCostTitle);
                    HTIMInvoice.Add("@MaintenanceCostTitle", MaintenanceCostTitle);
                    HTIMInvoice.Add("@ExtraamountoneTitle", ExtraamountoneTitle);
                    HTIMInvoice.Add("@ExtraamounttwoTitle", ExtraamounttwoTitle);
                    HTIMInvoice.Add("@DiscountTitle", DiscountTitle);

                    HTIMInvoice.Add("@DiscountTwoTitle", DiscountTwoTitle);
                    HTIMInvoice.Add("@BillNum", BillNum);
                    #endregion End Part Four

                    #region Begin Part Five on 10/03/2014

                    HTIMInvoice.Add("@STMachinary", STMachinary);
                    HTIMInvoice.Add("@STMaterial", STMaterial);
                    HTIMInvoice.Add("@STMaintenance", STMaintenance);
                    HTIMInvoice.Add("@STExtraone", STExtraone);
                    HTIMInvoice.Add("@STExtratwo", STExtratwo);



                    HTIMInvoice.Add("@SCMachinary", SCMachinary);
                    HTIMInvoice.Add("@SCMaterial", SCMaterial);
                    HTIMInvoice.Add("@SCMaintenance", SCMaintenance);
                    HTIMInvoice.Add("@SCExtraone", SCExtraone);
                    HTIMInvoice.Add("@SCExtratwo", SCExtratwo);

                    HTIMInvoice.Add("@STDiscountone", STDiscountone);
                    HTIMInvoice.Add("@STDiscounttwo", STDiscounttwo);

                    var remarkText = txtRemarks.Text;

                    HTIMInvoice.Add("@Remarks", remarkText);
                    HTIMInvoice.Add("@Created_By", Username);

                    #endregion

                    #endregion Begin Code For Define & Assign Values To The Hash Table as on [08-03-2014]

                    #region Begin Code For Calling Stored Procedure As on [08-05-2014]
                    DataTable DtIMInvoice = config.ExecuteAdaptorAsyncWithParams(SPName, HTIMInvoice).Result;
                    DisplayDataInGrid();
                    #endregion End Code For Calling Stored Procedure As on [08-05-2014]

                    //bool SelectAll = false;
                    //if (chkalllist.Checked == true)
                    //    SelectAll = true;
                    //bool excludeList = false;
                    //if (chkexcludelist.Checked == true)
                    //    excludeList = true;
                    //string BillType = "Normal";
                    //month = GetMonthBasedOnSelectionDateorMonth();
                    //LoadClientIDBasedonMonth(month, BillType, SelectAll, excludeList);

                }
                else
                {
                    ManualBillGenerateMethod();
                    // EnabledFields();
                    // ClearExtraDataForBilling();
                    //bool SelectAll = false;
                    //if (chkalllist.Checked == true)
                    //    SelectAll = true;
                    //bool excludeList = false;
                    //if (chkexcludelist.Checked == true)
                    //    excludeList = true;
                    //string BillType = "Manual";
                    //int month = GetMonthBasedOnSelectionDateorMonth();
                    //LoadClientIDBasedonMonth(month, BillType, SelectAll, excludeList);

                }


                // EnabledFields();


            }
            catch (Exception ex)
            {

            }
        }

        private string BillnoAutoGenrate(bool StType, string unitId, int month)
        {
            string billno = "0001";
            string ContractID = "";

            DateTime DtLastDay = DateTime.Now;
            if (Chk_Month.Checked == false)
            {
                DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
            }
            if (Chk_Month.Checked == true)
            {
                DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
            }

            Hashtable HtGetContractID = new Hashtable();
            var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
            HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
            HtGetContractID.Add("@LastDay", DtLastDay);
            DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

            if (DTContractID.Rows.Count > 0)
            {
                ContractID = DTContractID.Rows[0]["contractid"].ToString();
            }



            string selquery = "select GST.BillPrefix from Clients C inner join GSTMaster GST on GST.Id=c.OurGSTIN where clientid='" + ddlclientid.SelectedValue + "'";
            DataTable seldt = config.ExecuteAdaptorAsyncWithQueryParams(selquery).Result;

            string Typeofwork = "T";

            if (seldt.Rows.Count > 0)
            {
                Typeofwork = seldt.Rows[0]["BillPrefix"].ToString();
            }


            if (ddlType.SelectedIndex == 0)
            {
                #region for Normal Billing
                string strQry = "Select BillNo from UnitBill where UnitId='" + unitId + "' And Month=" + month;
                DataTable noTable = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                if (noTable.Rows.Count > 0)
                {
                    if (noTable.Rows[0]["billno"].ToString().Length > 0)
                    {
                        billno = noTable.Rows[0]["billno"].ToString();
                    }
                }
                else
                {

                    string selectqueryclientid = "";
                    string selectqueryclientidMB = "";


                    if (StType)
                    {
                        string Type = GlobalData.Instance.GetType(ddlclientid.SelectedValue);
                        string billPrefix = "";
                        string billStartNo = GlobalData.Instance.GetBillStartingNo(false);
                        string billSeq = GlobalData.Instance.GetBillSequence();
                        billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + billStartNo;

                        int startingNumberPart = billno.Length - 5 + 1;


                        selectqueryclientid = "select MAX( RIGHT(billno,4)) as billno from unitbill where billno like '"
                        + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";

                        DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientid).Result;
                        int BILLNO = 0;
                        int BILLNOMB = 0;
                        if (dt.Rows.Count > 0)
                        {
                            if (String.IsNullOrEmpty(dt.Rows[0]["billno"].ToString()) == false)
                                BILLNO = int.Parse(dt.Rows[0]["billno"].ToString());
                        }


                        selectqueryclientidMB = "select MAX( RIGHT(billno,4)) as billno from Munitbill where billno like '"
                         + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";


                        DataTable dtMB = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientidMB).Result;

                        if (dtMB.Rows.Count > 0)
                        {

                            if (String.IsNullOrEmpty(dtMB.Rows[0]["billno"].ToString()) == false)
                                BILLNOMB = int.Parse(dtMB.Rows[0]["billno"].ToString());
                        }

                        if (BILLNO > BILLNOMB)
                        {
                            billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNO) + 1).ToString("0000");
                        }
                        else
                        {
                            billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNOMB) + 1).ToString("0000");
                        }

                    }
                    else
                    {
                        string Type = GlobalData.Instance.GetType(ddlclientid.SelectedValue);
                        string billPrefix = "";
                        string billStartNo = GlobalData.Instance.GetBillStartingNo(true);
                        string billSeq = GlobalData.Instance.GetBillSequence();
                        billno = billPrefix + "/" + Typeofwork + "/" + billSeq + "/" + billStartNo;
                        int startingNumberPart = billno.Length - 5 + 1;

                        selectqueryclientid = "select MAX( RIGHT(billno,4)) as billno from unitbill where billno like '"
                        + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";


                        DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientid).Result;
                        int BILLNO = 0;
                        int BILLNOMB = 0;
                        if (dt.Rows.Count > 0)
                        {
                            if (String.IsNullOrEmpty(dt.Rows[0]["billno"].ToString()) == false)
                                BILLNO = int.Parse(dt.Rows[0]["billno"].ToString());
                        }

                        selectqueryclientidMB = "select MAX( RIGHT(billno,4)) as billno from Munitbill where billno like '"
                        + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";

                        DataTable dtMB = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientidMB).Result;

                        if (dtMB.Rows.Count > 0)
                        {

                            if (String.IsNullOrEmpty(dtMB.Rows[0]["billno"].ToString()) == false)
                                BILLNOMB = int.Parse(dtMB.Rows[0]["billno"].ToString());
                        }

                        if (BILLNO > BILLNOMB)
                        {
                            billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNO) + 1).ToString("0000");
                        }
                        else
                        {
                            billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNOMB) + 1).ToString("0000");
                        }

                    }
                }
                return billno;
                #endregion
            }
            else
            {
                #region for Manual / Arrear Billing

                if (StType)
                {
                    string Type = GlobalData.Instance.GetType(ddlclientid.SelectedValue);
                    string billPrefix = "";
                    string billStartNo = GlobalData.Instance.GetBillStartingNo(false);
                    string billSeq = GlobalData.Instance.GetBillSequence();
                    billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + billStartNo;


                    int startingNumberPart = billno.Length - 5 + 1;

                    string selectqueryclientid = "select MAX( RIGHT(billno,4)) as billno from unitbill where billno like '"
                     + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";

                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientid).Result;
                    int BILLNO = 0;
                    int BILLNOMB = 0;
                    if (dt.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(dt.Rows[0]["billno"].ToString()) == false)
                            BILLNO = int.Parse(dt.Rows[0]["billno"].ToString());
                    }

                    string selectqueryclientidMB = "select MAX( RIGHT(billno,4)) as billno from Munitbill where billno like '"
                     + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";

                    DataTable dtMB = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientidMB).Result;

                    if (dtMB.Rows.Count > 0)
                    {

                        if (String.IsNullOrEmpty(dtMB.Rows[0]["billno"].ToString()) == false)
                            BILLNOMB = int.Parse(dtMB.Rows[0]["billno"].ToString());
                    }

                    if (BILLNO > BILLNOMB)
                    {
                        billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNO) + 1).ToString("0000");
                    }
                    else
                    {
                        billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNOMB) + 1).ToString("0000");
                    }

                }
                else
                {
                    string Type = GlobalData.Instance.GetType(ddlclientid.SelectedValue);
                    string billPrefix = "";
                    string billStartNo = GlobalData.Instance.GetBillStartingNo(false);
                    string billSeq = GlobalData.Instance.GetBillSequence();
                    billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + billStartNo;
                    int startingNumberPart = billno.Length - 5 + 1;

                    string selectqueryclientid = "select MAX( RIGHT(billno,4)) as billno from unitbill where billno like '"
                      + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";
                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientid).Result;
                    int BILLNO = 0;
                    int BILLNOMB = 0;
                    if (dt.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(dt.Rows[0]["billno"].ToString()) == false)
                            BILLNO = int.Parse(dt.Rows[0]["billno"].ToString());
                    }

                    string selectqueryclientidMB = "select MAX( RIGHT(billno,4)) as billno from Munitbill where billno like '"
                     + billPrefix + "" + Typeofwork + "/" + billSeq + "%'";
                    DataTable dtMB = config.ExecuteAdaptorAsyncWithQueryParams(selectqueryclientidMB).Result;

                    if (dtMB.Rows.Count > 0)
                    {

                        if (String.IsNullOrEmpty(dtMB.Rows[0]["billno"].ToString()) == false)
                            BILLNOMB = int.Parse(dtMB.Rows[0]["billno"].ToString());
                    }

                    if (BILLNO > BILLNOMB)
                    {
                        billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNO) + 1).ToString("0000");
                    }
                    else
                    {
                        billno = billPrefix + "" + Typeofwork + "/" + billSeq + "/" + (Convert.ToInt32(BILLNOMB) + 1).ToString("0000");
                    }

                }



                return billno;

                #endregion for Manual / Arrear Billing
            }
        }

        protected void FillMonthDetails()
        {

            if (Chk_Month.Checked == true)
            {
                if (txtmonth.Text.Trim().Length == 0)
                {
                    return;
                }
                if (Timings.Instance.CheckEnteredDate(txtmonth.Text) == 1)
                {
                    return;
                }
            }
            else
            {
                if (ddlmonth.SelectedIndex == 0)
                {
                    return;
                }
            }
            DateTime DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
            var ContractID = "";
            var bBillDates = 0;
            var ServiceTaxType = false;
            #region  Begin Get Contract Id Based on The Last Day


            Hashtable HtGetContractID = new Hashtable();
            var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
            HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
            HtGetContractID.Add("@LastDay", DtLastDay);
            DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

            if (DTContractID.Rows.Count > 0)
            {
                ContractID = DTContractID.Rows[0]["contractid"].ToString();
                bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                ServiceTaxType = bool.Parse(DTContractID.Rows[0]["ServiceTaxType"].ToString());

                string ContractStartDate = DTContractID.Rows[0]["ContractStartDate"].ToString();
                string ContractEndDate = DTContractID.Rows[0]["ContractEndDate"].ToString();
                string strBillDates = DTContractID.Rows[0]["BillDates"].ToString();

                DateTime CSdate = DateTime.Parse(ContractStartDate);
                DateTime CurrentDate = DateTime.Now.Date;
                DateTime lastDay = DateTime.Now.Date;
                int monval = GetMonthBasedOnSelectionDateorMonth();
                string mntchk = "0";
                if (monval.ToString().Length == 3)
                {
                    mntchk = monval.ToString().Substring(0, 1);

                }
                else if (monval.ToString().Length == 4)
                {
                    mntchk = monval.ToString().Substring(0, 2);

                }
                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex == 1)
                    {
                        CurrentDate = CurrentDate.AddMonths(0);
                        lastDay = Timings.Instance.GetLastDayOfThisMonth();
                        txtyear.Text = GetMonthOfYear();
                    }
                    else if (ddlmonth.SelectedIndex == 2)
                    {
                        txtyear.Text = GetMonthOfYear();

                        if (CurrentDate.Month == 1)
                        {
                            CurrentDate = CurrentDate.AddMonths(11);
                            CurrentDate = CurrentDate.AddYears(-1);

                        }
                        else
                        {
                            CurrentDate = CurrentDate.AddMonths(-1);
                        }

                        lastDay = Timings.Instance.GetLastDayOfPreviousMonth();
                    }
                    else if (ddlmonth.SelectedIndex == 3)
                    {
                        txtyear.Text = GetMonthOfYear();
                        if (CurrentDate.Month == 2)
                        {
                            CurrentDate = CurrentDate.AddMonths(10);
                            CurrentDate = CurrentDate.AddYears(-1);
                        }
                        else
                        {
                            CurrentDate = CurrentDate.AddMonths(-2);
                        }

                        lastDay = Timings.Instance.GetLastDayOfPreviousOneMonth();
                    }
                    else if (ddlmonth.SelectedIndex == 4)
                    {
                        txtyear.Text = GetMonthOfYear();
                        if (CurrentDate.Month == 3)
                        {
                            CurrentDate = CurrentDate.AddMonths(9);
                            CurrentDate = CurrentDate.AddYears(-1);
                        }
                        else
                        {
                            CurrentDate = CurrentDate.AddMonths(-3);
                        }
                        lastDay = Timings.Instance.GetLastDayOfPreviousTwoMonth();
                    }
                }

                #region  Begin Old Code As on [02-03-2014]


                if (Chk_Month.Checked == true)
                {
                    DateTime sdate = DateTime.Now.Date;
                    int month = 0;
                    int year = 0;


                    if (txtmonth.Text.Trim().Length > 0)
                    {
                        sdate = DateTime.Parse(txtmonth.Text.Trim(), CultureInfo.GetCultureInfo("en-gb"));
                    }

                    month = sdate.Month;
                    year = sdate.Year;
                    DateTime finalday = new DateTime(sdate.Year, sdate.Month, DateTime.DaysInMonth(sdate.Year, sdate.Month));

                    CurrentDate = sdate;
                    lastDay = finalday;
                    txtyear.Text = year.ToString();
                }



                DateTime CEdate = DateTime.Parse(ContractEndDate);
                if (CSdate <= lastDay)
                {
                    if (bBillDates == 1)
                    {

                        if (CurrentDate.Month == 2 && (CSdate.Day > 28 || CSdate.Day > 29))
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month, 28).ToString("dd/MM/yyyy"));
                        }
                        if (CurrentDate.Month == 1)
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year, 12, CSdate.Day).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, CSdate.Day).ToString("dd/MM/yyyy"));

                        }
                        DateTime tempDate = CurrentDate.AddMonths(1);

                        if (CSdate.Day == 1)
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day).ToString("dd/MM/yyyy"));
                        }
                        else
                            if (CurrentDate.Month == 1)
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, 1, CSdate.Day - 1).ToString("dd/MM/yyyy"));
                        }
                        else
                                if (tempDate.Month == 1)
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, 12, CSdate.Day - 1).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month - 1, CSdate.Day - 1).ToString("dd/MM/yyyy"));
                        }

                    }
                    if (bBillDates == 0)
                    {
                        txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, 1).ToString("dd/MM/yyyy"));

                        if (CSdate.Day == 1)
                        {
                            txttodate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month)).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            txttodate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month)).ToString("dd/MM/yyyy"));

                        }
                    }



                    if (bBillDates == 2)
                    {
                        if (CurrentDate.Month == 1)
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year - 1, 12, 26).ToString("dd/MM/yyyy"));
                        }
                        else

                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, 26).ToString("dd/MM/yyyy"));

                        DateTime tempDate = CurrentDate.AddMonths(1);

                        if (mntchk == "12")
                        {
                            tempDate = CurrentDate;
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month, 25).ToString("dd/MM/yyyy"));

                        }
                        else
                        {
                            if (tempDate.Month == 1)
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, 12, 25).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month - 1, 25).ToString("dd/MM/yyyy"));
                            }
                        }

                    }


                    if (bBillDates == 3)
                    {
                        if (CurrentDate.Month == 1)
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year - 1, 12, 21).ToString("dd/MM/yyyy"));
                        }
                        else

                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, 21).ToString("dd/MM/yyyy"));
                        DateTime tempDate = CurrentDate.AddMonths(1);

                        if (mntchk == "12")
                        {
                            tempDate = CurrentDate;
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month, 20).ToString("dd/MM/yyyy"));

                        }
                        else
                        {
                            if (tempDate.Month == 1)
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, 12, 20).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month - 1, 20).ToString("dd/MM/yyyy"));
                            }
                        }

                    }



                    //if (CurrentDate.Month/* - 1*/ == CSdate.Month && CurrentDate.Year == CSdate.Year)
                    //{
                    //    DateTime date = new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, CSdate.Day);
                    //    txtfromdate.Text = date.ToString("dd/MM/yyyy");
                    //}
                    if (CurrentDate.Month/* - 1*/ == CEdate.Month && CurrentDate.Year == CEdate.Year)
                    {
                        DateTime date = DateTime.Now.Date;
                        if (CSdate.Day == 1)
                        {
                            date = new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, CEdate.Day);
                        }
                        else
                        {
                            date = new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, CEdate.Day - 1);

                        }

                        txttodate.Text = date.ToString("dd/MM/yyyy");
                    }
                    btngenratepayment.Enabled = true;
                }
                else
                {
                    btngenratepayment.Enabled = false;
                    //LblResult.Text = "There Is No Valid Contract for this month";
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There Is No Valid Contract for this month ');", true);

                }


                #endregion End Old Code As on [02-03-2014]


            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                return;
            }

            #endregion  End Get Contract Id Based on The Last Day
        }

        protected void btndownloadpdffile_Click(object sender, EventArgs e)
        {
            //if (ddlpaymenttype.SelectedIndex == 0)
            //{
            btnmhb_Click(sender, e);
            return;
            //}

            //if (ddlpaymenttype.SelectedIndex == 1)
            //{
            //    btnall_Click(sender, e);
            //    return;
            //}





        }

        protected void btnmhb_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    PageEventHelper pageEventHelper = new PageEventHelper();
                    writer.PageEvent = pageEventHelper;
                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";
                    DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";


                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                    }
                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/BillLogo.png");
                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(70f);
                        gif2.SetAbsolutePosition(34f, 755f);
                        //document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 350f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);


                    //tablelogo.AddCell(celll);
                    PdfPCell CCompName = new PdfPCell(new Paragraph(companyName, FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.Border = 0;
                    CCompName.Colspan = 2;
                    CCompName.PaddingTop = -20;
                    tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.Border = 0;
                    CCompAddress.Colspan = 2;
                    tablelogo.AddCell(CCompAddress);

                    PdfPCell cellline = new PdfPCell(new Paragraph(companyaddressline, FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellline.Border = 0;
                    cellline.Colspan = 2;
                    tablelogo.AddCell(cellline);
                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;
                    tablelogo.AddCell(celll);
                    //tablelogo.AddCell(celll);

                    // tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("INVOICE", FontFactory.GetFont(FontStyle, 18, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.PaddingTop = 30;
                    CInvoice.Border = 0;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);

                    PdfPTable address = new PdfPTable(2);
                    address.TotalWidth = 500f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(1);
                    tempTable1.TotalWidth = 250f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 1f };
                    tempTable1.SetWidths(tempWidth1);

                    string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;

                    string Unitbillbreakup = "select sum(isnull(BasicDA,0)) as BasicDA ,sum(isnull(Basic,0)) as Basic,sum(isnull(Da,0)) as DA,sum(isnull(HRA,0)) as HRA,sum(isnull(Conveyance,0)) as Conveyance,sum(isnull(WashAllowance,0)) as WashAllowance, " +
                                                "sum(isnull(OtherAllowance,0)) as OtherAllowance,sum(isnull(ServiceCharges,0)) as ServiceCharges,sum(isnull(bonus,0)) as bonus,sum(isnull(AttendanceAllowance,0)) as AttendanceAllowance,sum(isnull(Arrears,0)) as Arrears, " +
                                                "sum(isnull(ESITotal,0)) as ESITotal,sum(isnull(Encashamt,0)) as Encashamt,sum(PF) as PF,sum(ESI) as ESI from UnitBillBreakup where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtUnitbillbreakup = config.ExecuteAdaptorAsyncWithQueryParams(Unitbillbreakup).Result;

                    float totalbasic = 0;
                    float totalhra = 0;
                    float totalconveyance = 0;
                    float totalotherallowance = 0;
                    float AttendanceAllowance = 0;
                    float TotalWashingAllowance = 0;
                    float Totalbonus = 0;
                    float TotalEnchashement = 0;
                    float BillTotal = 0;
                    float esitotal = 0;
                    float esiempr = 0;
                    float pfempr = 0;
                    float managementfee = 0;
                    float Arrears = 0;

                    if (DtUnitbillbreakup.Rows.Count > 0)
                    {
                        totalbasic = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Basic"].ToString());
                        totalhra = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["HRA"].ToString());
                        totalconveyance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Conveyance"].ToString());
                        totalotherallowance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["OtherAllowance"].ToString());
                        AttendanceAllowance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["AttendanceAllowance"].ToString());
                        TotalWashingAllowance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["WashAllowance"].ToString());
                        Totalbonus = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["bonus"].ToString());
                        TotalEnchashement = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Encashamt"].ToString());
                        BillTotal = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["BasicDA"].ToString());
                        esitotal = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["ESITotal"].ToString());
                        esiempr = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["PF"].ToString());
                        pfempr = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["ESI"].ToString());
                        managementfee = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["ServiceCharges"].ToString());
                        Arrears = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Arrears"].ToString());

                    }


                    string SelectBillNo = "Select * from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                    string BillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }



                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell11.Border = 0;
                    tempTable1.AddCell(cell11);
                    string addressData = "";

                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //clientaddrhno.Colspan = 0;
                        clientaddrhno.Border = 0;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 2;
                        clientcolony.Border = 0;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 2;
                        clientcity.Border = 0;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 2;
                        clientstate.Border = 0;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 2;
                        clietnpin.Border = 0;
                        tempTable1.AddCell(clietnpin);
                    }
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(1);
                    tempTable2.TotalWidth = 250f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f };
                    tempTable2.SetWidths(tempWidth2);

                    //Blank Field for Space
                    PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell12.Border = 0;
                    tempTable2.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No: " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell13.Border = 0;
                    tempTable2.AddCell(cell13);

                    PdfPCell cell14 = new PdfPCell(new Paragraph("Date: " + BillDate.Day.ToString("00") + "/" + BillDate.Month.ToString("00") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell14.Border = 0;
                    tempTable2.AddCell(cell14);

                    //PdfPCell cell15 = new PdfPCell(new Paragraph("Due Date: " + DueDate.Day.ToString("00") + "/" + DueDate.Month.ToString("00") + "/" +
                    //DueDate.Year, FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    // tempTable2.AddCell(cell15);


                    //PdfPCell cell15 = new PdfPCell(new Paragraph("For Month: " + GetMonthName() + " - " + GetMonthOfYear() +
                    //    "      ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    //tempTable2.AddCell(cell15);

                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    address.AddCell(celll);


                    document.Add(address);

                    PdfPTable bodytablelogo = new PdfPTable(2);
                    bodytablelogo.TotalWidth = 500f;//600f
                    bodytablelogo.LockedWidth = true;
                    float[] widthlogo = new float[] { 2f, 2f };
                    bodytablelogo.SetWidths(widthlogo);


                    //PdfPCell cell9 = new PdfPCell(new Phrase("Unit Name : " + dtclientaddress.Rows[0]["clientname"].ToString(),
                    //    FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    //cell9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell9.Colspan = 2;
                    //cell9.Border = 0;
                    //bodytablelogo.AddCell(cell9);

                    //string Fromdate = txtfromdate.Text;
                    //string Todate = txttodate.Text;

                    //PdfPCell cell10 = new PdfPCell(new Phrase("Bill From : " + Fromdate + "  to  " +
                    //    Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell10.Colspan = 2;
                    //cell10.Border = 0;
                    //bodytablelogo.AddCell(cell10);
                    //bodytablelogo.AddCell(celll);

                    //PdfPCell cell19 = new PdfPCell(new Phrase("Dear Sir, ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell19.Colspan = 2;
                    //cell19.Border = 0;
                    //bodytablelogo.AddCell(cell19);
                    //bodytablelogo.AddCell(celll);

                    //PdfPCell cell20 = new PdfPCell(new Phrase(strDescription, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell20.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell20.Colspan = 2;
                    //cell20.Border = 0;
                    //bodytablelogo.AddCell(cell20);
                    //bodytablelogo.AddCell(celll);
                    //PdfPCell cell21 = new PdfPCell(new Phrase("The Details are given below: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell21.Colspan = 1;
                    //cell21.Border = 0;
                    //bodytablelogo.AddCell(cell21);
                    //bodytablelogo.AddCell(celll);
                    ////bodytablelogo.AddCell(celll);
                    //document.Add(bodytablelogo);


                    PdfPTable tabled = new PdfPTable(3);
                    tabled.TotalWidth = 500f;//600f
                    tabled.LockedWidth = true;
                    float[] tabledwidths = new float[] { 0.5f, 6f, 2f };
                    tabled.SetWidths(tabledwidths);

                    PdfPCell cell9 = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell9.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cell9.Colspan = 0;
                    cell9.PaddingTop = 3;
                    cell9.PaddingBottom = 3;
                    //cell9.Border = 0;
                    tabled.AddCell(cell9);

                    PdfPCell cell10 = new PdfPCell(new Phrase("Particulars", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell10.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cell10.Colspan = 0;
                    cell10.PaddingTop = 3;
                    cell10.PaddingBottom = 3;
                    //cell10.Border = 0;
                    tabled.AddCell(cell10);

                    PdfPCell cellAmount = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmount.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellAmount.Colspan = 0;
                    cellAmount.PaddingTop = 3;
                    cellAmount.PaddingBottom = 3;
                    //cellAmount.Border = 0;
                    tabled.AddCell(cellAmount);


                    PdfPCell cellSno1 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno1.Border = 0;
                    cellSno1.PaddingTop = 3;
                    cellSno1.PaddingBottom = 3;
                    tabled.AddCell(cellSno1);


                    PdfPCell celldesc = new PdfPCell(new Phrase("Amount Claimed on Kst/Service/Production Staff Rendered to " + ddlCname.SelectedItem.Text + "  for the month of " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc.PaddingTop = 3;
                    celldesc.PaddingBottom = 3;
                    celldesc.SetLeading(0.0f, 1.3f);
                    //celldesc.Border = 0;
                    tabled.AddCell(celldesc);

                    PdfPCell cellAmount1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmount1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno1.Border = 0;
                    cellAmount1.PaddingTop = 3;
                    cellAmount1.PaddingBottom = 3;
                    tabled.AddCell(cellAmount1);

                    PdfPCell cellSno2 = new PdfPCell(new Phrase("A", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellSno2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno2.Border = 0;
                    cellSno2.PaddingTop = 3;
                    cellSno2.PaddingBottom = 3;
                    tabled.AddCell(cellSno2);


                    PdfPCell celldesc2 = new PdfPCell(new Phrase("Monthly Payments ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc2.Colspan = 2;
                    celldesc2.PaddingTop = 3;
                    celldesc2.PaddingBottom = 3;
                    //celldesc2.Border = 0;
                    tabled.AddCell(celldesc2);


                    PdfPCell cellSno3 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno3.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno3.Border = 0;
                    cellSno3.PaddingTop = 3;
                    cellSno3.PaddingBottom = 3;
                    tabled.AddCell(cellSno3);


                    PdfPCell celldesc3 = new PdfPCell(new Phrase("Total Basic", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc3.Colspan = 0;
                    celldesc3.PaddingTop = 3;
                    celldesc3.PaddingBottom = 3;
                    // celldesc3.Border = 0;
                    tabled.AddCell(celldesc3);

                    PdfPCell cellAmt1 = new PdfPCell(new Phrase(totalbasic.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    // cellAmt1.Border = 0;
                    cellAmt1.PaddingTop = 3;
                    cellAmt1.PaddingBottom = 3;
                    tabled.AddCell(cellAmt1);

                    PdfPCell cellSno4 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno4.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno4.Border = 0;
                    cellSno4.PaddingTop = 3;
                    cellSno4.PaddingBottom = 3;
                    tabled.AddCell(cellSno4);


                    PdfPCell celldesc4 = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc4.Colspan = 0;
                    //celldesc4.Border = 0;
                    celldesc4.PaddingTop = 3;
                    celldesc4.PaddingBottom = 3;
                    tabled.AddCell(celldesc4);

                    PdfPCell cellAmt2 = new PdfPCell(new Phrase(totalhra.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt2.Border = 0;
                    cellAmt2.PaddingTop = 3;
                    cellAmt2.PaddingBottom = 3;
                    tabled.AddCell(cellAmt2);

                    PdfPCell cellSno5 = new PdfPCell(new Phrase("3", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno5.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno5.Border = 0;
                    cellSno5.PaddingTop = 3;
                    cellSno5.PaddingBottom = 3;
                    tabled.AddCell(cellSno5);


                    PdfPCell celldesc5 = new PdfPCell(new Phrase("Total Conveyance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc5.Border = 0;
                    celldesc5.PaddingTop = 3;
                    celldesc5.PaddingBottom = 3;
                    tabled.AddCell(celldesc5);

                    PdfPCell cellAmt3 = new PdfPCell(new Phrase(totalconveyance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt3.Border = 0;
                    cellAmt3.PaddingTop = 3;
                    cellAmt3.PaddingBottom = 3;
                    tabled.AddCell(cellAmt3);


                    PdfPCell cellSno6 = new PdfPCell(new Phrase("4", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno6.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno6.Border = 0;
                    cellSno6.PaddingTop = 3;
                    cellSno6.PaddingBottom = 3;
                    tabled.AddCell(cellSno6);


                    PdfPCell celldesc6 = new PdfPCell(new Phrase("Total Attendance Allowance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc6.Border = 0;
                    celldesc6.PaddingTop = 3;
                    celldesc6.PaddingBottom = 3;
                    tabled.AddCell(celldesc6);

                    PdfPCell cellAmt4 = new PdfPCell(new Phrase(AttendanceAllowance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt4.Border = 0;
                    cellAmt4.PaddingTop = 3;
                    cellAmt4.PaddingBottom = 3;
                    tabled.AddCell(cellAmt4);


                    PdfPCell cellSno7 = new PdfPCell(new Phrase("5", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno7.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno7.Border = 0;
                    cellSno7.PaddingTop = 3;
                    cellSno7.PaddingBottom = 3;
                    tabled.AddCell(cellSno7);


                    PdfPCell celldesc7 = new PdfPCell(new Phrase("Other Allowance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc7.Border = 0;
                    celldesc7.PaddingTop = 3;
                    celldesc7.PaddingBottom = 3;
                    tabled.AddCell(celldesc7);

                    PdfPCell cellAmt5 = new PdfPCell(new Phrase(totalotherallowance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt5.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt5.Border = 0;
                    cellAmt5.PaddingTop = 3;
                    cellAmt5.PaddingBottom = 3;
                    tabled.AddCell(cellAmt5);

                    PdfPCell cellSno8 = new PdfPCell(new Phrase("6", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno8.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno8.Border = 0;
                    cellSno8.PaddingTop = 3;
                    cellSno8.PaddingBottom = 3;
                    tabled.AddCell(cellSno8);


                    PdfPCell celldesc8 = new PdfPCell(new Phrase("Arreas", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc8.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc8.Border = 0;
                    celldesc8.PaddingTop = 3;
                    celldesc8.PaddingBottom = 3;
                    tabled.AddCell(celldesc8);

                    PdfPCell cellAmt6 = new PdfPCell(new Phrase(Arrears.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    // cellAmt6.Border = 0;
                    cellAmt6.PaddingTop = 3;
                    cellAmt6.PaddingBottom = 3;
                    tabled.AddCell(cellAmt6);

                    PdfPCell cellSno9 = new PdfPCell(new Phrase("7", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno9.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    // cellSno9.Border = 0;
                    cellSno9.PaddingTop = 3;
                    cellSno9.PaddingBottom = 3;
                    tabled.AddCell(cellSno9);


                    PdfPCell celldesc9 = new PdfPCell(new Phrase("Washing Allowance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc9.Border = 0;
                    celldesc9.PaddingTop = 3;
                    celldesc9.PaddingBottom = 3;
                    tabled.AddCell(celldesc9);

                    PdfPCell cellAmt7 = new PdfPCell(new Phrase(TotalWashingAllowance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt7.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt7.Border = 0;
                    cellAmt7.PaddingTop = 3;
                    cellAmt7.PaddingBottom = 3;
                    tabled.AddCell(cellAmt7);


                    PdfPCell cellSno10 = new PdfPCell(new Phrase("8", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno10.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno10.Border = 0;
                    cellSno10.PaddingTop = 3;
                    cellSno10.PaddingBottom = 3;
                    tabled.AddCell(cellSno10);


                    PdfPCell celldesc10 = new PdfPCell(new Phrase("Total Statutory Bonus", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc10.Border = 0;
                    celldesc10.PaddingTop = 3;
                    celldesc10.PaddingBottom = 3;
                    tabled.AddCell(celldesc10);

                    PdfPCell cellAmt8 = new PdfPCell(new Phrase(Totalbonus.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt8.Border = 0;
                    cellAmt8.PaddingTop = 3;
                    cellAmt8.PaddingBottom = 3;
                    tabled.AddCell(cellAmt8);

                    PdfPCell cellSno11 = new PdfPCell(new Phrase("9", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno11.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno11.Border = 0;
                    cellSno11.PaddingTop = 3;
                    cellSno11.PaddingBottom = 3;
                    tabled.AddCell(cellSno11);


                    PdfPCell celldesc11 = new PdfPCell(new Phrase("Total EL Encashment", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc11.Border = 0;
                    celldesc11.PaddingTop = 3;
                    celldesc11.PaddingBottom = 3;
                    tabled.AddCell(celldesc11);

                    PdfPCell cellAmt9 = new PdfPCell(new Phrase(TotalEnchashement.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt9.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt9.Border = 0;
                    cellAmt9.PaddingTop = 3;
                    cellAmt9.PaddingBottom = 3;
                    tabled.AddCell(cellAmt9);

                    PdfPCell cellSno12 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno12.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno12.Border = 0;
                    cellSno12.PaddingTop = 3;
                    cellSno12.PaddingBottom = 3;
                    tabled.AddCell(cellSno12);


                    PdfPCell celldesc12 = new PdfPCell(new Phrase("TOTAL", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc12.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc12.Border = 0;
                    celldesc12.PaddingTop = 3;
                    celldesc12.PaddingBottom = 3;
                    tabled.AddCell(celldesc12);

                    PdfPCell cellAmt10 = new PdfPCell(new Phrase(BillTotal.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt10.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt10.Border = 0;
                    cellAmt10.PaddingTop = 3;
                    cellAmt10.PaddingBottom = 3;
                    tabled.AddCell(cellAmt10);

                    PdfPCell cellSno13 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno13.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno13.Border = 0;
                    cellSno13.PaddingTop = 3;
                    cellSno13.PaddingBottom = 3;
                    tabled.AddCell(cellSno13);


                    PdfPCell celldesc13 = new PdfPCell(new Phrase("ESI TOTAL", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc13.Border = 0;
                    celldesc13.PaddingTop = 3;
                    celldesc13.PaddingBottom = 3;
                    tabled.AddCell(celldesc13);

                    PdfPCell cellAmt11 = new PdfPCell(new Phrase(esitotal.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt11.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt11.Border = 0;
                    cellAmt11.PaddingTop = 3;
                    cellAmt11.PaddingBottom = 3;
                    tabled.AddCell(cellAmt11);


                    PdfPCell cellSno14 = new PdfPCell(new Phrase("B", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellSno14.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno14.Border = 0;
                    cellSno14.PaddingTop = 3;
                    cellSno14.PaddingBottom = 3;
                    tabled.AddCell(cellSno14);


                    PdfPCell celldesc14 = new PdfPCell(new Phrase("Statutory & Reimbursement", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc14.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc14.Colspan = 2;
                    // celldesc14.Border = 0;
                    celldesc14.PaddingTop = 3;
                    celldesc14.PaddingBottom = 3;
                    tabled.AddCell(celldesc14);


                    PdfPCell cellSno15 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno15.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno15.Border = 0;
                    cellSno15.PaddingTop = 3;
                    cellSno15.PaddingBottom = 3;
                    tabled.AddCell(cellSno15);


                    PdfPCell celldesc15 = new PdfPCell(new Phrase("Esic @ 4.75%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc15.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc15.Colspan = 0;
                    // celldesc15.Border = 0;
                    celldesc15.PaddingTop = 3;
                    celldesc15.PaddingBottom = 3;
                    tabled.AddCell(celldesc15);

                    PdfPCell cellAmt12 = new PdfPCell(new Phrase(esiempr.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt12.Border = 0;
                    cellAmt12.PaddingTop = 3;
                    cellAmt12.PaddingBottom = 3;
                    tabled.AddCell(cellAmt12);

                    PdfPCell cellSno16 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno16.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno16.Border = 0;
                    cellSno16.PaddingTop = 3;
                    cellSno16.PaddingBottom = 3;
                    tabled.AddCell(cellSno16);


                    PdfPCell celldesc16 = new PdfPCell(new Phrase("EPF @ 13.36%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc16.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc16.Colspan = 0;
                    //celldesc16.Border = 0;
                    celldesc16.PaddingTop = 3;
                    celldesc16.PaddingBottom = 3;
                    tabled.AddCell(celldesc16);

                    PdfPCell cellAmt13 = new PdfPCell(new Phrase(pfempr.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt13.Border = 0;
                    cellAmt13.PaddingTop = 3;
                    cellAmt13.PaddingBottom = 3;
                    tabled.AddCell(cellAmt13);

                    PdfPCell cellSno17 = new PdfPCell(new Phrase("3", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno17.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno17.Border = 0;
                    cellSno17.PaddingTop = 3;
                    cellSno17.PaddingBottom = 3;
                    tabled.AddCell(cellSno17);


                    PdfPCell celldesc17 = new PdfPCell(new Phrase("Management Fees", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc17.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc17.Border = 0;
                    celldesc17.PaddingTop = 3;
                    celldesc17.PaddingBottom = 3;
                    tabled.AddCell(celldesc17);

                    PdfPCell cellAmt14 = new PdfPCell(new Phrase(managementfee.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt14.Border = 0;
                    cellAmt14.PaddingTop = 3;
                    cellAmt14.PaddingBottom = 3;
                    tabled.AddCell(cellAmt14);

                    PdfPCell cellSno18 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno18.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno18.Border = 0;
                    cellSno18.PaddingTop = 3;
                    cellSno18.PaddingBottom = 3;
                    tabled.AddCell(cellSno18);

                    float TotalB = managementfee + pfempr + esiempr;

                    PdfPCell celldesc18 = new PdfPCell(new Phrase("TOTAL (B)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc18.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc18.Border = 0;
                    celldesc18.PaddingTop = 3;
                    celldesc18.PaddingBottom = 3;
                    tabled.AddCell(celldesc18);

                    PdfPCell cellAmt15 = new PdfPCell(new Phrase(TotalB.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt15.Border = 0;
                    cellAmt15.PaddingTop = 3;
                    cellAmt15.PaddingBottom = 3;
                    tabled.AddCell(cellAmt15);

                    PdfPCell cellSno19 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellSno19.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //cellSno19.Border = 0;
                    cellSno19.PaddingTop = 3;
                    cellSno19.PaddingBottom = 3;
                    tabled.AddCell(cellSno19);

                    PdfPCell celldesc19 = new PdfPCell(new Phrase("TOTAL (A + B)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //celldesc19.Border = 0;
                    celldesc19.PaddingTop = 3;
                    celldesc19.PaddingBottom = 3;
                    tabled.AddCell(celldesc19);

                    float TotalAB = BillTotal + TotalB;

                    PdfPCell cellAmt16 = new PdfPCell(new Phrase(TotalAB.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt16.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cellAmt16.Border = 0;
                    cellAmt16.PaddingTop = 3;
                    cellAmt16.PaddingBottom = 3;
                    tabled.AddCell(cellAmt16);

                    document.Add(tabled);




                    PdfPTable tablecon = new PdfPTable(2);
                    tablecon.TotalWidth = 500f;
                    tablecon.LockedWidth = true;
                    float[] widthcon = new float[] { 2f, 2f };
                    tablecon.SetWidths(widthcon);

                    PdfPCell cellBreak = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 15, Font.NORMAL, BaseColor.BLACK)));
                    cellBreak.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellBreak.Colspan = 2;
                    cellBreak.BorderWidthBottom = 0;
                    cellBreak.BorderWidthLeft = .5f;
                    cellBreak.BorderWidthTop = 0;
                    cellBreak.BorderWidthRight = .5f;
                    //cellBreak.Border = 0;
                    tablecon.AddCell(cellBreak);

                    string gtotal = NumberToEnglish.Instance.changeNumericToWords(TotalAB.ToString("#"));

                    PdfPCell cellcamt = new PdfPCell(new Phrase(" Grand Total is Rs. " + TotalAB.ToString("#") + " (Rupees " + gtotal.ToString() + "Only)", FontFactory.GetFont(FontStyle, 10, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellcamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellcamt.Colspan = 2;
                    cellcamt.BorderWidthBottom = 0;
                    cellcamt.BorderWidthLeft = .5f;
                    cellcamt.BorderWidthTop = 0;
                    cellcamt.BorderWidthRight = .5f;
                    //cellcamt.Border = 1;
                    tablecon.AddCell(cellcamt);
                    tablecon.AddCell(cellBreak);

                    string Servicetax = string.Empty;
                    string PANNO = string.Empty;
                    string PFNo = string.Empty;
                    string Esino = string.Empty;
                    string PTno = string.Empty;

                    if (compInfo.Rows.Count > 0)
                    {
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        PTno = compInfo.Rows[0]["bankname"].ToString();
                    }

                    if (Servicetax.Trim().Length > 0)
                    {
                        PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc6.Colspan = 7;
                        cellc6.BorderWidthBottom = 0;
                        cellc6.BorderWidthLeft = .5f;
                        cellc6.BorderWidthTop = .5f;
                        cellc6.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellc6);
                    }



                    if (PANNO.Trim().Length > 0)
                    {
                        PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc7.Colspan = 7;
                        cellc7.BorderWidthBottom = .5f;
                        cellc7.BorderWidthLeft = .5f;
                        cellc7.BorderWidthTop = 0;
                        cellc7.BorderWidthRight = .5f;
                        //cellc7.Border = 0;
                        tablecon.AddCell(cellc7);
                    }
                    if (PFNo.Trim().Length > 0)
                    {
                        PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Pfno.Colspan = 7;
                        Pfno.BorderWidthBottom = .5f;
                        Pfno.BorderWidthLeft = .5f;
                        Pfno.BorderWidthTop = 0;
                        Pfno.BorderWidthRight = .5f;
                        //Pfno.Border = 0;
                        tablecon.AddCell(Pfno);
                    }

                    if (Esino.Trim().Length > 0)
                    {
                        PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        ESino.Colspan = 7;
                        ESino.BorderWidthBottom = .5f;
                        ESino.BorderWidthLeft = .5f;
                        ESino.BorderWidthTop = 0;
                        ESino.BorderWidthRight = .5f;
                        //ESino.Border = 0;
                        tablecon.AddCell(ESino);
                    }

                    if (PTno.Trim().Length > 0)
                    {
                        PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Ptno.Colspan = 7;
                        Ptno.BorderWidthBottom = .5f;
                        Ptno.BorderWidthLeft = .5f;
                        Ptno.BorderWidthTop = 0;
                        Ptno.BorderWidthRight = .5f;
                        //Ptno.Border = 0;
                        tablecon.AddCell(Ptno);
                    }

                    PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellspace.Border = 0;
                    cellspace.Colspan = 2;
                    tablecon.AddCell(cellspace);
                    //tablecon.AddCell(cellspace);

                    PdfPCell cellnote = new PdfPCell(new Paragraph("NOTE", FontFactory.GetFont(FontStyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    cellnote.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellnote.Border = 0;
                    cellnote.Colspan = 2;
                    tablecon.AddCell(cellnote);


                    PdfPCell cellnote1 = new PdfPCell(new Paragraph("Service Tax 14%(100%)  payable  by service Receiver ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellnote1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellnote1.Border = 0;
                    cellnote1.Colspan = 2;
                    cellnote1.PaddingTop = 5;
                    tablecon.AddCell(cellnote1);

                    PdfPCell cellc41 = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc41.Colspan = 7;
                    cellc41.Border = 0;
                    cellc41.PaddingTop = 10;
                    tablecon.AddCell(cellc41);

                    PdfPCell cellc4 = new PdfPCell(new Phrase("Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc4.Colspan = 7;
                    cellc4.Border = 0;
                    cellc4.PaddingTop = 30;
                    tablecon.AddCell(cellc4);





                    document.Add(tablecon);
                    document.NewPage();
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=Invoice.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btnall_Click(object sender, EventArgs e)
        {

            int titleofdocumentindex = 0;
            if (ddlclientid.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            int payMonth = GetMonth(ddlmonth.SelectedValue);
            //int month = GetMonthAndYear();
            int month = GetMonthBasedOnSelectionDateorMonth();

            string selectmonth = string.Empty;
            string SelectmonthWithbankacno = string.Empty;
            string SelectmonthWithoutbankacno = string.Empty;
            DataTable dt = null;


            var clientid = ddlclientid.SelectedValue;
            var Paysheetoption = 0;


            var SPName = "";
            Hashtable HTPaysheet = new Hashtable();
            SPName = "IMEBillpdfs";
            HTPaysheet.Add("@ClientId", clientid);
            HTPaysheet.Add("@month", month);
            HTPaysheet.Add("@PaymentOption", Paysheetoption);

            dt = config.ExecuteAdaptorAsyncWithParams(SPName, HTPaysheet).Result;

            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL.Rotate());
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("WebWonders");
                document.AddSubject("Wage Sheet");
                document.AddKeywords("Keyword1, keyword2, …");//
                float forConvert;

                string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";
                DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                string cmpname = "Your Company Name";
                string companyAddress = "Your Company Address";
                string Servicetax = string.Empty;
                string PANNO = string.Empty;
                string PFNo = string.Empty;
                string Esino = string.Empty;
                string PTno = string.Empty;


                if (compInfo.Rows.Count > 0)
                {
                    cmpname = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                    Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                    PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                    PFNo = compInfo.Rows[0]["PFNo"].ToString();
                    Esino = compInfo.Rows[0]["ESINo"].ToString();
                    PTno = compInfo.Rows[0]["bankname"].ToString();
                }

                #region Variables for table cells counting

                int dts = 0;
                int srate = 0;
                int basic = 0;
                int da = 0;
                int hra = 0;
                int cca = 0;
                int conveyance = 0;
                int washallowance = 0;
                int otherallowance = 0;
                int leavewages = 0;
                int gratuity = 0;
                int bonus = 0;
                int nfhs = 0;
                int rc = 0;
                int cs = 0;
                int gross = 0;
                int incentivs = 0;
                int pfonduties = 0;
                int esionduties = 0;
                int proftax = 0;
                int salAdvDed = 0;
                int uniformDed = 0;
                int otherDed = 0;
                int canteenAdv = 0;
                int penalty = 0;
                int totalDeductions = 0;
                int netpay = 0;

                int ots = 0;
                int otamt = 0;
                int wos = 0;
                int wosamt = 0;
                int nhs = 0;
                int nhsamt = 0;
                int pfonot = 0;
                int esionot = 0;
                int Pf = 0;
                int Esi = 0;


                float dts1 = 0;
                float srate1 = 0;
                float basic1 = 0;
                float da1 = 0;
                float hra1 = 0;
                float cca1 = 0;
                float conveyance1 = 0;
                float washallowance1 = 0;
                float otherallowance1 = 0;
                float leavewages1 = 0;
                float gratuity1 = 0;
                float bonus1 = 0;
                float nfhs1 = 0;
                float rc1 = 0;
                float cs1 = 0;
                float gross1 = 0;
                float incentivs1 = 0;
                float pfonduties1 = 0;
                float esionduties1 = 0;
                float proftax1 = 0;
                float salAdvDed1 = 0;
                float uniformDed1 = 0;
                float otherDed1 = 0;
                float canteenAdv1 = 0;
                float penalty1 = 0;
                float totalDeductions1 = 0;
                float netpay1 = 0;

                float ots1 = 0;
                float otamt1 = 0;
                float wos1 = 0;
                float wosamt1 = 0;
                float nhs1 = 0;
                float nhsamt1 = 0;
                float pfonot1 = 0;
                float esionot1 = 0;
                float Pf1 = 0;
                float Esi1 = 0;

                float esiempr = 0;
                float pfempr = 0;
                float Grandesiempr = 0;
                float Grandpfempr = 0;


                #endregion


                #region Data for counting tablecells

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
                    if (dts1 != 0)
                    {
                        dts1 += 1;
                        if (dts1 > 0)
                        {
                            dts = 1;
                        }
                    }

                    srate1 = float.Parse(dt.Rows[i]["SalRate"].ToString());
                    if (srate1 != 0)
                    {
                        srate1 += 1;
                        if (srate1 > 0)
                        {
                            srate = 1;
                        }
                    }

                    basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
                    if (basic1 != 0)
                    {
                        basic1 += 1;
                        if (basic1 > 0)
                        {
                            basic = 1;
                        }
                    }
                    da1 = float.Parse(dt.Rows[i]["da"].ToString());
                    if (da1 != 0)
                    {
                        da1 += 1;
                        if (da1 > 0)
                        {
                            da = 1;
                        }
                    }
                    hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
                    if (hra1 != 0)
                    {
                        hra1 += 1;
                        if (hra1 > 0)
                        {
                            hra = 1;
                        }
                    }
                    cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
                    if (cca1 != 0)
                    {
                        cca1 += 1;
                        if (cca1 > 0)
                        {
                            cca = 1;
                        }
                    }
                    conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
                    if (conveyance1 != 0)
                    {
                        conveyance1 += 1;
                        if (conveyance1 > 0)
                        {
                            conveyance = 1;
                        }
                    }

                    washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
                    if (washallowance1 != 0)
                    {
                        washallowance1 += 1;
                        if (washallowance1 > 0)
                        {
                            washallowance = 1;
                        }
                    }
                    otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
                    if (otherallowance1 != 0)
                    {
                        otherallowance1 += 1;
                        if (otherallowance1 > 0)
                        {
                            otherallowance = 1;
                        }
                    }
                    leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
                    if (leavewages1 != 0)
                    {
                        leavewages1 += 1;
                        if (leavewages1 > 0)
                        {
                            leavewages = 1;
                        }
                    }
                    gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
                    if (gratuity1 != 0)
                    {
                        gratuity1 += 1;
                        if (gratuity1 > 0)
                        {
                            gratuity = 1;
                        }
                    }
                    bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
                    if (bonus1 != 0)
                    {
                        bonus1 += 1;
                        if (bonus1 > 0)
                        {
                            bonus = 1;
                        }
                    }

                    nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
                    if (nfhs1 != 0)
                    {
                        nfhs1 += 1;
                        if (nfhs1 > 0)
                        {
                            nfhs = 1;
                        }
                    }
                    rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
                    if (rc1 != 0)
                    {
                        rc1 += 1;
                        if (rc1 > 0)
                        {
                            rc = 1;
                        }
                    }

                    cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
                    if (cs1 != 0)
                    {
                        cs1 += 1;
                        if (cs1 > 0)
                        {
                            cs = 1;
                        }
                    }
                    gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
                    if (gross1 != 0)
                    {
                        gross1 += 1;
                        if (gross1 > 0)
                        {
                            gross = 1;
                        }
                    }

                    incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
                    if (incentivs1 != 0)
                    {
                        incentivs1 += 1;
                        if (incentivs1 > 0)
                        {
                            incentivs = 1;
                        }
                    }
                    //CHanged to zero so as to get PF and ESI in PFTotal and ESITotal as given below //Check PFTotal and ESITotal
                    pfonduties1 = float.Parse(dt.Rows[i]["PFonDuties"].ToString());
                    if (pfonduties1 != 0)
                    {
                        pfonduties1 += 1;
                        if (pfonduties1 > 0)
                        {
                            pfonduties = 0;
                        }
                    }
                    esionduties1 = float.Parse(dt.Rows[i]["ESIonduties"].ToString());
                    if (esionduties1 != 0)
                    {
                        esionduties1 += 1;
                        if (esionduties1 > 0)
                        {
                            esionduties = 0;
                        }
                    }
                    proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
                    if (proftax1 != 0)
                    {
                        proftax1 += 1;
                        if (proftax1 > 0)
                        {
                            proftax = 1;
                        }
                    }
                    salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
                    if (salAdvDed1 != 0)
                    {
                        salAdvDed1 += 1;
                        if (salAdvDed1 > 0)
                        {
                            salAdvDed = 1;
                        }
                    }
                    uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
                    if (uniformDed1 != 0)
                    {
                        uniformDed1 += 1;
                        if (uniformDed1 > 0)
                        {
                            uniformDed = 1;
                        }
                    }
                    otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
                    if (otherDed1 != 0)
                    {
                        otherDed1 += 1;
                        if (otherDed1 > 0)
                        {
                            otherDed = 1;
                        }
                    }
                    canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
                    if (canteenAdv1 != 0)
                    {
                        canteenAdv1 += 1;
                        if (canteenAdv1 > 0)
                        {
                            canteenAdv = 1;
                        }
                    }

                    penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
                    if (penalty1 != 0)
                    {
                        penalty1 += 1;
                        if (penalty1 > 0)
                        {
                            penalty = 1;
                        }
                    }
                    totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
                    if (totalDeductions1 != 0)
                    {
                        totalDeductions1 += 1;
                        if (totalDeductions1 > 0)
                        {
                            totalDeductions = 1;
                        }
                    }
                    netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
                    if (netpay1 != 0)
                    {
                        netpay1 += 1;
                        if (netpay1 > 0)
                        {
                            netpay = 1;
                        }
                    }

                    ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
                    if (ots1 != 0)
                    {
                        ots1 += 1;
                        if (ots1 > 0)
                        {
                            ots = 1;
                        }
                    }

                    otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
                    if (otamt1 != 0)
                    {
                        otamt1 += 1;
                        if (otamt1 > 0)
                        {
                            otamt = 1;
                        }
                    }

                    wos1 = float.Parse(dt.Rows[i]["Wo"].ToString());
                    if (wos1 != 0)
                    {
                        wos1 += 1;
                        if (wos1 > 0)
                        {
                            wos = 1;
                        }
                    }

                    wosamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
                    if (wosamt1 != 0)
                    {
                        wosamt1 += 1;
                        if (wosamt1 > 0)
                        {
                            wosamt = 1;
                        }
                    }

                    nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
                    if (nhs1 != 0)
                    {
                        nhs1 += 1;
                        if (nhs1 > 0)
                        {
                            nhs = 1;
                        }
                    }
                    nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
                    if (nhsamt1 != 0)
                    {
                        nhsamt1 += 1;
                        if (nhsamt1 > 0)
                        {
                            nhsamt = 1;
                        }
                    }

                    pfonot1 = float.Parse(dt.Rows[i]["PFONOT"].ToString());
                    if (pfonot1 != 0)
                    {
                        pfonot1 += 1;
                        if (pfonot1 > 0)
                        {
                            pfonot = 0;
                        }
                    }

                    esionot1 = float.Parse(dt.Rows[i]["ESIONOT"].ToString());
                    if (esionot1 != 0)
                    {
                        esionot1 += 1;
                        if (esionot1 > 0)
                        {
                            esionot = 0;
                        }
                    }

                    Pf1 = float.Parse(dt.Rows[i]["PFTotal"].ToString());
                    if (Pf1 != 0)
                    {
                        Pf1 += 1;
                        if (Pf1 > 0)
                        {
                            Pf = 1;
                        }
                    }
                    Esi1 = float.Parse(dt.Rows[i]["ESITotal"].ToString());
                    if (Esi1 != 0)
                    {
                        Esi1 += 1;
                        if (Esi1 > 0)
                        {
                            Esi = 1;
                        }
                    }


                }

                #endregion

                int sno = 1;
                int empid = 1;
                int empname = 1;
                int design = 1;
                int bankacno = 1;

                int tableCells = dts + srate + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
                                gratuity + bonus + nfhs + rc + cs + gross + incentivs + pfonduties + esionduties + proftax +
                                salAdvDed + uniformDed + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno + wos + wosamt + nhs + nhsamt +
                                empid + empname + design + ots + otamt + pfonot + esionot + Pf + Esi;




                #region variables for total

                float totalDuties = 0;
                float totalsrate = 0;
                float totalBasic = 0;
                float totalDA = 0;
                float totalHRA = 0;
                float totalCCA = 0;
                float totalConveyance = 0;
                float totalWA = 0;
                float totalOA = 0;
                float totalLw = 0;
                float totalGratuity = 0;
                float totalbonus = 0;
                float totalNfhs = 0;
                float totalRc = 0;
                float totalCs = 0;
                float totalGross = 0;
                float totalIncentivs = 0;
                float totalPFondts = 0;
                float totalESIondts = 0;
                float totalProfTax = 0;
                float totalSalAdv = 0;
                float totalUniforDed = 0;
                float totalOtherdedn = 0;
                float totalCanteenAdv = 0;
                float totalPenalty = 0;
                float totalDed = 0;
                float totalNetpay = 0;

                float totalots = 0;
                float totalotamt = 0;
                float totalwos = 0;
                float totalwosamt = 0;
                float totalnhs = 0;
                float totalnhsamt = 0;
                float totalpfonots = 0;
                float totalesionots = 0;
                float totalpf = 0;
                float totalesi = 0;


                #endregion

                #region variables for  Grand  total


                float GrandtotalDuties = 0;
                float GrandtotalSrate = 0;
                float GrandtotalBasic = 0;
                float GrandtotalDA = 0;
                float GrandtotalHRA = 0;
                float GrandtotalCCA = 0;
                float GrandtotalConveyance = 0;
                float GrandtotalWA = 0;
                float GrandtotalOA = 0;
                float GrandtotalLw = 0;
                float GrandtotalGratuity = 0;
                float Grandtotalbonus = 0;
                float GrandtotalNfhs = 0;
                float GrandtotalRc = 0;
                float GrandtotalCs = 0;
                float GrandtotalGross = 0;
                float GrandtotalIncentivs = 0;
                float GrandtotalPFondts = 0;
                float GrandtotalESIondts = 0;
                float GrandtotalProfTax = 0;
                float GrandtotalSalAdv = 0;
                float GrandtotalUniforDed = 0;
                float GrandtotalOtherdedn = 0;
                float GrandtotalCanteenAdv = 0;
                float GrandtotalPenalty = 0;
                float GrandtotalDed = 0;
                float GrandtotalNetpay = 0;

                float Grandtotalots = 0;
                float Grandtotalotamt = 0;
                float Grandtotalwos = 0;
                float Grandtotalwosamt = 0;
                float Grandtotalnhs = 0;
                float Grandtotalnhsamt = 0;
                float Grandtotalpfonots = 0;
                float Grandtotalesionots = 0;
                float Grandtotalpf = 0;
                float Grandtotalesi = 0;

                #endregion

                int nextpagerecordscount = 0;
                int targetpagerecors = 10;
                int secondpagerecords = targetpagerecors + 3;
                bool nextpagehasPages = false;
                int j = 0;
                PdfPTable SecondtablecheckbyFooter = null;
                PdfPTable SecondtableFooter = null;
                PdfPTable SecondtableGrandtotalFooter = null;
                for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                {
                    nextpagehasPages = true;


                    #region Titles of Document
                    PdfPTable Maintable = new PdfPTable(27);
                    if (tableCells > 20)
                    {
                        Maintable.TotalWidth = 980f;
                    }
                    else
                    {
                        Maintable.TotalWidth = 850f;
                    }
                    Maintable.LockedWidth = true;
                    float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


                    Maintable.SetWidths(width);
                    uint FONT_SIZE = 8;
                    string Fontstyle = "Verdana";

                    //Company Name & vage act details

                    PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellemp.Colspan = 27;
                    cellemp.Border = 0;



                    #endregion


                    #region Sub Headings

                    PdfPCell companyName = new PdfPCell(new Phrase(cmpname, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
                    companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    companyName.Colspan = 27;
                    companyName.Border = 0;// 15;
                    Maintable.AddCell(companyName);

                    PdfPCell paySheet = new PdfPCell(new Phrase("BILL", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    paySheet.Colspan = 27;
                    paySheet.Border = 0;// 15;
                    Maintable.AddCell(paySheet);

                    PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlclientid.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClient.Colspan = 10;
                    CClient.Border = 0;// 15;
                    Maintable.AddCell(CClient);




                    PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPayMonth.Colspan = 10;
                    CPayMonth.Border = 0;// 15;
                    Maintable.AddCell(CPayMonth);


                    PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlCname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientName.Colspan = 7;
                    CClientName.Border = 0;// 15;
                    Maintable.AddCell(CClientName);

                    Maintable.AddCell(cellemp);
                    //document.Add(Maintable);

                    if (titleofdocumentindex == 0)
                    {
                        document.Add(Maintable);
                        titleofdocumentindex = 1;
                    }

                    #endregion


                    #region Table Headings

                    PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtableHeadings.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtableHeadings.TotalWidth = 850f;
                    }
                    SecondtableHeadings.LockedWidth = true;
                    float[] SecondHeadingsWidth = new float[] { };



                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
                    }

                    if (tableCells == 7)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion

                    SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                    //Cell Headings
                    //1
                    PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    //sNo.Colspan = 1;
                    sNo.Border = 15;// 15;
                    SecondtableHeadings.AddCell(sNo);

                    //2
                    PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpId.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpId);

                    //3
                    PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpName.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpName);

                    //4
                    PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDesgn.Border = 15;
                    SecondtableHeadings.AddCell(CDesgn);

                    //5
                    if (dts != 0)
                    {
                        PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CDuties.Border = 15;
                        SecondtableHeadings.AddCell(CDuties);
                    }

                    //6
                    if (ots != 0)
                    {
                        PdfPCell Cots = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Cots.Border = 15;
                        SecondtableHeadings.AddCell(Cots);
                    }

                    if (wos != 0)
                    {
                        PdfPCell CWos = new PdfPCell(new Phrase("WOs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CWos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CWos.Border = 15;
                        SecondtableHeadings.AddCell(CWos);
                    }

                    //8
                    if (nhs != 0)
                    {
                        PdfPCell CNHs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNHs.Border = 15;
                        SecondtableHeadings.AddCell(CNHs);
                    }

                    //6A
                    if (srate != 0)
                    {
                        PdfPCell Cots = new PdfPCell(new Phrase("S. Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Cots.Border = 15;
                        SecondtableHeadings.AddCell(Cots);
                    }


                    //7
                    if (basic != 0)
                    {
                        PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CBasic.Border = 15;
                        SecondtableHeadings.AddCell(CBasic);
                    }

                    //8
                    if (da != 0)
                    {
                        PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CDa.Border = 15;
                        SecondtableHeadings.AddCell(CDa);
                    }

                    //9
                    if (hra != 0)
                    {
                        PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CHRa.Border = 15;
                        SecondtableHeadings.AddCell(CHRa);
                    }

                    //10
                    if (cca != 0)
                    {
                        PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CCca.Border = 15;
                        SecondtableHeadings.AddCell(CCca);
                    }

                    //11
                    if (conveyance != 0)
                    {
                        PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Cconveyance.Border = 15;
                        SecondtableHeadings.AddCell(Cconveyance);
                    }

                    //12
                    if (washallowance != 0)
                    {
                        PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cwa.Border = 15;
                        SecondtableHeadings.AddCell(Cwa);
                    }

                    //13
                    if (otherallowance != 0)
                    {
                        PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        COa.Border = 15;
                        SecondtableHeadings.AddCell(COa);
                    }

                    //14
                    if (leavewages != 0)
                    {
                        PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CLa.Border = 15;
                        SecondtableHeadings.AddCell(CLa);
                    }

                    //15
                    if (gratuity != 0)
                    {
                        PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CGratuity.Border = 15;
                        SecondtableHeadings.AddCell(CGratuity);
                    }

                    //16
                    if (bonus != 0)
                    {
                        PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CBonus.Border = 15;
                        SecondtableHeadings.AddCell(CBonus);
                    }




                    //17
                    if (nfhs != 0)
                    {
                        PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNfhs.Border = 15;
                        SecondtableHeadings.AddCell(CNfhs);
                    }

                    //18
                    if (rc != 0)
                    {
                        PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CRc.Border = 15;
                        SecondtableHeadings.AddCell(CRc);
                    }

                    //19
                    if (cs != 0)
                    {
                        PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CCs.Border = 15;
                        SecondtableHeadings.AddCell(CCs);
                    }



                    //20
                    if (gross != 0)
                    {
                        PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CGross.Border = 15;
                        SecondtableHeadings.AddCell(CGross);
                    }

                    //21
                    if (otamt != 0)
                    {
                        PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        COtamt.Border = 15;
                        SecondtableHeadings.AddCell(COtamt);
                    }

                    if (wosamt != 0)
                    {
                        PdfPCell CWoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CWoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CWoamt.Border = 15;
                        SecondtableHeadings.AddCell(CWoamt);
                    }

                    //26
                    if (nhsamt != 0)
                    {
                        PdfPCell CNHsamt = new PdfPCell(new Phrase("NHs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNHsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNHsamt.Border = 15;
                        SecondtableHeadings.AddCell(CNHsamt);
                    }


                    //22
                    if (incentivs != 0)
                    {
                        PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CIncentivs.Border = 15;
                        SecondtableHeadings.AddCell(CIncentivs);
                    }



                    //23
                    if (pfonduties != 0)
                    {
                        PdfPCell CPFondts = new PdfPCell(new Phrase("PF on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPFondts.Border = 15;
                        SecondtableHeadings.AddCell(CPFondts);
                    }

                    //24
                    if (esionduties != 0)
                    {
                        PdfPCell CESIondts = new PdfPCell(new Phrase("ESI on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CESIondts.Border = 15;
                        SecondtableHeadings.AddCell(CESIondts);
                    }

                    //25
                    if (pfonot != 0)
                    {
                        PdfPCell CPFonot = new PdfPCell(new Phrase("PF on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPFonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPFonot.Border = 15;
                        SecondtableHeadings.AddCell(CPFonot);
                    }

                    //26
                    if (esionot != 0)
                    {
                        PdfPCell CESIonot = new PdfPCell(new Phrase("ESI on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CESIonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CESIonot.Border = 15;
                        SecondtableHeadings.AddCell(CESIonot);
                    }

                    //27
                    if (Pf != 0)
                    {
                        PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPF.Border = 15;
                        SecondtableHeadings.AddCell(CPF);
                    }

                    //28
                    if (Esi != 0)
                    {
                        PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CESI.Border = 15;
                        SecondtableHeadings.AddCell(CESI);
                    }


                    //29
                    if (proftax != 0)
                    {
                        PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPT.Border = 15;
                        SecondtableHeadings.AddCell(CPT);
                    }

                    //30
                    if (salAdvDed != 0)
                    {
                        PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CSalAdv.Border = 15;
                        SecondtableHeadings.AddCell(CSalAdv);
                    }

                    //31
                    if (uniformDed != 0)
                    {
                        PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CUnifDed.Border = 15;
                        SecondtableHeadings.AddCell(CUnifDed);
                    }

                    //32
                    if (otherDed != 0)
                    {
                        PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        COtherDed.Border = 15;
                        SecondtableHeadings.AddCell(COtherDed);
                    }

                    //33
                    if (canteenAdv != 0)
                    {
                        PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Ccanteended.Border = 15;
                        SecondtableHeadings.AddCell(Ccanteended);
                    }



                    //34
                    if (penalty != 0)
                    {
                        PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPenalty.Border = 15;
                        SecondtableHeadings.AddCell(CPenalty);
                    }

                    //35
                    if (totalDeductions != 0)
                    {
                        PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CTotDed.Border = 15;
                        SecondtableHeadings.AddCell(CTotDed);
                    }

                    //36
                    if (netpay != 0)
                    {
                        PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNetPay.Border = 15;
                        SecondtableHeadings.AddCell(CNetPay);
                    }

                    //37



                    #endregion


                    #region Table Data

                    PdfPTable Secondtable = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        Secondtable.TotalWidth = 1000f;
                    }
                    else
                    {
                        Secondtable.TotalWidth = 850f;
                    }
                    Secondtable.LockedWidth = true;
                    float[] SecondWidth = new float[] { };

                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
                    }

                    if (tableCells == 7)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion


                    Secondtable.SetWidths(SecondWidth);




                    int rowCount = 0;
                    int pageCount = 0;
                    int i = nextpagei;

                    // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                    {
                        float ForconvertOt = 0;
                        forConvert = 0;
                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

                        //if (forConvert > 0)
                        {

                            if (nextpagerecordscount == 0)
                            {
                                document.Add(SecondtableHeadings);
                            }

                            nextpagerecordscount++;

                            //1
                            PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSNo.Border = 15;
                            Secondtable.AddCell(CSNo);

                            //2
                            PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpId1.Border = 15;
                            Secondtable.AddCell(CEmpId1);

                            //3
                            PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpName1.Border = 15;
                            Secondtable.AddCell(CEmpName1);

                            //4
                            PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpDesgn.Border = 15;
                            Secondtable.AddCell(CEmpDesgn);

                            //5
                            if (dts != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                                totalDuties += forConvert;
                                GrandtotalDuties += forConvert;

                                PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNoOfDuties.Border = 15;
                                Secondtable.AddCell(CNoOfDuties);
                            }

                            //6
                            if (ots != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
                                totalots += forConvert;
                                Grandtotalots += forConvert;

                                PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                COts.Border = 15;
                                Secondtable.AddCell(COts);
                            }

                            if (wos != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["wo"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["wo"].ToString());
                                totalwos += forConvert;
                                Grandtotalwos += forConvert;

                                PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cwos.Border = 15;
                                Secondtable.AddCell(Cwos);
                            }

                            //8
                            if (nhs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
                                totalnhs += forConvert;
                                Grandtotalnhs += forConvert;

                                PdfPCell CNhs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNhs.Border = 15;
                                Secondtable.AddCell(CNhs);
                            }

                            //6A
                            if (srate != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["Salrate"].ToString());
                                totalsrate += forConvert;
                                GrandtotalSrate += forConvert;

                                PdfPCell CSalrate = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CSalrate.Border = 15;
                                Secondtable.AddCell(CSalrate);
                            }


                            //7
                            if (basic != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
                                totalBasic += forConvert;
                                GrandtotalBasic += forConvert;
                                PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CBasic1.Border = 15;
                                Secondtable.AddCell(CBasic1);
                            }

                            //8
                            if (da != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
                                totalDA += forConvert;
                                GrandtotalDA += forConvert;

                                PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CDa1.Border = 15;
                                Secondtable.AddCell(CDa1);
                            }

                            //9
                            if (hra != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
                                totalHRA += forConvert;
                                GrandtotalHRA += forConvert;

                                PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CHRA1.Border = 15;
                                Secondtable.AddCell(CHRA1);
                            }

                            //10
                            if (cca != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
                                totalCCA += forConvert;

                                GrandtotalCCA += forConvert;

                                PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Ccca.Border = 15;
                                Secondtable.AddCell(Ccca);
                            }

                            //11
                            if (conveyance != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
                                totalConveyance += forConvert;
                                GrandtotalConveyance += forConvert;

                                PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CConveyance.Border = 15;
                                Secondtable.AddCell(CConveyance);
                            }


                            //12
                            if (washallowance != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
                                totalWA += forConvert;
                                GrandtotalWA += forConvert;

                                PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CWa.Border = 15;
                                Secondtable.AddCell(CWa);
                            }

                            //13
                            if (otherallowance != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
                                totalOA += forConvert;
                                GrandtotalOA += forConvert;
                                PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                COA.Border = 15;
                                Secondtable.AddCell(COA);
                            }

                            //14
                            if (leavewages != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
                                totalLw += forConvert;
                                GrandtotalLw += forConvert;
                                PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CLa1.Border = 15;
                                Secondtable.AddCell(CLa1);
                            }
                            //15
                            if (gratuity != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
                                totalGratuity += forConvert;
                                GrandtotalGratuity += forConvert;
                                PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CGratuity1.Border = 15;
                                Secondtable.AddCell(CGratuity1);
                            }

                            //16
                            if (bonus != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
                                totalbonus += forConvert;

                                Grandtotalbonus += forConvert;
                                PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cbonus.Border = 15;
                                Secondtable.AddCell(Cbonus);
                            }



                            //17
                            if (nfhs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
                                totalNfhs += forConvert;
                                GrandtotalNfhs += forConvert;
                                PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNfhs1.Border = 15;
                                Secondtable.AddCell(CNfhs1);
                            }

                            //18
                            if (rc != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
                                totalRc += forConvert;
                                GrandtotalRc += forConvert;
                                PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CRc1.Border = 15;
                                Secondtable.AddCell(CRc1);
                            }

                            //19
                            if (cs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
                                totalCs += forConvert;
                                GrandtotalCs += forConvert;
                                PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CCs1.Border = 15;
                                Secondtable.AddCell(CCs1);
                            }


                            //20
                            if (gross != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
                                totalGross += forConvert;
                                GrandtotalGross += forConvert;

                                PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CGross1.Border = 15;
                                Secondtable.AddCell(CGross1);
                            }

                            //21
                            if (otamt != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
                                totalotamt += forConvert;
                                Grandtotalotamt += forConvert;

                                PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CGross1.Border = 15;
                                Secondtable.AddCell(CGross1);
                            }

                            if (wosamt != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["woamt"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["woamt"].ToString()));
                                totalwosamt += forConvert;

                                Grandtotalwosamt += forConvert;

                                PdfPCell Cwosamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cwosamt.Border = 15;
                                Secondtable.AddCell(Cwosamt);
                            }



                            //26
                            if (nhsamt != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
                                totalnhsamt += forConvert;

                                Grandtotalnhsamt += forConvert;

                                PdfPCell Cnhsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cnhsamt.Border = 15;
                                Secondtable.AddCell(Cnhsamt);
                            }


                            //22
                            if (incentivs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
                                totalIncentivs += forConvert;
                                GrandtotalIncentivs += forConvert;
                                PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CIncentivs1.Border = 15;
                                Secondtable.AddCell(CIncentivs1);
                            }

                            //23
                            if (pfonduties != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Pfonduties"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pfonduties"].ToString()));
                                totalPFondts += forConvert;
                                GrandtotalPFondts += forConvert;

                                PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPF1.Border = 15;
                                Secondtable.AddCell(CPF1);
                            }

                            //24
                            if (esionduties != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Esionduties"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString()));
                                totalESIondts += forConvert;

                                GrandtotalESIondts += forConvert;

                                PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CESI1.Border = 15;
                                Secondtable.AddCell(CESI1);
                            }

                            //25
                            if (pfonot != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["PFONOT"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFONOT"].ToString()));
                                totalpfonots += forConvert;
                                Grandtotalpfonots += forConvert;

                                PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPFonots.Border = 15;
                                Secondtable.AddCell(CPFonots);
                            }

                            //26
                            if (esionot != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["ESIONOT"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESIONOT"].ToString()));
                                totalesionots += forConvert;

                                Grandtotalesionots += forConvert;

                                PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CESIonots.Border = 15;
                                Secondtable.AddCell(CESIonots);
                            }

                            //27
                            if (Pf != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["PFTotal"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFTotal"].ToString()));
                                totalpf += forConvert;
                                Grandtotalpf += forConvert;

                                PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPFonots.Border = 15;
                                Secondtable.AddCell(CPFonots);
                            }

                            //28
                            if (Esi != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["ESITotal"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESITotal"].ToString()));
                                totalesi += forConvert;

                                Grandtotalesi += forConvert;

                                PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CESIonots.Border = 15;
                                Secondtable.AddCell(CESIonots);
                            }

                            //29
                            if (proftax != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
                                totalProfTax += forConvert;
                                GrandtotalProfTax += forConvert;

                                PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CProTax1.Border = 15;
                                Secondtable.AddCell(CProTax1);
                            }

                            //30
                            if (salAdvDed != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
                                totalSalAdv += forConvert;
                                GrandtotalSalAdv += forConvert;

                                PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CSalAdv1.Border = 15;
                                Secondtable.AddCell(CSalAdv1);
                            }

                            //31
                            if (uniformDed != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
                                totalUniforDed += forConvert;
                                GrandtotalUniforDed += forConvert;

                                PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CUnifDed1.Border = 15;
                                Secondtable.AddCell(CUnifDed1);
                            }

                            //32
                            if (otherDed != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
                                totalOtherdedn += forConvert;
                                GrandtotalOtherdedn += forConvert;

                                PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                COtherDed1.Border = 15;
                                Secondtable.AddCell(COtherDed1);
                            }

                            //33
                            if (canteenAdv != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
                                totalCanteenAdv += forConvert;
                                GrandtotalCanteenAdv += forConvert;

                                PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CCanteended.Border = 15;
                                Secondtable.AddCell(CCanteended);
                            }



                            //34
                            if (penalty != 0)
                            {
                                if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
                                totalPenalty += forConvert;
                                GrandtotalPenalty += forConvert;

                                PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPenalty1.Border = 15;
                                Secondtable.AddCell(CPenalty1);
                            }


                            //35
                            if (totalDeductions != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
                                totalDed += forConvert;
                                GrandtotalDed += forConvert;

                                PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CTotDed1.Border = 15;
                                Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                            }

                            //36
                            if (netpay != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
                                if (forConvert <= 0)
                                {
                                    forConvert = 0;
                                }
                                totalNetpay += forConvert;
                                GrandtotalNetpay += forConvert;
                                PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNetPay1.Border = 15;
                                Secondtable.AddCell(CNetPay1);
                            }

                            forConvert = 0;
                            if (dt.Rows[i]["pfempr"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["pfempr"].ToString()));
                            Grandpfempr += forConvert;


                            forConvert = 0;
                            if (dt.Rows[i]["esiempr"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["esiempr"].ToString()));
                            Grandesiempr += forConvert;

                        }


                    }
                    #endregion

                    #region Table Total values

                    SecondtableFooter = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtableFooter.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtableFooter.TotalWidth = 850f;
                    }
                    SecondtableFooter.LockedWidth = true;
                    float[] SecondFooterWidth = new float[] { };

                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 2f };
                    }

                    if (tableCells == 7)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion

                    SecondtableFooter.SetWidths(SecondFooterWidth);

                    //1
                    PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSNo.Border = 15;
                    SecondtableFooter.AddCell(FCSNo);
                    //2
                    PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpId1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpId1);
                    //3
                    PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpName1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpName1);
                    //4
                    PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpDesgn.Border = 15;
                    FCEmpDesgn.Colspan = 0;
                    SecondtableFooter.AddCell(FCEmpDesgn);

                    //5
                    if (dts != 0)
                    {
                        PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCNoOfDuties.Border = 15;
                        SecondtableFooter.AddCell(FCNoOfDuties);
                    }

                    //6
                    if (ots != 0)
                    {
                        PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCots.Border = 15;
                        SecondtableFooter.AddCell(FCots);
                    }

                    if (wos != 0)
                    {
                        PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCwos.Border = 15;
                        SecondtableFooter.AddCell(FCwos);
                    }

                    //8
                    if (nhs != 0)
                    {
                        PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCnhs.Border = 15;
                        SecondtableFooter.AddCell(FCnhs);
                    }

                    //6A
                    if (srate != 0)
                    {
                        PdfPCell FCSalrate = new PdfPCell(new Phrase(totalsrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCSalrate.Border = 15;
                        SecondtableFooter.AddCell(FCSalrate);
                    }

                    //7
                    if (basic != 0)
                    {
                        PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCBasic1.Border = 15;
                        SecondtableFooter.AddCell(FCBasic1);
                    }


                    //8
                    if (da != 0)
                    {
                        PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FDa.Border = 15;
                        SecondtableFooter.AddCell(FDa);
                    }


                    //9
                    if (hra != 0)
                    {

                        PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCHRA1.Border = 15;
                        SecondtableFooter.AddCell(FCHRA1);
                    }

                    //10
                    if (cca != 0)
                    {
                        PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCcca.Border = 15;
                        SecondtableFooter.AddCell(FCcca);
                    }

                    //11
                    if (conveyance != 0)
                    {
                        PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCConveyance.Border = 15;
                        SecondtableFooter.AddCell(FCConveyance);
                    }


                    //12
                    if (washallowance != 0)
                    {
                        PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCWa.Border = 15;
                        SecondtableFooter.AddCell(FCWa);
                    }

                    //13
                    if (otherallowance != 0)
                    {
                        PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCOa.Border = 15;
                        SecondtableFooter.AddCell(FCOa);
                    }


                    //14
                    if (leavewages != 0)
                    {
                        PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FLa.Border = 15;
                        SecondtableFooter.AddCell(FLa);
                    }

                    //15
                    if (gratuity != 0)
                    {
                        PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FGratuity.Border = 15;
                        SecondtableFooter.AddCell(FGratuity);
                    }

                    //16
                    if (bonus != 0)
                    {
                        PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Fbonus.Border = 15;
                        SecondtableFooter.AddCell(Fbonus);
                    }

                    //17
                    if (nfhs != 0)
                    {
                        PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FNfhs.Border = 15;
                        SecondtableFooter.AddCell(FNfhs);
                    }

                    //18
                    if (rc != 0)
                    {
                        PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FRc.Border = 15;
                        SecondtableFooter.AddCell(FRc);
                    }

                    //19
                    if (cs != 0)
                    {
                        PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCs.Border = 15;
                        SecondtableFooter.AddCell(FCs);
                    }


                    //20
                    if (gross != 0)
                    {
                        PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCGross1.Border = 15;
                        SecondtableFooter.AddCell(FCGross1);
                    }

                    //21
                    if (otamt != 0)
                    {
                        PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCotamt.Border = 15;
                        SecondtableFooter.AddCell(FCotamt);
                    }

                    if (wosamt != 0)
                    {
                        PdfPCell FCEwosamt = new PdfPCell(new Phrase(totalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCEwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCEwosamt.Border = 15;
                        SecondtableFooter.AddCell(FCEwosamt);
                    }



                    //26
                    if (nhsamt != 0)
                    {
                        PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCnhsamt.Border = 15;
                        SecondtableFooter.AddCell(FCnhsamt);
                    }
                    //22
                    if (incentivs != 0)
                    {
                        PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FIncentivs.Border = 15;
                        SecondtableFooter.AddCell(FIncentivs);
                    }


                    //23
                    if (pfonduties != 0)
                    {
                        PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCPF1.Border = 15;
                        SecondtableFooter.AddCell(FCPF1);
                    }

                    //24
                    if (esionduties != 0)
                    {
                        PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCESI1.Border = 15;
                        SecondtableFooter.AddCell(FCESI1);
                    }


                    //25
                    if (pfonot != 0)
                    {
                        PdfPCell FCPFonot = new PdfPCell(new Phrase(totalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCPFonot.Border = 15;
                        SecondtableFooter.AddCell(FCPFonot);
                    }

                    //26
                    if (esionot != 0)
                    {
                        PdfPCell FCESIonot = new PdfPCell(new Phrase(totalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCESIonot.Border = 15;
                        SecondtableFooter.AddCell(FCESIonot);
                    }

                    //27
                    if (Pf != 0)
                    {
                        PdfPCell FCPF = new PdfPCell(new Phrase(totalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCPF.Border = 15;
                        SecondtableFooter.AddCell(FCPF);
                    }

                    //28
                    if (Esi != 0)
                    {
                        PdfPCell FCES = new PdfPCell(new Phrase(totalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCES.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCES.Border = 15;
                        SecondtableFooter.AddCell(FCES);
                    }

                    //29
                    if (proftax != 0)
                    {
                        PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCProTax1.Border = 15;
                        SecondtableFooter.AddCell(FCProTax1);
                    }

                    //30
                    if (salAdvDed != 0)
                    {
                        PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCSalAdv1.Border = 15;
                        SecondtableFooter.AddCell(FCSalAdv1);
                    }

                    //31
                    if (uniformDed != 0)
                    {
                        PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCUnifDed1.Border = 15;
                        SecondtableFooter.AddCell(FCUnifDed1);
                    }

                    //32
                    if (otherDed != 0)
                    {
                        PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCOtherDed1.Border = 15;
                        SecondtableFooter.AddCell(FCOtherDed1);
                    }

                    //33
                    if (canteenAdv != 0)
                    {
                        PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCCanteended.Border = 15;
                        SecondtableFooter.AddCell(FCCanteended);
                    }


                    //34
                    if (penalty != 0)
                    {
                        PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FPenalty.Border = 15;
                        SecondtableFooter.AddCell(FPenalty);
                    }


                    //35
                    if (totalDeductions != 0)
                    {
                        PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCTotDed1.Border = 15;
                        SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                    }

                    //36
                    if (netpay != 0)
                    {
                        PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCNetPay1.Border = 15;
                        //FCNetPay1.Colspan = 2;
                        SecondtableFooter.AddCell(FCNetPay1);
                    }



                    #endregion

                    SecondtableGrandtotalFooter = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtableGrandtotalFooter.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtableGrandtotalFooter.TotalWidth = 850f;
                    }
                    SecondtableGrandtotalFooter.LockedWidth = true;
                    float[] SecondGrandtotalFooterWidth = new float[] { };
                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
                    }

                    if (tableCells == 7)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion
                    SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                    SecondtablecheckbyFooter = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtablecheckbyFooter.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtablecheckbyFooter.TotalWidth = 850f;
                    }
                    SecondtablecheckbyFooter.LockedWidth = true;
                    float[] SecondcheckbyFooterWidth = new float[] { };

                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 2f };
                    }

                    if (tableCells == 7)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion

                    SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

                    #region Table   Grand   Total  Footer

                    //1
                    PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSNo.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSNo);

                    //2
                    PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpId1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpId1);

                    //3
                    PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpName1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpName1);

                    //4
                    PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

                    //5
                    if (dts != 0)
                    {
                        PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCNoOfDuties.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
                    }

                    //6
                    if (ots != 0)
                    {
                        PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOts.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOts);
                    }

                    if (wos != 0)
                    {
                        PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCWos.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCWos);
                    }

                    //8
                    if (nhs != 0)
                    {
                        PdfPCell GFCnhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCnhs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCnhs);
                    }
                    //6A
                    if (srate != 0)
                    {
                        PdfPCell GFCsrate = new PdfPCell(new Phrase(GrandtotalSrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCsrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCsrate.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCsrate);
                    }


                    //7
                    if (basic != 0)
                    {
                        PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCBasic1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCBasic1);
                    }


                    //8
                    if (da != 0)
                    {
                        PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFDa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFDa);
                    }


                    //9
                    if (hra != 0)
                    {
                        PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCHRA1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCHRA1);
                    }

                    //10
                    if (cca != 0)
                    {
                        PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCcca.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCcca);
                    }

                    //11
                    if (conveyance != 0)
                    {
                        PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCConveyance.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCConveyance);
                    }


                    //12
                    if (washallowance != 0)
                    {
                        PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCWa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCWa);
                    }

                    //13
                    if (otherallowance != 0)
                    {
                        PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOa);
                    }

                    //14
                    if (leavewages != 0)
                    {
                        PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFLa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFLa);
                    }

                    //15
                    if (gratuity != 0)
                    {
                        PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFGratuity.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFGratuity);
                    }

                    //16
                    if (bonus != 0)
                    {
                        PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFbonus.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFbonus);
                    }


                    //17
                    if (nfhs != 0)
                    {
                        PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFNfhs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFNfhs);
                    }

                    //18
                    if (rc != 0)
                    {
                        PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFRc.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFRc);
                    }

                    //19
                    if (cs != 0)
                    {
                        PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCs);
                    }


                    //20
                    if (gross != 0)
                    {
                        PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCGross1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCGross1);
                    }

                    //21
                    if (otamt != 0)
                    {
                        PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOtamt.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOtamt);
                    }

                    if (wosamt != 0)
                    {
                        PdfPCell GFCwosamt = new PdfPCell(new Phrase(Grandtotalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCwosamt.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCwosamt);
                    }



                    //26
                    if (nhsamt != 0)
                    {
                        PdfPCell GFCNhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCNhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCNhsamt.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCNhsamt);
                    }

                    //22
                    if (incentivs != 0)
                    {
                        PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFIncentivs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFIncentivs);
                    }



                    //23
                    if (pfonduties != 0)
                    {
                        PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCPF1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCPF1);
                    }

                    //24
                    if (esionduties != 0)
                    {
                        PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCESI1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCESI1);
                    }

                    //25
                    if (pfonot != 0)
                    {
                        PdfPCell GFCPFonot = new PdfPCell(new Phrase(Grandtotalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCPFonot.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCPFonot);
                    }

                    //26
                    if (esionot != 0)
                    {
                        PdfPCell GFCESIonot = new PdfPCell(new Phrase(Grandtotalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCESIonot.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCESIonot);
                    }

                    //27
                    if (Pf != 0)
                    {
                        PdfPCell GFCPF = new PdfPCell(new Phrase(Grandtotalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCPF.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCPF);
                    }

                    //28
                    if (Esi != 0)
                    {
                        PdfPCell GFCESI = new PdfPCell(new Phrase(Grandtotalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCESI.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCESI.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCESI);
                    }


                    //29
                    if (proftax != 0)
                    {
                        PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCProTax1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCProTax1);
                    }

                    //30
                    if (salAdvDed != 0)
                    {
                        PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCSalAdv1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                    }

                    //31
                    if (uniformDed != 0)
                    {
                        PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCUnifDed1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
                    }

                    //32
                    if (otherDed != 0)
                    {
                        PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOtherDed1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
                    }


                    //33
                    if (canteenAdv != 0)
                    {
                        PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCCanteended.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCCanteended);
                    }

                    //34
                    if (penalty != 0)
                    {
                        PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFPenalty.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFPenalty);
                    }

                    //35
                    if (totalDeductions != 0)
                    {
                        PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCTotDed1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                    }

                    //36
                    if (netpay != 0)
                    {
                        PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCNetPay1.Border = 15;
                        //FCNetPay1.Colspan = 2;
                        SecondtablecheckbyFooter.AddCell(GFCNetPay1);
                    }


                    #endregion


                    #region   Footer Headings
                    //1
                    PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedbybr1.Border = 0;
                    FHCheckedbybr1.Rowspan = 0;
                    FHCheckedbybr1.Colspan = tableCells;
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    //2
                    PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedbr2.Border = 0;
                    FHApprovedbr2.Colspan = tableCells;

                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                    //1
                    PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FHCheckedby.Border = 0;
                    FHCheckedby.Colspan = tableCells;
                    SecondtablecheckbyFooter.AddCell(FHCheckedby);
                    //2
                    PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FHApprovedBy.Border = 0;
                    FHApprovedBy.PaddingTop = -5;
                    FHApprovedBy.Colspan = tableCells;
                    SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                    #endregion

                    document.Add(Secondtable);

                    if (nextpagerecordscount == targetpagerecors)
                    {
                        targetpagerecors = secondpagerecords;
                        document.Add(SecondtableFooter);
                        document.NewPage();
                        nextpagerecordscount = 0;
                        #region  Zero variables

                        totalNetpay = 0;
                        totalDuties = 0;
                        totalsrate = 0;
                        totalBasic = 0;
                        totalDA = 0;
                        totalHRA = 0;
                        totalCCA = 0;
                        totalConveyance = 0;
                        totalWA = 0;
                        totalOA = 0;
                        totalGross = 0;
                        totalPFondts = 0;
                        totalESIondts = 0;
                        totalProfTax = 0;
                        totalDed = 0;
                        totalSalAdv = 0;
                        totalUniforDed = 0;
                        totalCanteenAdv = 0;
                        totalOtherdedn = 0;
                        totalbonus = 0;
                        totalLw = 0;
                        totalGratuity = 0;
                        totalNfhs = 0;
                        totalRc = 0;
                        totalCs = 0;
                        totalIncentivs = 0;
                        totalPenalty = 0;

                        totalots = 0;
                        totalotamt = 0;
                        totalpfonots = 0;
                        totalesionots = 0;
                        totalpf = 0;
                        totalesi = 0;

                        #endregion
                    }
                }

                if (nextpagerecordscount >= 0)
                {
                    //document.Add(SecondtableFooter);
                    document.Add(SecondtableGrandtotalFooter);
                    document.Add(SecondtablecheckbyFooter);
                }


                document.SetPageSize(PageSize.A4);

                document.NewPage();

                Font boldFont = FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK);

                string SqlQryForTaxes = "select * from  Tbloptions ";
                DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;
                string SCPersent = "";
                if (DtTaxes.Rows.Count > 0)
                {
                    SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                }
                else
                {
                    lblResult.Text = "There Is No Tax Values For Generating Bills ";
                    return;
                }


                #region data from unibill

                string SelectBillNo = "Select convert(varchar(10),BillDt,103) as DtBill,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                float servicetx = 0; string Billno = ""; string BillDate = "";
                if (DtBilling.Rows.Count > 0)
                {
                    servicetx = Convert.ToSingle(DtBilling.Rows[0]["ServiceTax"].ToString());
                    Billno = DtBilling.Rows[0]["BillNo"].ToString();
                    BillDate = DtBilling.Rows[0]["DtBill"].ToString();
                }

                #endregion data from unibill

                PdfPTable tablelogo = new PdfPTable(2);
                tablelogo.TotalWidth = 500f;
                tablelogo.LockedWidth = true;
                float[] widtlogo = new float[] { 2f, 2f };
                tablelogo.SetWidths(widtlogo);

                PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                celll.Border = 0;
                celll.Colspan = 2;
                tablelogo.AddCell(celll);
                tablelogo.AddCell(celll);
                tablelogo.AddCell(celll);
                tablelogo.AddCell(celll);



                PdfPCell CInvoice = new PdfPCell(new Paragraph("INVOICE", FontFactory.GetFont(FontStyle, 14, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                CInvoice.HorizontalAlignment = 1;
                CInvoice.Border = 0;
                CInvoice.Colspan = 2;
                tablelogo.AddCell(CInvoice);

                tablelogo.AddCell(celll);


                document.Add(tablelogo);





                string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;



                PdfPTable address = new PdfPTable(2);
                address.TotalWidth = 500f;
                address.LockedWidth = true;
                float[] addreslogo = new float[] { 2f, 2f };
                address.SetWidths(addreslogo);

                PdfPTable tempTable1 = new PdfPTable(1);
                tempTable1.TotalWidth = 250f;
                tempTable1.LockedWidth = true;
                float[] tempWidth1 = new float[] { 1f };
                tempTable1.SetWidths(tempWidth1);




                PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cell11.Border = 0;
                tempTable1.AddCell(cell11);
                string addressData = "";

                addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientaddrhno.Border = 0;
                    tempTable1.AddCell(clientaddrhno);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientstreet.Border = 0;
                    tempTable1.AddCell(clientstreet);
                }


                addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientstreet.Border = 0;
                    tempTable1.AddCell(clientstreet);
                }


                addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientcolony.Colspan = 2;
                    clientcolony.Border = 0;
                    tempTable1.AddCell(clientcolony);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientcity.Colspan = 2;
                    clientcity.Border = 0;
                    tempTable1.AddCell(clientcity);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientstate.Colspan = 2;
                    clientstate.Border = 0;
                    tempTable1.AddCell(clientstate);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clietnpin.Colspan = 2;
                    clietnpin.Border = 0;
                    tempTable1.AddCell(clietnpin);
                }
                PdfPCell childTable1 = new PdfPCell(tempTable1);
                childTable1.Border = 0;
                childTable1.HorizontalAlignment = 0;
                address.AddCell(childTable1);

                PdfPTable tempTable2 = new PdfPTable(1);
                tempTable2.TotalWidth = 250f;
                tempTable2.LockedWidth = true;
                float[] tempWidth2 = new float[] { 1f };
                tempTable2.SetWidths(tempWidth2);

                //Blank Field for Space
                PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell12.Border = 0;
                tempTable2.AddCell(cell12);

                PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No : " + Billno, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell13.Border = 0;
                tempTable2.AddCell(cell13);

                PdfPCell cell14 = new PdfPCell(new Paragraph("Date : " + BillDate, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell14.Border = 0;
                tempTable2.AddCell(cell14);

                //PdfPCell cell15 = new PdfPCell(new Paragraph("REF NO : " + pono, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                //cell15.Border = 0;
                //tempTable2.AddCell(cell15);

                PdfPCell cell16 = new PdfPCell(new Paragraph("For the Month : " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cell16.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell16.Border = 0;
                tempTable2.AddCell(cell16);

                PdfPCell childTable2 = new PdfPCell(tempTable2);
                childTable2.Border = 0;
                childTable2.HorizontalAlignment = 0;
                address.AddCell(childTable2);
                address.AddCell(celll);


                document.Add(address);


                PdfPTable tabled = new PdfPTable(3);
                tabled.TotalWidth = 500f;//432f;
                tabled.LockedWidth = true;
                float[] widthd = new float[] { 6f, 1.5f, 2f };
                tabled.SetWidths(widthd);


                string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                       " clientid ='" + ddlclientid.SelectedValue + "'";
                DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                string strdescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                float SChrgValue = 0;

                if (DtServicecharge.Rows.Count > 0)
                {
                    SChrgValue = Convert.ToSingle(DtServicecharge.Rows[0]["servicecharge"].ToString());
                    strdescription = DtServicecharge.Rows[0]["Description"].ToString();

                }

                string fromdt = ""; string todate = ""; float pfwages = 0; float esiwages = 0; float Samt = 0; float TSchrg = 0; float ttotal = 0;


                if (dt.Rows.Count > 0)
                {
                    pfwages = Convert.ToSingle(dt.Rows[0]["pfwages"].ToString());
                    esiwages = Convert.ToSingle(dt.Rows[0]["esiwages"].ToString());

                }

                fromdt = txtfromdate.Text;
                todate = txttodate.Text;


                PdfPCell cellunitname = new PdfPCell(new Phrase("Unit Name : " + ddlCname.SelectedItem, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellunitname.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellunitname.Colspan = 1;
                cellunitname.Border = 0;
                cellunitname.PaddingTop = 8;
                cellunitname.PaddingBottom = 15;
                tabled.AddCell(cellunitname);



                PdfPCell cellbilldt = new PdfPCell(new Phrase("Bill From : " + fromdt + " to " + todate, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellbilldt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellbilldt.Colspan = 2;
                cellbilldt.Border = 0;
                cellbilldt.PaddingTop = 8;
                cellbilldt.PaddingBottom = 15;
                tabled.AddCell(cellbilldt);


                PdfPCell celldesc = new PdfPCell(new Phrase("DESCRIPTION ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                celldesc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                celldesc.Colspan = 0;
                celldesc.PaddingTop = 8;
                celldesc.PaddingBottom = 8;
                tabled.AddCell(celldesc);

                PdfPCell celldesc2 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                celldesc2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                celldesc2.Colspan = 0;
                celldesc2.PaddingTop = 8;
                celldesc2.PaddingBottom = 8;
                tabled.AddCell(celldesc2);


                PdfPCell cellamtdesc = new PdfPCell(new Phrase("AMOUNT", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellamtdesc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                cellamtdesc.Colspan = 0;
                cellamtdesc.PaddingBottom = 8;
                cellamtdesc.PaddingTop = 8;
                tabled.AddCell(cellamtdesc);

                string Fromdate = txtfromdate.Text;
                string Todate = txttodate.Text;


                PdfPCell celldescription = new PdfPCell(new Phrase(strdescription, FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                celldescription.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                celldescription.Colspan = 0;
                celldescription.PaddingBottom = 8;
                celldescription.PaddingTop = 8;
                tabled.AddCell(celldescription);

                PdfPCell cellonfield = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                cellonfield.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellonfield.Colspan = 0;
                cellonfield.PaddingBottom = 8;
                cellonfield.PaddingTop = 8;
                tabled.AddCell(cellonfield);

                Samt = GrandtotalGross + Grandtotalotamt;

                PdfPCell cellamtvalue = new PdfPCell(new Phrase(Samt.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellamtvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellamtvalue.Colspan = 0;
                cellamtvalue.PaddingBottom = 8;
                cellamtvalue.PaddingTop = 8;
                tabled.AddCell(cellamtvalue);

                if (Grandpfempr > 0)
                {
                    PdfPCell cellpf = new PdfPCell(new Phrase("Provident Fund @ 13.36 % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellpf.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellpf.Colspan = 0;
                    cellpf.PaddingBottom = 8;
                    cellpf.PaddingTop = 8;
                    tabled.AddCell(cellpf);


                    PdfPCell cellpfon = new PdfPCell(new Phrase(pfwages.ToString("#"), FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellpfon.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellpfon.Colspan = 0;
                    cellpfon.PaddingBottom = 8;
                    cellpfon.PaddingTop = 8;
                    tabled.AddCell(cellpfon);

                    PdfPCell cellpfvalue = new PdfPCell(new Phrase(Grandpfempr.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellpfvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellpfvalue.Colspan = 0;
                    cellpfvalue.PaddingTop = 8;
                    cellpfvalue.PaddingBottom = 8;
                    tabled.AddCell(cellpfvalue);

                }

                if (Grandesiempr > 0)
                {
                    PdfPCell cellesi = new PdfPCell(new Phrase("E.S.I @ 4.75 % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellesi.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellesi.Colspan = 0;
                    cellesi.PaddingBottom = 8;
                    cellesi.PaddingTop = 8;
                    tabled.AddCell(cellesi);

                    PdfPCell cellesion = new PdfPCell(new Phrase(esiwages.ToString("#"), FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellesion.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellesion.Colspan = 0;
                    cellesion.PaddingBottom = 8;
                    cellesion.PaddingTop = 8;
                    tabled.AddCell(cellesion);

                    PdfPCell cellesivalue = new PdfPCell(new Phrase(Grandesiempr.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellesivalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellesivalue.Colspan = 0;
                    cellesivalue.PaddingTop = 8;
                    cellesivalue.PaddingBottom = 8;
                    tabled.AddCell(cellesivalue);

                }

                TSchrg = Samt * SChrgValue / 100;
                ttotal = TSchrg + Samt;

                if (GrandtotalCs > 0)
                {
                    PdfPCell cellScharges = new PdfPCell(new Phrase("Service Charges @ " + SChrgValue + " % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellScharges.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellScharges.Colspan = 2;
                    cellScharges.PaddingBottom = 8;
                    cellScharges.PaddingTop = 8;
                    tabled.AddCell(cellScharges);


                    PdfPCell cellSchargevalue = new PdfPCell(new Phrase(TSchrg.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellSchargevalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellSchargevalue.Colspan = 0;
                    cellSchargevalue.PaddingTop = 8;
                    cellSchargevalue.PaddingBottom = 8;
                    tabled.AddCell(cellSchargevalue);

                }

                PdfPCell cellSTotal = new PdfPCell(new Phrase("SUB TOTAL ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellSTotal.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellSTotal.Colspan = 2;
                cellSTotal.PaddingBottom = 8;
                cellSTotal.PaddingTop = 8;
                tabled.AddCell(cellSTotal);



                float STotal = 0;

                STotal = TSchrg + Grandpfempr + Samt + Grandesiempr;

                PdfPCell cellSTotalvalue = new PdfPCell(new Phrase(STotal.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellSTotalvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellSTotalvalue.Colspan = 0;
                cellSTotalvalue.PaddingTop = 8;
                cellSTotalvalue.PaddingBottom = 8;
                tabled.AddCell(cellSTotalvalue);
                float STax = 0;

                if (servicetx > 0)
                {
                    PdfPCell cellservtax = new PdfPCell(new Phrase("Service Tax @ " + SCPersent + " % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellservtax.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellservtax.Colspan = 0;
                    cellservtax.PaddingBottom = 8;
                    cellservtax.PaddingTop = 8;
                    tabled.AddCell(cellservtax);

                    PdfPCell cellservtaxon = new PdfPCell(new Phrase(ttotal.ToString("#"), FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellservtaxon.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellservtaxon.Colspan = 0;
                    cellservtaxon.PaddingBottom = 8;
                    cellservtaxon.PaddingTop = 8;
                    tabled.AddCell(cellservtaxon);



                    STax = (ttotal * servicetx / 100);

                    PdfPCell cellservtaxvalue = new PdfPCell(new Phrase(STax.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellservtaxvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellservtaxvalue.Colspan = 0;
                    cellservtaxvalue.PaddingTop = 8;
                    cellservtaxvalue.PaddingBottom = 8;
                    tabled.AddCell(cellservtaxvalue);

                }



                float GrTotal = 0;
                GrTotal = STax + STotal;

                PdfPCell cellcgtotal = new PdfPCell(new Phrase("GRAND TOTAL", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellcgtotal.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellcgtotal.PaddingTop = 8;
                cellcgtotal.PaddingBottom = 8;
                cellcgtotal.Colspan = 2;
                tabled.AddCell(cellcgtotal);



                PdfPCell cellcamt = new PdfPCell(new Phrase(GrTotal.ToString("#,##") + ".00", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellcamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellcamt.PaddingTop = 8;
                cellcamt.PaddingBottom = 8;
                cellcamt.Colspan = 0;
                tabled.AddCell(cellcamt);

                string gtotal = NumberToEnglish.Instance.changeNumericToWords(GrTotal.ToString("#"));

                PdfPCell cellamtinwords = new PdfPCell(new Phrase("(Rupees " + gtotal.Trim() + " Only)", FontFactory.GetFont(FontStyle, 11, Font.BOLDITALIC, BaseColor.BLACK)));
                cellamtinwords.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellamtinwords.Colspan = 3;
                cellamtinwords.PaddingTop = 8;
                cellamtinwords.PaddingBottom = 8;
                tabled.AddCell(cellamtinwords);




                if (Servicetax.Trim().Length > 0)
                {
                    PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellc6.Colspan = 7;
                    cellc6.BorderWidthBottom = 0;
                    cellc6.BorderWidthLeft = .5f;
                    cellc6.BorderWidthTop = .5f;
                    cellc6.BorderWidthRight = .5f;
                    //cellc6.Border = 0;
                    tabled.AddCell(cellc6);
                }



                if (PANNO.Trim().Length > 0)
                {
                    PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellc7.Colspan = 7;
                    cellc7.BorderWidthBottom = .5f;
                    cellc7.BorderWidthLeft = .5f;
                    cellc7.BorderWidthTop = .5f;
                    cellc7.BorderWidthRight = .5f;
                    //cellc7.Border = 0;
                    tabled.AddCell(cellc7);
                }
                if (PFNo.Trim().Length > 0)
                {
                    PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Pfno.Colspan = 7;
                    Pfno.BorderWidthBottom = .5f;
                    Pfno.BorderWidthLeft = .5f;
                    Pfno.BorderWidthTop = 0;
                    Pfno.BorderWidthRight = .5f;
                    //Pfno.Border = 0;
                    tabled.AddCell(Pfno);
                }

                if (Esino.Trim().Length > 0)
                {
                    PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    ESino.Colspan = 7;
                    ESino.BorderWidthBottom = .5f;
                    ESino.BorderWidthLeft = .5f;
                    ESino.BorderWidthTop = 0;
                    ESino.BorderWidthRight = .5f;
                    //ESino.Border = 0;
                    tabled.AddCell(ESino);
                }

                if (PTno.Trim().Length > 0)
                {
                    PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Ptno.Colspan = 7;
                    Ptno.BorderWidthBottom = .5f;
                    Ptno.BorderWidthLeft = .5f;
                    Ptno.BorderWidthTop = 0;
                    Ptno.BorderWidthRight = .5f;
                    //Ptno.Border = 0;
                    tabled.AddCell(Ptno);
                }

                PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellspace.Border = 0;
                cellspace.Colspan = 3;
                tabled.AddCell(cellspace);
                //tabled.AddCell(cellspace);

                PdfPCell note = new PdfPCell(new Phrase("Terms & Conditions:", FontFactory.GetFont(FontStyle, 9, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                note.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note.Colspan = 3;
                note.Border = 0;
                tabled.AddCell(note);

                PdfPCell note1 = new PdfPCell(new Phrase("1. Bill will be treated as correct, if no error reported within 3 days from the date of submission.", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note1.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                note1.Colspan = 3;
                note1.Border = 0;
                tabled.AddCell(note1);

                PdfPCell note2 = new PdfPCell(new Phrase("2. Bill should be cleared with in a week time from the date of submission. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note2.Colspan = 3;
                note2.Border = 0;
                tabled.AddCell(note2);

                PdfPCell note3 = new PdfPCell(new Phrase("3. Payment should be made along with payment advice. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note3.Colspan = 3;
                note3.Border = 0;
                tabled.AddCell(note3);

                PdfPCell note4 = new PdfPCell(new Phrase("4. Bill shall not be deducted without prior acceptance in writing. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note4.Colspan = 3;
                note4.Border = 0;
                tabled.AddCell(note4);

                PdfPCell note5 = new PdfPCell(new Phrase("5. Payment shall be made through crossed cheque in favour of " + cmpname + " Payable at Hyderabad.", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note5.Colspan = 3;
                note5.Border = 0;
                tabled.AddCell(note5);

                PdfPCell note6 = new PdfPCell(new Phrase("6. Delayed payments will attract interest 24% per annum.  ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note6.Colspan = 3;
                note6.Border = 0;
                tabled.AddCell(note6);

                PdfPCell note7 = new PdfPCell(new Phrase("7. Bill received with supported documents.  ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note7.Colspan = 3;
                note7.Border = 0;
                tabled.AddCell(note7);

                PdfPCell cellc41 = new PdfPCell(new Phrase("For " + cmpname, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellc41.Colspan = 3;
                cellc41.Border = 0;
                cellc41.PaddingTop = 10;
                tabled.AddCell(cellc41);

                PdfPCell cellc4 = new PdfPCell(new Phrase("   Receiver's signature with stamp                                                                                  Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellc4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellc4.Colspan = 3;
                cellc4.Border = 0;
                cellc4.PaddingTop = 30;
                tabled.AddCell(cellc4);



                document.Add(tabled);

                document.Close();
                if (nextpagehasPages)
                {
                    string filename = ddlCname.SelectedItem.Text + " " + "Bill-Invoice.pdf";
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename);
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }

        }

        #region New code for old bill Generation on 10/03/2014 by venkat

        public int GetMonthBasedOnSelectionDateorMonth()
        {

            var testDate = 0;
            string EnteredDate = "";

            #region Validation

            if (txtmonth.Text.Trim().Length > 0)
            {

                try
                {

                    testDate = GlobalData.Instance.CheckEnteredDate(txtmonth.Text);
                    if (testDate > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return 0;
                    }
                    EnteredDate = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb")).ToString();
                }
                catch (Exception ex)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                    return 0;
                }
            }
            #endregion


            #region  Month Get Based on the Control Selection
            int month = 0;
            if (Chk_Month.Checked == false)
            {
                month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                //return month;
            }
            if (Chk_Month.Checked == true)
            {
                DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                month = Timings.Instance.GetIdForEnteredMOnth(date);
                //return month;
            }
            return month;

            #endregion
        }

        public string GetMonthOfYear()
        {
            string MonthYear = "";

            int month = GetMonthBasedOnSelectionDateorMonth();
            if (month.ToString().Length == 4)
            {

                MonthYear = "20" + month.ToString().Substring(2, 2);

            }
            if (month.ToString().Length == 3)
            {

                MonthYear = "20" + month.ToString().Substring(1, 2);

            }
            return MonthYear;
        }

        protected int GetMonth(string NameOfmonth)
        {
            int month = -1;
            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            for (int i = 0; i < monthName.Length; i++)
            {
                if (monthName[i].CompareTo(NameOfmonth) == 0)
                {
                    month = i + 1;
                    break;
                }
            }
            return month;
        }

        public string GetMonthName()
        {
            string monthname = string.Empty;
            int payMonth = 0;
            DateTimeFormatInfo mfi = new DateTimeFormatInfo();

            if (Chk_Month.Checked == false)
            {
                payMonth = GetMonth(ddlmonth.SelectedValue);
                monthname = mfi.GetMonthName(payMonth).ToString();
            }
            if (Chk_Month.Checked == true)
            {

                DateTime date = Convert.ToDateTime(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                monthname = mfi.GetMonthName(date.Month).ToString();
                //payMonth = GetMonth(monthname);
            }
            return monthname;
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {


            var password = string.Empty;
            var SPName = string.Empty;
            password = txtPassword.Text.Trim();
            string sqlPassword = "select password from IouserDetails where password='" + txtPassword.Text + "'";
            DataTable dtpassword = config.ExecuteAdaptorAsyncWithQueryParams(sqlPassword).Result;
            if (dtpassword.Rows.Count == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Invalid Password');", true);
                return;
            }

            #region Validation

            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            txtbilldate.Text = string.Empty;
            txtfromdate.Text = string.Empty;
            txttodate.Text = string.Empty;
            lblbillnolatest.Text = string.Empty;
            txtmonth.Text = string.Empty;
            ddlmonth.SelectedIndex = 0;
            txtduedate.Text = string.Empty;
            ClearExtraDataForBilling();
            ClearData();

            //if (ddlclientid.SelectedIndex == 0)
            //{
            //    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Select The client Id');", true);
            //    Chk_Month.Checked = false;
            //    return;
            //}

            #endregion

            Chk_Month.Checked = true;

            if (Chk_Month.Checked)
            {
                txtmonth.Visible = true;
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = false;

            }

        }

        protected void btnClose_Click(object sender, EventArgs e)
        {
            modelLogindetails.Hide();
            Chk_Month.Checked = false;
            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            txtbilldate.Text = string.Empty;
            txtfromdate.Text = string.Empty;
            txttodate.Text = string.Empty;
            lblbillnolatest.Text = string.Empty;
            txtmonth.Text = string.Empty;
            ddlmonth.SelectedIndex = 0;
            txtduedate.Text = string.Empty;
            ClearExtraDataForBilling();
            ClearData();
            if (Chk_Month.Checked == false)
            {
                txtmonth.Visible = false;
                txtmonth.Text = "";
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = true;
            }
        }

        #endregion

        protected void ddlType_OnSelectedIndexChanged(object sender, EventArgs e)
        {

            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            EnabledFields();
            ClearData();
            if (Chk_Month.Checked == true)
            {
                if (ddlType.SelectedIndex == 0)
                {
                    if (txtmonth.Text.Trim().Length == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Select Month');", true);
                        return;
                    }
                }
            }
            else
            {
                if (ddlType.SelectedIndex == 0)
                {
                    if (ddlmonth.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Select Month');", true);
                        return;
                    }
                }
            }

            ClearExtraDataForBilling();

            checkExtraData.Checked = false;
            txtbillno.Text = "";
            txtMachinery.Text = "";
            txtMaterialcost.Text = "";
            txtMaterial.Text = "";
            txtMaterial.Text = "";
            txtElectical.Text = "";
            txtextraonevalue.Text = "";
            txtextratwotitle.Text = "";
            txtextratwovalue.Text = "";
            txtdiscount.Text = "";
            txtDiscounts.Text = "";
            txtdiscounttwotitle.Text = "";
            txtdiscounttwovalue.Text = "";
            // ddlmonth.SelectedIndex = 0;

            rdbcreatebill.Checked = true;
            rdbmodifybill.Checked = false;
            string BillType = "";
            bool SelectAll = false;
            int month = 0;
            if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2 || ddlType.SelectedIndex == 3)
            {
                btnAddNewRow.Visible = true;
                btnCalculateTotals.Visible = true;
                lblbilltype.Visible = true;
                lblManualBillNo.Visible = true;
                ddlMBBillnos.Visible = true;
                rdbcreatebill.Visible = true;
                rdbmodifybill.Visible = true;
                lblServiceCharges.Enabled = true;
                lbltotal.Visible = true;
                lblTotalResources.Visible = true;
                lblgrandtotalss.Visible = true;
                lblGrandTotal.Visible = true;
                checkExtraData.Visible = true;
                ddlMBBillnos.Items.Clear();
                ddlMBBillnos.Items.Insert(0, "--Select--");

                chkexcludelist.Visible = false;
                chkalllist.Visible = false;
                chklistformanual.Visible = true;
                BillType = "Manual";
                SelectAll = false;
                if (chklistformanual.Checked == true)
                    SelectAll = true;
                month = GetMonthBasedOnSelectionDateorMonth();
                LoadClientIDBasedonMonth(month, BillType, SelectAll, false);

                PnlMaterialImport.Visible = true;
            }

            else if (ddlType.SelectedIndex == 0)
            {
                btnAddNewRow.Visible = true;
                btnCalculateTotals.Visible = false;
                lblbilltype.Visible = false;
                lblManualBillNo.Visible = false;
                ddlMBBillnos.Visible = false;
                rdbcreatebill.Visible = false;
                rdbmodifybill.Visible = false;
                lbltotal.Visible = true;
                lblTotalResources.Visible = true;
                lblgrandtotalss.Visible = true;
                lblGrandTotal.Visible = true;
                checkExtraData.Visible = true;
                btncleardata.Visible = false;
                chkexcludelist.Visible = true;
                chkalllist.Visible = true;
                chklistformanual.Visible = false;
                SelectAll = false;
                if (chkalllist.Checked == true)
                    SelectAll = true;

                bool excludeList = false;
                if (chkexcludelist.Checked == true)
                    excludeList = false;
                BillType = "Normal";
                month = GetMonthBasedOnSelectionDateorMonth();
                LoadClientIDBasedonMonth(month, BillType, SelectAll, excludeList);
                PnlMaterialImport.Visible = false;

            }

            TxtservicechrgPrc.Visible = false;
            TxtServiceTaxPrc.Visible = false;
            TxtSBCESSPrc.Visible = false;
            TxtKKCESSPrc.Visible = false;
            TxtCESSPrc.Visible = false;
            TxtSheCESSPrc.Visible = false;
            lblServiceCharges.Enabled = false;
            btninvoiceemp.Visible = false;
            loadDesignations();

        }

        public void EnabledFields()
        {
            try
            {
                for (int i = 0; i < gvClientBilling.Rows.Count; i++)
                {
                    TextBox lbldesgn = gvClientBilling.Rows[i].FindControl("lbldesgn") as TextBox;
                    TextBox txtHSNNumber = gvClientBilling.Rows[i].FindControl("txtHSNNumber") as TextBox;
                    TextBox lblnoofemployees = gvClientBilling.Rows[i].FindControl("lblnoofemployees") as TextBox;
                    TextBox lblNoOfDuties = gvClientBilling.Rows[i].FindControl("lblNoOfDuties") as TextBox;
                    TextBox lblpayrate = gvClientBilling.Rows[i].FindControl("lblpayrate") as TextBox;
                    TextBox txtNewPayRate = gvClientBilling.Rows[i].FindControl("txtNewPayRate") as TextBox;
                    TextBox lblda = gvClientBilling.Rows[i].FindControl("lblda") as TextBox;
                    TextBox lblAmount = gvClientBilling.Rows[i].FindControl("lblAmount") as TextBox;
                    TextBox lblCGSTAmount = gvClientBilling.Rows[i].FindControl("lblCGSTAmount") as TextBox;
                    TextBox lblSGSTAmount = gvClientBilling.Rows[i].FindControl("lblSGSTAmount") as TextBox;
                    TextBox lblIGSTAmount = gvClientBilling.Rows[i].FindControl("lblIGSTAmount") as TextBox;
                    TextBox lblCGSTPrc = gvClientBilling.Rows[i].FindControl("lblCGSTPrc") as TextBox;
                    TextBox lblSGSTPrc = gvClientBilling.Rows[i].FindControl("lblSGSTPrc") as TextBox;
                    TextBox lblIGSTPrc = gvClientBilling.Rows[i].FindControl("lblIGSTPrc") as TextBox;
                    TextBox lblTotalTaxmount = gvClientBilling.Rows[i].FindControl("lblTotalTaxmount") as TextBox;
                    TextBox txtUOM = gvClientBilling.Rows[i].FindControl("txtUOM") as TextBox;
                    TextBox txtempname = gvClientBilling.Rows[i].FindControl("txtempname") as TextBox;
                    switch (ddlType.SelectedIndex)
                    {
                        case 1:
                            lbldesgn.Enabled = true;
                            lblnoofemployees.Enabled = true;
                            txtHSNNumber.Enabled = true;
                            lblNoOfDuties.Enabled = true;
                            lblpayrate.Enabled = true;
                            txtNewPayRate.Enabled = false;
                            lblda.Enabled = true;
                            lblAmount.Enabled = true;
                            lblGrandTotal.Enabled = true;
                            lblSheCESS.Enabled = true;
                            lblCESS.Enabled = true;
                            lblKKCESS.Enabled = true;
                            lblSBCESS.Enabled = true;
                            lblServiceTax.Enabled = true;
                            lblTotalResources.Enabled = true;
                            TxtservicechrgPrc.Enabled = true;
                            TxtservicechrgPrc.Visible = true;
                            lblServiceCharges.Visible = true;
                            lblServiceCharges.Enabled = true;
                            TxtServiceTaxPrc.Enabled = true;
                            TxtSBCESSPrc.Enabled = true;
                            TxtKKCESSPrc.Enabled = true;
                            TxtCESSPrc.Enabled = true;
                            TxtSheCESSPrc.Enabled = true;
                            lblServiceChargeTitle.Visible = true;
                            btnFreeze.Visible = false;
                            lblCGSTAmount.Enabled = false;
                            lblSGSTAmount.Enabled = false;
                            lblIGSTAmount.Enabled = false;
                            lblCGSTPrc.Enabled = false;
                            lblSGSTPrc.Enabled = false;
                            lblIGSTPrc.Enabled = false;
                            lblTotalTaxmount.Enabled = false;
                            // txtHSNNumber.Enabled = false;
                            txtUOM.Enabled = false;
                            btninvMaterial.Visible = false;
                            btninvoiceemp.Visible = false;
                            #region for GST as on 16-6-2017 by swathi

                            lblCGST.Enabled = true;
                            lblSGST.Enabled = true;
                            lblIGST.Enabled = true;
                            TxtIGSTPrc.Enabled = true;
                            TxtSGSTPrc.Enabled = true;
                            TxtCGSTPrc.Enabled = true;

                            #endregion for GST as on 16-6-2017

                            break;
                        case 2:
                            lbldesgn.Enabled = true;
                            lblnoofemployees.Enabled = true;
                            lblNoOfDuties.Enabled = true;
                            txtHSNNumber.Enabled = true;
                            lblpayrate.Enabled = true;
                            lblda.Enabled = true;
                            lblAmount.Enabled = true;
                            txtNewPayRate.Enabled = true;
                            lblGrandTotal.Enabled = true;
                            lblSheCESS.Enabled = true;
                            lblCESS.Enabled = true;
                            lblKKCESS.Enabled = true;
                            lblSBCESS.Enabled = true;
                            lblServiceTax.Enabled = true;
                            lblTotalResources.Enabled = true;
                            TxtservicechrgPrc.Enabled = true;
                            TxtServiceTaxPrc.Enabled = true;
                            lblServiceCharges.Visible = true;
                            lblServiceCharges.Enabled = true;
                            TxtSBCESSPrc.Enabled = true;
                            TxtKKCESSPrc.Enabled = true;
                            TxtCESSPrc.Enabled = true;
                            TxtSheCESSPrc.Enabled = true;
                            lblServiceChargeTitle.Visible = true;

                            btnFreeze.Visible = false;
                            lblCGSTAmount.Enabled = false;
                            lblSGSTAmount.Enabled = false;
                            lblIGSTAmount.Enabled = false;
                            lblCGSTPrc.Enabled = false;
                            lblSGSTPrc.Enabled = false;
                            lblIGSTPrc.Enabled = false;
                            lblTotalTaxmount.Enabled = false;
                            //txtHSNNumber.Enabled = false;
                            txtUOM.Enabled = false;
                            btninvMaterial.Visible = false;

                            #region for GST as on 16-6-2017 by swathi

                            lblCGST.Enabled = true;
                            lblSGST.Enabled = true;
                            lblIGST.Enabled = true;
                            TxtIGSTPrc.Enabled = true;
                            TxtSGSTPrc.Enabled = true;
                            TxtCGSTPrc.Enabled = true;
                            lblCess1.Enabled = true;
                            TxtCess1Prc.Enabled = true;
                            lblCess2.Enabled = true;
                            TxtCess2Prc.Enabled = true;

                            #endregion for GST as on 16-6-2017

                            break;
                        case 3:
                            lbldesgn.Enabled = true;
                            lblnoofemployees.Enabled = true;
                            lblNoOfDuties.Enabled = true;
                            lblpayrate.Enabled = true;
                            txtNewPayRate.Enabled = false;
                            lblda.Enabled = true;
                            lblAmount.Enabled = true;
                            lblGrandTotal.Enabled = true;
                            lblSheCESS.Enabled = true;
                            lblCESS.Enabled = true;
                            lblKKCESS.Enabled = true;
                            lblSBCESS.Enabled = true;
                            lblServiceTax.Enabled = true;
                            lblTotalResources.Enabled = true;
                            TxtservicechrgPrc.Enabled = true;
                            TxtservicechrgPrc.Visible = true;
                            lblServiceCharges.Enabled = true;
                            lblServiceCharges.Visible = true;
                            TxtServiceTaxPrc.Enabled = true;
                            TxtSBCESSPrc.Enabled = true;
                            TxtKKCESSPrc.Enabled = true;
                            TxtCESSPrc.Enabled = true;
                            TxtSheCESSPrc.Enabled = true;
                            lblServiceChargeTitle.Visible = true;
                            btnFreeze.Visible = false;
                            lblCGSTAmount.Enabled = true;
                            lblSGSTAmount.Enabled = true;
                            lblIGSTAmount.Enabled = true;
                            lblCGSTPrc.Enabled = true;
                            lblSGSTPrc.Enabled = true;
                            lblIGSTPrc.Enabled = true;
                            lblTotalTaxmount.Enabled = true;
                            txtHSNNumber.Enabled = true;
                            txtUOM.Enabled = true;
                            btninvMaterial.Visible = true;

                            #region for GST as on 16-6-2017 by swathi

                            lblCGST.Enabled = true;
                            lblSGST.Enabled = true;
                            lblIGST.Enabled = true;
                            TxtIGSTPrc.Enabled = true;
                            TxtSGSTPrc.Enabled = true;
                            TxtCGSTPrc.Enabled = true;

                            #endregion for GST as on 16-6-2017
                            break;
                        default:
                            lbldesgn.Enabled = false;
                            lblnoofemployees.Enabled = false;
                            lblNoOfDuties.Enabled = false;
                            lblpayrate.Enabled = false;
                            lblda.Enabled = false;
                            lblAmount.Enabled = false;
                            txtNewPayRate.Enabled = false;
                            lblGrandTotal.Enabled = false;
                            lblSheCESS.Enabled = false;
                            lblCESS.Enabled = false;
                            lblKKCESS.Enabled = false;
                            lblSBCESS.Enabled = false;
                            lblServiceTax.Enabled = false;
                            lblTotalResources.Enabled = false;
                            TxtservicechrgPrc.Enabled = false;
                            TxtServiceTaxPrc.Enabled = false;
                            TxtSBCESSPrc.Enabled = false;
                            TxtKKCESSPrc.Enabled = false;
                            TxtCESSPrc.Enabled = false;
                            TxtSheCESSPrc.Enabled = false;
                            lblServiceChargeTitle.Visible = true;
                            lblCGSTAmount.Enabled = false;
                            lblSGSTAmount.Enabled = false;
                            lblIGSTAmount.Enabled = false;
                            lblCGSTPrc.Enabled = false;
                            lblSGSTPrc.Enabled = false;
                            lblIGSTPrc.Enabled = false;
                            lblTotalTaxmount.Enabled = false;
                            txtHSNNumber.Enabled = true;
                            txtUOM.Enabled = false;
                            btninvMaterial.Visible = false;
                            txtempname.Visible = false;
                            btninvoiceemp.Visible = false;
                            #region for GST as on 16-6-2017 by swathi

                            lblCGST.Enabled = false;
                            lblSGST.Enabled = false;
                            lblIGST.Enabled = false;
                            TxtIGSTPrc.Enabled = false;
                            TxtSGSTPrc.Enabled = false;
                            TxtCGSTPrc.Enabled = false;

                            #endregion for GST as on 16-6-2017

                            break;
                    }

                }
            }
            catch (Exception ex)
            {

            }

        }

        protected void ddlMBBillnos_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (rdbmodifybill.Checked == false)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Select Bill Type Modify');", true);
                ddlMBBillnos.SelectedIndex = 0;
            }
            else
            {

                DisplayDataInGridManual();
                EnabledFields();
            }
        }

        protected void DisplayDataInGridManual()
        {

            lblamtinwords.Text = "";
            try
            {
                #region Variable Declaration
                ClearData();
                int month = 0;

                #endregion

                #region  Select Month

                month = GetMonthBasedOnSelectionDateorMonth();

                string monthval = "";
                string yearval = "";
                string monthreports = "";

                DateTime firstday = DateTime.Now;


                if (month.ToString().Length == 3)
                {
                    monthval = month.ToString().Substring(0, 1);
                    yearval = "20" + month.ToString().Substring(1, 2);

                }
                else //if (monthreports.Length == 4)
                {
                    monthval = month.ToString().Substring(0, 2);
                    yearval = "20" + month.ToString().Substring(2, 2);
                }

                firstday = GlobalData.Instance.GetFirstDayMonth(int.Parse(yearval), int.Parse(monthval));




                #endregion

                #region Empty And Assign Data To Gridview
                lbltotalamount.Text = "";
                DataTable Dtunit = null;
                gvClientBilling.DataSource = Dtunit;
                gvClientBilling.DataBind();

                #endregion


                #region  Begin Get Contract Id Based on The Last Day

                DateTime DtLastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }
                var ContractID = "";
                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                HtGetContractID.Add("@LastDay", DtLastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();

                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                    return;
                }

                #endregion  End Get Contract Id Based on The Last Day


                #region New Coding For Manual Billing

                var query = @"select 
                             Ubb.Designation,
                             Ubb.BasicDA as BasicDa,
                             ISNULL(Ubb.NoofEmps,0) as NoofEmps,
                             ISNULL(Ubb.DutyHours,0) as DutyHrs,
                             Round(Ubb.PayRate,2) as payrate,  
                             Ubb.PayRateType as paytype,
                             Ubb.monthlydays,
                             Ubb.DutyHours,
                             Ubb.OTAmount,                            
                             Ubb.Totalamount,
                             Ubb.Remarks, 
                             Ubb.Description,
                             isnull( Ubb.NewPayRate,0) as NewPayRate,
                             ISNULL(cd.Servicecharge,0) as ServiceCharge,
                             cd.NoOfDays as NoOfDayscd ,
                             mub.ServiceChrg as ServiceChrg,
                             isnull(ubb.otamount,0) as otamount,
                             mub.BillDt as BillDate,'' as designid,mub.remarks as BillRemarks,'' as type,ubb.noofdays as noofdays, HSNNumber ,isnull(GSTPer,0) as GSTPer,UOM,
                            ubb.CGSTPrc,ubb.CGSTAmt,ubb.SGSTPrc,ubb.SGSTAmt,ubb.IGSTPrc,ubb.IGSTAmt,TotalTaxAmount,'' as Extra,isnull(EmpName,'') as Location,isnull(Storecode,'') Storecode
                              
                    from MUnitBillBreakup as Ubb 
                    inner join Contracts cd on cd.ClientID = ubb.UnitId inner join MUnitBill mub on Ubb.UnitId=mub.UnitId and Ubb.MunitidBillno=mub.Billno
                    where Ubb.unitid ='" + ddlclientid.SelectedValue + "' and Ubb.month=" + month + " and Ubb.MunitidBillno='" + ddlMBBillnos.SelectedValue
                            + "' and cd.contractid='" + ContractID + "' order by ubb.sino";

                //Group by  Ubb.UnitId, Ubb.Designation,Ubb.BasicDA, Ubb.NoofEmps,Ubb.DutyHours,Ubb.monthlydays,Ubb.PayRate,Ubb.PayRateType,Ubb.DutyHours,Ubb.otamount,Ubb.Remarks,Ubb.Description,cd.NoOfDays, mub.ServiceChrg,mub.BillDt,cd.ServiceCharge,Ubb.Totalamount";

                DataTable DtForUBB = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;


                var SumTotal = @"select sum(isnull(Totalamount,0)) as Total from  MUnitBillBreakup where unitid ='" + ddlclientid.SelectedValue + "' and month=" + month + " and MunitidBillno='" + ddlMBBillnos.SelectedValue
                            + "'";

                DataTable DtForSumUBB = config.ExecuteAdaptorAsyncWithQueryParams(SumTotal).Result;


                if (DtForUBB.Rows.Count > 0)
                {

                    gvClientBilling.DataSource = DtForUBB;
                    gvClientBilling.DataBind();


                    btnAddNewRow.Visible = true;
                    btnCalculateTotals.Visible = true;

                    for (int i = 0; i < DtForUBB.Rows.Count; i++)
                    {
                        if (ddlType.SelectedIndex == 0 || ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {

                            if (ddlType.SelectedIndex == 0)
                            {
                                gvClientBilling.Columns[3].Visible = true;
                                gvClientBilling.Columns[7].Visible = false;
                                btninvoiceemp.Visible = false;
                            }
                            else if (ddlType.SelectedIndex == 1)
                            {
                                gvClientBilling.Columns[1].Visible = true;
                                gvClientBilling.Columns[3].Visible = true;
                                gvClientBilling.Columns[7].Visible = false;
                                btninvoiceemp.Visible = false;

                            }
                            else if (ddlType.SelectedIndex == 2)
                            {
                                gvClientBilling.Columns[3].Visible = true;
                                gvClientBilling.Columns[7].Visible = true;

                            }


                            gvClientBilling.Columns[12].Visible = false;
                            gvClientBilling.Columns[13].Visible = false;
                            gvClientBilling.Columns[14].Visible = false;
                            gvClientBilling.Columns[15].Visible = false;
                            gvClientBilling.Columns[16].Visible = false;

                        }

                        else
                        {
                            gvClientBilling.Columns[3].Visible = true;
                            gvClientBilling.Columns[7].Visible = false;
                            gvClientBilling.Columns[12].Visible = true;
                            gvClientBilling.Columns[13].Visible = true;
                            gvClientBilling.Columns[14].Visible = true;
                            gvClientBilling.Columns[15].Visible = true;
                            gvClientBilling.Columns[16].Visible = true;


                        }

                        gvClientBilling.Columns[8].Visible = true;
                        gvClientBilling.Columns[9].Visible = true;

                        DropDownList Nods = gvClientBilling.Rows[i].FindControl("ddlnod") as DropDownList;

                        if (Nods != null)
                        {

                            float noofdays = float.Parse(DtForUBB.Rows[i]["noofdays"].ToString());
                            Nods.SelectedValue = DtForUBB.Rows[i]["noofdays"].ToString();

                        }


                        DropDownList Dtype = gvClientBilling.Rows[i].FindControl("ddldutytype") as DropDownList;

                        if (Dtype != null)
                        {

                            int amt = int.Parse(DtForUBB.Rows[i]["PayType"].ToString());
                            Dtype.SelectedValue = DtForUBB.Rows[i]["PayType"].ToString();

                        }

                        TextBox totalAmt = gvClientBilling.Rows[i].FindControl("lblAmount") as TextBox;
                        totalAmt.Text = DtForUBB.Rows[i]["Totalamount"].ToString();


                    }
                    ViewState["DTDefaultManual"] = DtForUBB;

                    //lblServiceCharges.Text=DtForUBB.Rows[0]["ServiceChrg"].ToString();
                    if (DtForSumUBB.Rows.Count > 0)
                    {
                        lblTotalResources.Text = DtForSumUBB.Rows[0]["Total"].ToString();
                    }

                    bool Extradatacheck = false;


                    #region    Retrive Data From munitbill  table data based on the bill no

                    string SqlQryForunitbill = "Select *,convert(varchar(10),BillDt,103) as Billdate,convert(varchar(10),DueDt,103) as dtDue,convert(varchar(10),FromDt,103) as FromDate,convert(varchar(10),ToDt,103) as ToDate,CGSTAmt,SGSTAmt,isnull(SCamtonMaintenance,0) SCamtonMaintenance,	isnull(SCamtonMaterial,0) SCamtonMaterial,	isnull(SCamtonExtraOne,0) SCamtonExtraOne,	isnull(SCamtonExtratwo,0) SCamtonExtratwo,	isnull(Staxonservicecharge,0) Staxonservicecharge,	isnull(StaxonExtradataservicecharges,0) StaxonExtradataservicecharges,left(OURGSTNo,2) OURGSTNo,BillToStateCode from munitbill   Where  unitid='" + ddlclientid.SelectedValue +
                                               "'  and  Month='" + month + "'  and billno='" + ddlMBBillnos.SelectedValue + "'";

                    DataTable DtForUnitBill = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForunitbill).Result;
                    if (DtForUnitBill.Rows.Count > 0)
                    {



                        System.Globalization.CultureInfo enGB = new System.Globalization.CultureInfo("en-GB");

                        string billdate = DtForUnitBill.Rows[0]["Billdate"].ToString();
                        txtbilldate.Text = billdate;

                        string duedate = DtForUnitBill.Rows[0]["dtDue"].ToString();
                        txtduedate.Text = duedate;

                        txtPlaceOfSupply.Text= DtForUnitBill.Rows[0]["PlaceOfSupply"].ToString();
                        txtnatureofsupply.Text= DtForUnitBill.Rows[0]["NatureOfSupply"].ToString();
                        txtJPCode.Text= DtForUnitBill.Rows[0]["JPCode"].ToString();
                        lblCGST.Text = DtForUnitBill.Rows[0]["CGSTAmt"].ToString();
                        lblSGST.Text = DtForUnitBill.Rows[0]["SGSTAmt"].ToString();
                        lblIGST.Text = DtForUnitBill.Rows[0]["IGSTAmt"].ToString();

                        #region for GST  on 17-6-2017 by swathi

                        if (lblCGST.Text != "0")
                        {
                            lblCGST.Visible = true;
                            TxtCGSTPrc.Visible = false;
                            lblCGSTTitle.Visible = true;
                        }
                        else
                        {
                            lblCGST.Visible = false;
                            TxtCGSTPrc.Visible = false;
                            lblCGSTTitle.Visible = false;
                        }

                        if (lblSGST.Text != "0")
                        {
                            lblSGST.Visible = true;
                            TxtSGSTPrc.Visible = false;
                            lblSGSTTitle.Visible = true;
                        }
                        else
                        {
                            lblSGST.Visible = false;
                            TxtSGSTPrc.Visible = false;
                            lblSGSTTitle.Visible = false;
                        }

                        if (lblIGST.Text != "0")
                        {
                            lblIGST.Visible = true;
                            TxtIGSTPrc.Visible = false;
                            lblIGSTTitle.Visible = true;
                        }
                        else
                        {
                            lblIGST.Visible = false;
                            TxtIGSTPrc.Visible = false;
                            lblIGSTTitle.Visible = false;
                        }



                        #endregion for GST  on 17-6-2017 by swathi

                        // txtMBillNo.Text = DtForUnitBill.Rows[0]["MBillno"].ToString();

                        txtfromdate.Text = DtForUnitBill.Rows[0]["FromDate"].ToString();
                        txttodate.Text = DtForUnitBill.Rows[0]["ToDate"].ToString();


                        lblbillnolatest.Text = DtForUnitBill.Rows[0]["BillNo"].ToString();
                        TxtservicechrgPrc.Text = DtForUnitBill.Rows[0]["ServiceChrgPer"].ToString();
                        lblServiceCharges.Text = DtForUnitBill.Rows[0]["ServiceChrg"].ToString();
                        lblTotalResources.Text = DtForUnitBill.Rows[0]["dutiestotalamount"].ToString();


                        lblServiceTax.Text = DtForUnitBill.Rows[0]["ServiceTax"].ToString();
                        lblSBCESS.Text = DtForUnitBill.Rows[0]["SBCessAmt"].ToString();
                        lblKKCESS.Text = DtForUnitBill.Rows[0]["KKCessAmt"].ToString();
                        lblCESS.Text = DtForUnitBill.Rows[0]["CESS"].ToString();
                        lblSheCESS.Text = DtForUnitBill.Rows[0]["SHECESS"].ToString();
                        lblGrandTotal.Text = DtForUnitBill.Rows[0]["GrandTotal"].ToString();
                        TxtServiceTaxPrc.Text = DtForUnitBill.Rows[0]["ServiceTaxPrc"].ToString();
                        TxtSBCESSPrc.Text = DtForUnitBill.Rows[0]["SBCessTaxPrc"].ToString();
                        TxtKKCESSPrc.Text = DtForUnitBill.Rows[0]["KKCessTaxPrc"].ToString();
                        TxtCESSPrc.Text = DtForUnitBill.Rows[0]["Cessper"].ToString();
                        TxtSheCESSPrc.Text = DtForUnitBill.Rows[0]["SheCessper"].ToString();
                        txtRemarks.Text = DtForUnitBill.Rows[0]["Remarks"].ToString();
                        if (lblServiceCharges.Text != "0")
                        {
                            lblServiceCharges.Visible = true;
                            lblServiceChargeTitle.Visible = true;
                            TxtservicechrgPrc.Visible = false;
                        }
                        else
                        {
                            lblServiceCharges.Visible = false;
                            lblServiceChargeTitle.Visible = false;
                            TxtservicechrgPrc.Visible = false;
                        }

                        if (lblServiceTax.Text != "0")
                        {
                            lblServiceTaxTitle.Visible = true;
                            lblServiceTax.Visible = true;
                            TxtServiceTaxPrc.Visible = true;
                        }
                        else
                        {
                            lblServiceTaxTitle.Visible = false;
                            lblServiceTax.Visible = false;
                            TxtServiceTaxPrc.Visible = false;
                        }


                        if (lblSBCESS.Text != "0")
                        {
                            lblSBCESS.Visible = true;
                            lblSBCESSTitle.Visible = true;
                            TxtSBCESSPrc.Visible = true;
                        }
                        else
                        {
                            lblSBCESS.Visible = false;
                            lblSBCESSTitle.Visible = false;
                            TxtSBCESSPrc.Visible = false;
                        }

                        if (lblKKCESS.Text != "0")
                        {
                            lblKKCESS.Visible = true;
                            lblKKCESSTitle.Visible = true;
                            TxtKKCESSPrc.Visible = true;
                        }
                        else
                        {
                            lblKKCESS.Visible = false;
                            lblKKCESSTitle.Visible = false;
                            TxtKKCESSPrc.Visible = false;
                        }

                        if (lblCESS.Text != "0")
                        {
                            lblCESSTitle.Visible = true;
                            lblCESS.Visible = true;
                            TxtCESSPrc.Visible = true;
                        }
                        else
                        {
                            lblCESSTitle.Visible = false;
                            lblCESS.Visible = false;
                            TxtCESSPrc.Visible = false;
                        }

                        if (lblSheCESS.Text != "0")
                        {
                            lblSheCESSTitle.Visible = true;
                            lblSheCESS.Visible = true;
                            TxtSheCESSPrc.Visible = true;
                        }
                        else
                        {
                            lblSheCESSTitle.Visible = false; ;
                            lblSheCESS.Visible = false;
                            TxtSheCESSPrc.Visible = false;
                        }
                        txtmachinarycost.Text = DtForUnitBill.Rows[0]["Machinarycosttitle"].ToString();
                        txtMaterialcost.Text = DtForUnitBill.Rows[0]["Materialcosttitle"].ToString();
                        txtextratwotitle.Text = DtForUnitBill.Rows[0]["Extratwotitle"].ToString();
                        txtextraonetitle.Text = DtForUnitBill.Rows[0]["Extraonetitle"].ToString();
                        txtdiscounttwotitle.Text = DtForUnitBill.Rows[0]["Discounttwotitle"].ToString();
                        txtdiscount.Text = DtForUnitBill.Rows[0]["Discountonetitle"].ToString();
                        txtMaintanancecost.Text = DtForUnitBill.Rows[0]["Maintanancecosttitle"].ToString();
                        //values
                        txtMachinery.Text = DtForUnitBill.Rows[0]["MachinaryCost"].ToString();
                        txtMaterial.Text = DtForUnitBill.Rows[0]["MaterialCost"].ToString();
                        txtextratwovalue.Text = DtForUnitBill.Rows[0]["ExtraAmtTwo"].ToString();
                        txtextraonevalue.Text = DtForUnitBill.Rows[0]["ExtraAmtone"].ToString();
                        txtdiscounttwovalue.Text = DtForUnitBill.Rows[0]["DiscountTwo"].ToString();
                        txtDiscounts.Text = DtForUnitBill.Rows[0]["Discount"].ToString();
                        txtElectical.Text = DtForUnitBill.Rows[0]["ElectricalChrg"].ToString();

                        decimal MachineryCost = 0;
                        decimal MaterialCost = 0;
                        decimal ExtraOneAmt = 0;
                        decimal ExtraTwoAmt = 0;
                        decimal DisCountTwoAmt = 0;
                        decimal machineryCost = 0;
                        decimal materialCost = 0;
                        decimal maintenancecost = 0;
                        decimal extraamountonecost = 0;
                        decimal extraamoounttwocost = 0;
                        decimal discountone = 0;
                        decimal discounttwo = 0;
                        decimal Staxonservicecharge = 0;
                        decimal SCamtonMachinary = 0;
                        decimal SCamtonMaintenance = 0;
                        decimal SCamtonMaterial = 0;
                        decimal SCamtonExtraone = 0;
                        decimal SCamtonExtratwo = 0;
                        decimal RelChrgAmt = 0;

                        string Machinarycosttitle = "";
                        string Materialcosttitle = "";
                        string Maintanancecosttitle = "";
                        string Extraonetitle = "";
                        string Extratwotitle = "";
                        string Discountonetitle = "";
                        string Discounttwotitle = "";

                        decimal electricalCost = 0;
                        decimal discountAmount = 0;


                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;


                        machineryCost = decimal.Parse(DtForUnitBill.Rows[0]["MachinaryCost"].ToString());
                        materialCost = decimal.Parse(DtForUnitBill.Rows[0]["MaterialCost"].ToString());
                        maintenancecost = decimal.Parse(DtForUnitBill.Rows[0]["ElectricalChrg"].ToString());
                        extraamountonecost = decimal.Parse(DtForUnitBill.Rows[0]["ExtraAmtone"].ToString());
                        extraamoounttwocost = decimal.Parse(DtForUnitBill.Rows[0]["ExtraAmtTwo"].ToString());
                        discountone = decimal.Parse(DtForUnitBill.Rows[0]["Discount"].ToString());
                        discounttwo = decimal.Parse(DtForUnitBill.Rows[0]["Discounttwo"].ToString());

                        Machinarycosttitle = DtForUnitBill.Rows[0]["Machinarycosttitle"].ToString();
                        Materialcosttitle = DtForUnitBill.Rows[0]["Materialcosttitle"].ToString();
                        Maintanancecosttitle = DtForUnitBill.Rows[0]["Maintanancecosttitle"].ToString();
                        Extraonetitle = DtForUnitBill.Rows[0]["Extraonetitle"].ToString();
                        Extratwotitle = DtForUnitBill.Rows[0]["Extratwotitle"].ToString();
                        Discountonetitle = DtForUnitBill.Rows[0]["Discountonetitle"].ToString();
                        Discounttwotitle = DtForUnitBill.Rows[0]["Discounttwotitle"].ToString();






                        #region Begin New Code for service tax extradata  as 01/04/2014 by venkat

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            STMachinary = Boolean.Parse(DtForUnitBill.Rows[0]["STMachinary"].ToString());
                            if (STMachinary == true)
                            {
                                chkSTYesMachinary.Checked = true;
                            }
                            else
                            {
                                chkSTYesMachinary.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            STMaterial = Boolean.Parse(DtForUnitBill.Rows[0]["STMaterial"].ToString());
                            if (STMaterial == true)
                            {
                                chkSTYesMaterial.Checked = true;
                            }
                            else
                            {
                                chkSTYesMaterial.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            STMaintenance = Boolean.Parse(DtForUnitBill.Rows[0]["STMaintenance"].ToString());
                            if (STMaintenance == true)
                            {
                                chkSTYesElectrical.Checked = true;
                            }
                            else
                            {
                                chkSTYesElectrical.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            STExtraone = Boolean.Parse(DtForUnitBill.Rows[0]["STExtraone"].ToString());
                            if (STExtraone == true)
                            {
                                chkSTYesExtraone.Checked = true;
                            }
                            else
                            {
                                chkSTYesExtraone.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            STExtratwo = Boolean.Parse(DtForUnitBill.Rows[0]["STExtratwo"].ToString());
                            if (STExtratwo == true)
                            {
                                chkSTYesExtratwo.Checked = true;
                            }
                            else
                            {
                                chkSTYesExtratwo.Checked = false;
                            }
                        }


                        #endregion

                        #region Begin New Code for service Charge on extradata  as 01/04/2014 by venkat

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            SCMachinary = Boolean.Parse(DtForUnitBill.Rows[0]["SCMachinary"].ToString());
                            if (SCMachinary == true)
                            {
                                chkSCYesMachinary.Checked = true;
                            }
                            else
                            {
                                chkSCYesMachinary.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            SCMaterial = Boolean.Parse(DtForUnitBill.Rows[0]["SCMaterial"].ToString());
                            if (SCMaterial == true)
                            {
                                chkSCYesMaterial.Checked = true;
                            }
                            else
                            {
                                chkSCYesMaterial.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            SCMaintenance = Boolean.Parse(DtForUnitBill.Rows[0]["SCMaintenance"].ToString());
                            if (SCMaintenance == true)
                            {
                                chkSCYesElectrical.Checked = true;
                            }
                            else
                            {
                                chkSCYesElectrical.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            SCExtraone = Boolean.Parse(DtForUnitBill.Rows[0]["SCExtraone"].ToString());
                            if (SCExtraone == true)
                            {
                                chkSCYesExtraone.Checked = true;
                            }
                            else
                            {
                                chkSCYesExtraone.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            SCExtratwo = Boolean.Parse(DtForUnitBill.Rows[0]["SCExtratwo"].ToString());
                            if (SCExtratwo == true)
                            {
                                chkSCYesExtratwo.Checked = true;
                            }
                            else
                            {
                                chkSCYesExtratwo.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            STDiscountone = Boolean.Parse(DtForUnitBill.Rows[0]["STDiscountone"].ToString());
                            if (STDiscountone == true)
                            {
                                chkSTDiscountone.Checked = true;
                            }
                            else
                            {
                                chkSTDiscountone.Checked = false;
                            }
                        }

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            STDiscounttwo = Boolean.Parse(DtForUnitBill.Rows[0]["STDiscounttwo"].ToString());
                            if (STDiscounttwo == true)
                            {
                                chkSTDiscounttwo.Checked = true;
                            }
                            else
                            {
                                chkSTDiscounttwo.Checked = false;
                            }
                        }


                        #endregion

                        #region Begin New Code for Service tax amount on Extradata as on 01/04/2014 by venkat

                        //SCamtonMachinary = decimal.Parse(DtForUnitBill.Rows[0]["SCamtonMachinary"].ToString());
                        //SCamtonMaintenance = decimal.Parse(DtForUnitBill.Rows[0]["SCamtonMaintenance"].ToString());
                        //SCamtonMaterial = decimal.Parse(DtForUnitBill.Rows[0]["SCamtonMaterial"].ToString());
                        //SCamtonExtraone = decimal.Parse(DtForUnitBill.Rows[0]["SCamtonExtraone"].ToString());
                        //SCamtonExtratwo = decimal.Parse(DtForUnitBill.Rows[0]["SCamtonExtratwo"].ToString());

                        #endregion


                        chkSTYesMachinary.Checked = bool.Parse(DtForUnitBill.Rows[0]["stmachinary"].ToString());
                        chkSTYesMaterial.Checked = bool.Parse(DtForUnitBill.Rows[0]["STMaterial"].ToString());
                        chkSTYesElectrical.Checked = bool.Parse(DtForUnitBill.Rows[0]["STMaintenance"].ToString());
                        chkSTYesExtraone.Checked = bool.Parse(DtForUnitBill.Rows[0]["STExtraone"].ToString());
                        chkSTYesExtratwo.Checked = bool.Parse(DtForUnitBill.Rows[0]["STExtratwo"].ToString());
                        chkSTDiscountone.Checked = bool.Parse(DtForUnitBill.Rows[0]["STDiscountone"].ToString());
                        chkSTDiscounttwo.Checked = bool.Parse(DtForUnitBill.Rows[0]["STDiscounttwo"].ToString());


                        chkSCYesMachinary.Checked = bool.Parse(DtForUnitBill.Rows[0]["SCMachinary"].ToString());
                        chkSCYesMaterial.Checked = bool.Parse(DtForUnitBill.Rows[0]["SCMaterial"].ToString());
                        chkSCYesElectrical.Checked = bool.Parse(DtForUnitBill.Rows[0]["SCMaintenance"].ToString());
                        chkSCYesExtraone.Checked = bool.Parse(DtForUnitBill.Rows[0]["SCExtraone"].ToString());
                        chkSCYesExtratwo.Checked = bool.Parse(DtForUnitBill.Rows[0]["SCExtratwo"].ToString());

                        checkExtraData.Checked = bool.Parse(DtForUnitBill.Rows[0]["Extradatacheck"].ToString());

                        if (String.IsNullOrEmpty(DtForUnitBill.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            Extradatacheck = Boolean.Parse(DtForUnitBill.Rows[0]["Extradatacheck"].ToString());
                            if (Extradatacheck == true)
                            {
                                checkExtraData.Checked = true;
                            }
                            else
                            {
                                checkExtraData.Checked = false;
                            }
                        }


                        if (checkExtraData.Checked == true)
                        {
                            if (Chk_Month.Checked == false)
                            {
                                if (ddlclientid.SelectedIndex > 0 && ddlmonth.SelectedIndex > 0)
                                {
                                    panelRemarks.Visible = true;
                                }
                            }
                            if (Chk_Month.Checked == true)
                            {
                                if (ddlclientid.SelectedIndex > 0 && txtmonth.Text.Trim().Length > 0)
                                {
                                    panelRemarks.Visible = true;
                                }
                            }
                        }


                        #region Machinary Cost checking

                        if (machineryCost > 0)
                        {
                            MachineryCost = Convert.ToDecimal(machineryCost);
                            if (MachineryCost > 0)
                            {

                                if (STMachinary == true)
                                {
                                    lblMachinerywithst.Text = MachineryCost.ToString("0.00");
                                    lblMachinerywithst.Visible = true;
                                    lblMachineryTitlewithst.Visible = true;
                                    // lblMachineryTitlewithst.Text = txtmachinarycost.Text;
                                    lblMachineryTitlewithst.Text = Machinarycosttitle;
                                }
                                else
                                {
                                    lblMachinery.Text = MachineryCost.ToString("0.00");
                                    lblMachinery.Visible = true;
                                    lblMachineryTitle.Visible = true;
                                    //lblMachineryTitle.Text = txtmachinarycost.Text;
                                    lblMachineryTitle.Text = Machinarycosttitle;
                                }
                            }
                            else
                            {

                                #region New code as on 21/01/2014


                                lblMachinerywithst.Text = string.Empty; ;
                                lblMachineryTitlewithst.Text = string.Empty;
                                lblMachinerywithst.Text = string.Empty;
                                lblMachineryTitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }

                        #endregion

                        #region Material Cost checking

                        if (materialCost > 0)
                        {
                            MaterialCost = Convert.ToDecimal(materialCost);
                            if (MaterialCost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    lblMaterialwithst.Text = MaterialCost.ToString("0.00");
                                    lblMaterialwithst.Visible = true;
                                    lblMaterialTitlewithst.Visible = true;
                                    //lblMaterialTitlewithst.Text = txtMaterialcost.Text;
                                    lblMaterialTitlewithst.Text = Materialcosttitle;
                                }
                                else
                                {
                                    lblMaterial.Text = MaterialCost.ToString("0.00");
                                    lblMaterial.Visible = true;
                                    lblMaterialTitle.Visible = true;
                                    //lblMaterialTitle.Text = txtMaterialcost.Text;
                                    lblMaterialTitle.Text = Materialcosttitle;
                                }

                            }
                            else
                            {

                                lblMaterial.Text = string.Empty;
                                lblMaterialTitle.Text = string.Empty;
                                lblMaterialwithst.Text = string.Empty;
                                lblMaterialTitlewithst.Text = string.Empty;

                            }
                        }
                        #endregion


                        #region Maintenance Cost Checking

                        if (maintenancecost > 0)
                        {
                            electricalCost = Convert.ToDecimal(maintenancecost);
                            if (electricalCost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    lblElectricalTitlewithst.Visible = true;
                                    lblElectricalwithst.Visible = true;
                                    lblElectricalwithst.Text = electricalCost.ToString("0.00");
                                    lblElectricalTitlewithst.Text = Maintanancecosttitle;
                                }
                                else
                                {
                                    lblElectricalTitle.Visible = true;
                                    lblElectrical.Visible = true;
                                    lblElectrical.Text = electricalCost.ToString("0.00");
                                    lblElectricalTitle.Text = Maintanancecosttitle;
                                }
                            }
                            else
                            {

                                lblElectrical.Text = string.Empty;
                                lblElectricalTitle.Text = string.Empty;
                                lblElectricalwithst.Text = string.Empty;
                                lblElectricalTitlewithst.Text = string.Empty;

                            }
                        }

                        #endregion

                        #region Discount one


                        if (discountone > 0)
                        {
                            discountAmount = Convert.ToDecimal(discountone);
                            if (discountAmount > 0)
                            {
                                if (STDiscountone == true)
                                {

                                    lblDiscountwithst.Visible = true;
                                    lblDiscountTitlewithst.Visible = true;
                                    lblDiscountwithst.Text = discountAmount.ToString("0.00");
                                    lblDiscountTitlewithst.Text = Discountonetitle;


                                }
                                else
                                {

                                    lblDiscount.Visible = true;
                                    lblDiscountTitle.Visible = true;
                                    lblDiscount.Text = discountAmount.ToString("0.00");
                                    lblDiscountTitle.Text = Discountonetitle;
                                }

                            }
                            else
                            {

                                #region New code as on 21/01/2014

                                lblDiscountwithst.Visible = false;
                                lblDiscountTitlewithst.Visible = false;
                                lblDiscount.Visible = false;
                                lblDiscountTitle.Visible = false;

                                lblDiscount.Text = string.Empty;
                                lblDiscountTitle.Text = string.Empty;
                                lblDiscountwithst.Text = string.Empty;
                                lblDiscountTitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }

                        #endregion



                        #region Extraamount One



                        if (extraamountonecost > 0)
                        {
                            ExtraOneAmt = Convert.ToDecimal(extraamountonecost);
                            if (ExtraOneAmt > 0)
                            {
                                if (STExtraone == true)
                                {

                                    lblextraonetitlewithst.Visible = true;
                                    lblextraonewithst.Visible = true;
                                    lblextraonewithst.Text = ExtraOneAmt.ToString("0.00");
                                    //lblextraonetitlewithst.Text = txtextraonetitle.Text;
                                    lblextraonetitlewithst.Text = Extraonetitle;
                                }
                                else
                                {
                                    lblextraoneamttitle.Visible = true;
                                    lblextraamt.Visible = true;
                                    lblextraamt.Text = ExtraOneAmt.ToString("0.00");
                                    //lblextraoneamttitle.Text = txtextraonetitle.Text;
                                    lblextraoneamttitle.Text = Extraonetitle;
                                }
                            }

                            else
                            {

                                #region New code as on 21/01/2014

                                lblextraamt.Text = string.Empty;
                                lblextraoneamttitle.Text = string.Empty;
                                lblextraonewithst.Text = string.Empty;
                                lblextraonetitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }
                        #endregion

                        #region Extraamount Two


                        if (extraamoounttwocost > 0)
                        {
                            ExtraTwoAmt = Convert.ToDecimal(extraamoounttwocost);
                            if (ExtraTwoAmt > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    lblextratwotitlewithst.Visible = true;
                                    lblextratwowithst.Visible = true;
                                    lblextratwowithst.Text = ExtraTwoAmt.ToString("0.00");
                                    //lblextratwotitlewithst.Text = txtextratwotitle.Text;
                                    lblextratwotitlewithst.Text = Extratwotitle;
                                }
                                else
                                {
                                    lblextratwoamttitle.Visible = true;
                                    lblextratwoamt.Visible = true;
                                    lblextratwoamt.Text = ExtraTwoAmt.ToString("0.00");
                                    lblextratwoamttitle.Text = txtextratwotitle.Text;
                                }
                            }

                            else
                            {

                                #region New code as on 21/01/2014

                                lblextratwoamt.Text = string.Empty;
                                lblextratwoamttitle.Text = string.Empty;
                                lblextratwowithst.Text = string.Empty;
                                lblextratwotitlewithst.Text = string.Empty;

                                #endregion
                            }
                        }
                        #endregion


                        #region Discount two


                        if (discounttwo > 0)
                        {
                            DisCountTwoAmt = Convert.ToDecimal(discounttwo);
                            if (DisCountTwoAmt > 0)
                            {
                                if (STDiscounttwo == true)
                                {
                                    lblDiscounttwowithst.Visible = true;
                                    lblDiscounttwotitlewithst.Visible = true;
                                    lblDiscounttwowithst.Text = DisCountTwoAmt.ToString("0.00");
                                    lblDiscounttwotitlewithst.Text = Discounttwotitle;




                                }
                                else
                                {
                                    lblDiscounttwo.Visible = true;
                                    lblDiscounttwoTitle.Visible = true;
                                    lblDiscounttwo.Text = DisCountTwoAmt.ToString("0.00");
                                    lblDiscounttwoTitle.Text = Discounttwotitle;


                                }
                            }
                            else
                            {

                                #region New code as on 21/01/2014
                                lblDiscounttwowithst.Visible = false;
                                lblDiscounttwotitlewithst.Visible = false;
                                lblDiscounttwo.Visible = false;
                                lblDiscounttwoTitle.Visible = false;

                                lblDiscounttwo.Text = string.Empty;
                                lblDiscounttwoTitle.Text = string.Empty;
                                lblDiscounttwowithst.Text = string.Empty;
                                lblDiscounttwotitlewithst.Text = string.Empty;

                                #endregion
                            }

                        }

                        #endregion

                        #region Begin New Code for Service tax amount on Individual extra detail as on 01/04/2014 by Venkat

                        if (Staxonservicecharge > 0)
                        {
                            lblStaxamtonServicechargetitle.Visible = true;
                            lblStaxamtonServicecharge.Visible = true;
                            lblStaxamtonServicecharge.Text = Staxonservicecharge.ToString();
                        }
                        else
                        {

                            lblStaxamtonServicechargetitle.Visible = false;
                            lblStaxamtonServicecharge.Visible = false;
                            lblStaxamtonServicecharge.Text = string.Empty;
                        }

                        if (SCamtonMachinary > 0 && SCMachinary == true)
                        {

                            lblSChargeamtonMachinarytitle.Visible = true;
                            lblSChargeamtonMachinary.Visible = true;
                            lblSChargeamtonMachinary.Text = SCamtonMachinary.ToString();
                        }
                        else
                        {
                            lblSChargeamtonMachinarytitle.Visible = false;
                            lblSChargeamtonMachinary.Visible = false;
                            lblSChargeamtonMachinary.Text = string.Empty;
                        }


                        if (SCamtonMaintenance > 0 && SCMaintenance == true)
                        {

                            lblSchargeamtonMaintenancetitle.Visible = true;
                            lblSchargeamtonMaintenance.Visible = true;
                            lblSchargeamtonMaintenance.Text = SCamtonMaintenance.ToString();
                        }
                        else
                        {
                            lblSchargeamtonMaintenancetitle.Visible = false;
                            lblSchargeamtonMaintenance.Visible = false;
                            lblSchargeamtonMaintenance.Text = string.Empty;
                        }


                        if (SCamtonMaterial > 0 && SCMaterial == true)
                        {

                            lblSchargeamtonMaterialtitle.Visible = true;
                            lblSchargeamtonMaterial.Visible = true;
                            lblSchargeamtonMaterial.Text = SCamtonMaterial.ToString();

                        }
                        else
                        {
                            lblSchargeamtonMaterialtitle.Visible = false;
                            lblSchargeamtonMaterial.Visible = false;
                            lblSchargeamtonMaterial.Text = string.Empty;
                        }


                        if (SCamtonExtraone > 0 && SCExtraone == true)
                        {

                            lblSchargeamtonExtraonetitle.Visible = true;
                            lblSchargeamtonExtraone.Visible = true;
                            lblSchargeamtonExtraone.Text = SCamtonExtraone.ToString();

                        }
                        else
                        {
                            lblSchargeamtonExtraonetitle.Visible = false;
                            lblSchargeamtonExtraone.Visible = false;
                            lblSchargeamtonExtraone.Text = string.Empty;
                        }

                        if (SCamtonExtratwo > 0 && SCExtratwo == true)
                        {

                            lblSchargeamtonExtratwotitle.Visible = true;
                            lblSchargeamtonExtratwo.Visible = true;
                            lblSchargeamtonExtratwo.Text = SCamtonExtratwo.ToString();
                        }
                        else
                        {
                            lblSchargeamtonExtratwotitle.Visible = false;
                            lblSchargeamtonExtratwo.Visible = false;
                            lblSchargeamtonExtratwo.Text = string.Empty;
                        }

                        #endregion


                        string GTotal = Convert.ToDecimal(lblGrandTotal.Text).ToString("0.00");
                        string[] arr = GTotal.ToString().Split("."[0]);
                        string inwords = "";
                        string rupee = (arr[0]);
                        string paise = "";
                        if (arr.Length == 2)
                        {
                            if (arr[1].Length > 0 && arr[1] != "00")
                            {
                                paise = (arr[1]);
                            }
                        }

                        if (paise != "0.00" && paise != "0" && paise != "")
                        {
                            int I = Int16.Parse(paise);
                            String p = NumberToEnglish.Instance.NumbersToWords(I, true);
                            paise = p;
                            rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), false);
                            inwords = " Rupees " + rupee + "" + paise + " Paise Only";

                        }
                        else
                        {
                            rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), true);
                            inwords = " Rupees " + rupee + " Only";
                        }

                        lblamtinwords.Text = inwords;
                    }

                    #endregion
                }
                else
                {

                    gvClientBilling.DataSource = null;
                    gvClientBilling.DataBind();
                    FillDefaultGird();
                }
                ScriptManager.RegisterStartupScript(this, GetType(), "bindautofilldesgs", "bindautofilldesgs();", true);
                #endregion

                VisibleFreeze();
            }
            catch (Exception ex)
            {

            }
        }

        public void DispalyExtraDataHeadings()
        {
            lblMachinerywithst.Text = string.Empty; ;
            lblMachineryTitlewithst.Text = string.Empty;
            lblMachinery.Text = string.Empty;
            lblMachineryTitle.Text = string.Empty;
            lblMaterial.Text = string.Empty;
            lblMaterialTitle.Text = string.Empty;
            lblMaterialwithst.Text = string.Empty;
            lblMaterialTitlewithst.Text = string.Empty;
            lblElectrical.Text = string.Empty;
            lblElectricalTitle.Text = string.Empty;
            lblElectricalwithst.Text = string.Empty;
            lblElectricalTitlewithst.Text = string.Empty;
            lblDiscountwithst.Visible = false;
            lblDiscountTitlewithst.Visible = false;
            lblDiscount.Visible = false;
            lblDiscountTitle.Visible = false;
            lblDiscount.Text = string.Empty;
            lblDiscountTitle.Text = string.Empty;
            lblDiscountwithst.Text = string.Empty;
            lblDiscountTitlewithst.Text = string.Empty;
            lblextraamt.Text = string.Empty;
            lblextraoneamttitle.Text = string.Empty;
            lblextraonewithst.Text = string.Empty;
            lblextraonetitlewithst.Text = string.Empty;
            lblextratwoamt.Text = string.Empty;
            lblextratwoamttitle.Text = string.Empty;
            lblextratwowithst.Text = string.Empty;
            lblextratwotitlewithst.Text = string.Empty;
            lblDiscounttwowithst.Visible = false;
            lblDiscounttwotitlewithst.Visible = false;
            lblDiscounttwo.Visible = false;
            lblDiscounttwoTitle.Visible = false;
            lblDiscounttwo.Text = string.Empty;
            lblDiscounttwoTitle.Text = string.Empty;
            lblDiscounttwowithst.Text = string.Empty;
            lblDiscounttwotitlewithst.Text = string.Empty;

            decimal MachineryCost = 0;
            decimal MaterialCost = 0;
            decimal maintenancecost = 0;
            decimal ExtraOneAmt = 0;
            decimal ExtraTwoAmt = 0;
            decimal DisCountTwoAmt = 0;
            decimal machineryCost = 0;
            decimal materialCost = 0;
            decimal extraamountonecost = 0;
            decimal extraamoounttwocost = 0;

            decimal discountone = 0;
            decimal discounttwo = 0;

            decimal Staxonservicecharge = 0;
            decimal SCamtonMachinary = 0;
            decimal SCamtonMaintenance = 0;
            decimal SCamtonMaterial = 0;
            decimal SCamtonExtraone = 0;
            decimal SCamtonExtratwo = 0;
            decimal RelChrgAmt = 0;

            string Machinarycosttitle = "";
            string Materialcosttitle = "";
            string Maintanancecosttitle = "";
            string Extraonetitle = "";
            string Extratwotitle = "";
            string Discountonetitle = "";
            string Discounttwotitle = "";

            decimal electricalCost = 0;
            decimal discountAmount = 0;


            bool STMachinary = false;
            bool STMaterial = false;
            bool STMaintenance = false;
            bool STExtraone = false;
            bool STExtratwo = false;

            bool SCMachinary = false;
            bool SCMaterial = false;
            bool SCMaintenance = false;
            bool SCExtraone = false;
            bool SCExtratwo = false;

            bool STDiscountone = false;
            bool STDiscounttwo = false;

            STMachinary = chkSTYesMachinary.Checked;
            STMaterial = chkSTYesMaterial.Checked;
            STMaintenance = chkSTYesElectrical.Checked;
            STExtraone = chkSTYesExtraone.Checked;
            STExtratwo = chkSTYesExtratwo.Checked;

            SCMachinary = chkSCYesMachinary.Checked;
            SCMaterial = chkSCYesMachinary.Checked;
            SCMaintenance = chkSCYesMachinary.Checked;
            SCExtraone = chkSCYesMachinary.Checked;
            SCExtratwo = chkSCYesMachinary.Checked;

            STDiscountone = chkSTDiscountone.Checked;
            STDiscounttwo = chkSTDiscounttwo.Checked;


            machineryCost = decimal.Parse(txtMachinery.Text);
            materialCost = decimal.Parse(txtMaterial.Text);
            maintenancecost = decimal.Parse(txtElectical.Text);
            extraamountonecost = decimal.Parse(txtextraonevalue.Text);
            extraamoounttwocost = decimal.Parse(txtextratwovalue.Text);
            discountone = decimal.Parse(txtDiscounts.Text);
            discounttwo = decimal.Parse(txtdiscounttwovalue.Text);

            Machinarycosttitle = txtmachinarycost.Text;
            Materialcosttitle = txtMaterialcost.Text;
            Maintanancecosttitle = txtMaintanancecost.Text;
            Extraonetitle = txtextraonetitle.Text;
            Extratwotitle = txtextratwotitle.Text;
            Discountonetitle = txtdiscount.Text;
            Discounttwotitle = txtdiscounttwotitle.Text;

            if (checkExtraData.Checked == true)
            {
                if (Chk_Month.Checked == false)
                {
                    if (ddlclientid.SelectedIndex > 0 && ddlmonth.SelectedIndex > 0)
                    {
                        panelRemarks.Visible = true;
                    }
                }
                if (Chk_Month.Checked == true)
                {
                    if (ddlclientid.SelectedIndex > 0 && txtmonth.Text.Trim().Length > 0)
                    {
                        panelRemarks.Visible = true;
                    }
                }
            }


            #region Machinary Cost checking

            if (machineryCost > 0)
            {
                MachineryCost = Convert.ToDecimal(machineryCost);
                if (MachineryCost > 0)
                {

                    if (STMachinary == true)
                    {
                        lblMachinerywithst.Text = MachineryCost.ToString("0.00");
                        lblMachinerywithst.Visible = true;
                        lblMachineryTitlewithst.Visible = true;
                        // lblMachineryTitlewithst.Text = txtmachinarycost.Text;
                        lblMachineryTitlewithst.Text = Machinarycosttitle;
                    }
                    else
                    {
                        lblMachinery.Text = MachineryCost.ToString("0.00");
                        lblMachinery.Visible = true;
                        lblMachineryTitle.Visible = true;
                        //lblMachineryTitle.Text = txtmachinarycost.Text;
                        lblMachineryTitle.Text = Machinarycosttitle;
                    }
                }
                else
                {

                    #region New code as on 21/01/2014


                    lblMachinerywithst.Text = string.Empty; ;
                    lblMachineryTitlewithst.Text = string.Empty;
                    lblMachinerywithst.Text = string.Empty;
                    lblMachineryTitlewithst.Text = string.Empty;

                    #endregion
                }
            }
            else
            {

                #region New code as on 21/01/2014


                lblMachinerywithst.Text = string.Empty; ;
                lblMachineryTitlewithst.Text = string.Empty;
                lblMachinery.Text = string.Empty;
                lblMachineryTitle.Text = string.Empty;

                #endregion
            }

            #endregion

            #region Material Cost checking

            if (materialCost > 0)
            {
                MaterialCost = Convert.ToDecimal(materialCost);
                if (MaterialCost > 0)
                {
                    if (STMaterial == true)
                    {
                        lblMaterialwithst.Text = MaterialCost.ToString("0.00");
                        lblMaterialwithst.Visible = true;
                        lblMaterialTitlewithst.Visible = true;
                        //lblMaterialTitlewithst.Text = txtMaterialcost.Text;
                        lblMaterialTitlewithst.Text = Materialcosttitle;
                    }
                    else
                    {
                        lblMaterial.Text = MaterialCost.ToString("0.00");
                        lblMaterial.Visible = true;
                        lblMaterialTitle.Visible = true;
                        //lblMaterialTitle.Text = txtMaterialcost.Text;
                        lblMaterialTitle.Text = Materialcosttitle;
                    }

                }
                else
                {

                    lblMaterial.Text = string.Empty;
                    lblMaterialTitle.Text = string.Empty;
                    lblMaterialwithst.Text = string.Empty;
                    lblMaterialTitlewithst.Text = string.Empty;

                }
            }
            else
            {

                lblMaterial.Text = string.Empty;
                lblMaterialTitle.Text = string.Empty;
                lblMaterialwithst.Text = string.Empty;
                lblMaterialTitlewithst.Text = string.Empty;

            }
            #endregion


            #region Maintenance Cost Checking

            if (maintenancecost > 0)
            {
                electricalCost = Convert.ToDecimal(maintenancecost);
                if (electricalCost > 0)
                {
                    if (STMaintenance == true)
                    {
                        lblElectricalTitlewithst.Visible = true;
                        lblElectricalwithst.Visible = true;
                        lblElectricalwithst.Text = electricalCost.ToString("0.00");
                        lblElectricalTitlewithst.Text = Maintanancecosttitle;
                    }
                    else
                    {
                        lblElectricalTitle.Visible = true;
                        lblElectrical.Visible = true;
                        lblElectrical.Text = electricalCost.ToString("0.00");
                        lblElectricalTitle.Text = Maintanancecosttitle;
                    }
                }
                else
                {

                    lblElectrical.Text = string.Empty;
                    lblElectricalTitle.Text = string.Empty;
                    lblElectricalwithst.Text = string.Empty;
                    lblElectricalTitlewithst.Text = string.Empty;

                }
            }
            else
            {

                lblElectrical.Text = string.Empty;
                lblElectricalTitle.Text = string.Empty;
                lblElectricalwithst.Text = string.Empty;
                lblElectricalTitlewithst.Text = string.Empty;

            }
            #endregion

            #region Discount one


            if (discountone > 0)
            {
                discountAmount = Convert.ToDecimal(discountone);
                if (discountAmount > 0)
                {
                    if (STDiscountone == true)
                    {

                        lblDiscountwithst.Visible = true;
                        lblDiscountTitlewithst.Visible = true;
                        lblDiscountwithst.Text = discountAmount.ToString("0.00");
                        lblDiscountTitlewithst.Text = Discountonetitle;


                    }
                    else
                    {

                        lblDiscount.Visible = true;
                        lblDiscountTitle.Visible = true;
                        lblDiscount.Text = discountAmount.ToString("0.00");
                        lblDiscountTitle.Text = Discountonetitle;
                    }

                }
                else
                {

                    #region New code as on 21/01/2014

                    lblDiscountwithst.Visible = false;
                    lblDiscountTitlewithst.Visible = false;
                    lblDiscount.Visible = false;
                    lblDiscountTitle.Visible = false;

                    lblDiscount.Text = string.Empty;
                    lblDiscountTitle.Text = string.Empty;
                    lblDiscountwithst.Text = string.Empty;
                    lblDiscountTitlewithst.Text = string.Empty;

                    #endregion
                }
            }
            else
            {

                #region New code as on 21/01/2014

                lblDiscountwithst.Visible = false;
                lblDiscountTitlewithst.Visible = false;
                lblDiscount.Visible = false;
                lblDiscountTitle.Visible = false;

                lblDiscount.Text = string.Empty;
                lblDiscountTitle.Text = string.Empty;
                lblDiscountwithst.Text = string.Empty;
                lblDiscountTitlewithst.Text = string.Empty;

                #endregion
            }
            #endregion



            #region Extraamount One



            if (extraamountonecost > 0)
            {
                ExtraOneAmt = Convert.ToDecimal(extraamountonecost);
                if (ExtraOneAmt > 0)
                {
                    if (STExtraone == true)
                    {

                        lblextraonetitlewithst.Visible = true;
                        lblextraonewithst.Visible = true;
                        lblextraonewithst.Text = ExtraOneAmt.ToString("0.00");
                        //lblextraonetitlewithst.Text = txtextraonetitle.Text;
                        lblextraonetitlewithst.Text = Extraonetitle;
                    }
                    else
                    {
                        lblextraoneamttitle.Visible = true;
                        lblextraamt.Visible = true;
                        lblextraamt.Text = ExtraOneAmt.ToString("0.00");
                        //lblextraoneamttitle.Text = txtextraonetitle.Text;
                        lblextraoneamttitle.Text = Extraonetitle;
                    }
                }

                else
                {

                    #region New code as on 21/01/2014

                    lblextraamt.Text = string.Empty;
                    lblextraoneamttitle.Text = string.Empty;
                    lblextraonewithst.Text = string.Empty;
                    lblextraonetitlewithst.Text = string.Empty;

                    #endregion
                }
            }
            else
            {

                #region New code as on 21/01/2014

                lblextraamt.Text = string.Empty;
                lblextraoneamttitle.Text = string.Empty;
                lblextraonewithst.Text = string.Empty;
                lblextraonetitlewithst.Text = string.Empty;

                #endregion
            }
            #endregion

            #region Extraamount Two


            if (extraamoounttwocost > 0)
            {
                ExtraTwoAmt = Convert.ToDecimal(extraamoounttwocost);
                if (ExtraTwoAmt > 0)
                {
                    if (STExtratwo == true)
                    {
                        lblextratwotitlewithst.Visible = true;
                        lblextratwowithst.Visible = true;
                        lblextratwowithst.Text = ExtraTwoAmt.ToString("0.00");
                        //lblextratwotitlewithst.Text = txtextratwotitle.Text;
                        lblextratwotitlewithst.Text = Extratwotitle;
                    }
                    else
                    {
                        lblextratwoamttitle.Visible = true;
                        lblextratwoamt.Visible = true;
                        lblextratwoamt.Text = ExtraTwoAmt.ToString("0.00");
                        lblextratwoamttitle.Text = txtextratwotitle.Text;
                    }
                }

                else
                {

                    #region New code as on 21/01/2014

                    lblextratwoamt.Text = string.Empty;
                    lblextratwoamttitle.Text = string.Empty;
                    lblextratwowithst.Text = string.Empty;
                    lblextratwotitlewithst.Text = string.Empty;

                    #endregion
                }
            }
            else
            {

                #region New code as on 21/01/2014

                lblextratwoamt.Text = string.Empty;
                lblextratwoamttitle.Text = string.Empty;
                lblextratwowithst.Text = string.Empty;
                lblextratwotitlewithst.Text = string.Empty;

                #endregion
            }
            #endregion


            #region Discount two


            if (discounttwo > 0)
            {
                DisCountTwoAmt = Convert.ToDecimal(discounttwo);
                if (DisCountTwoAmt > 0)
                {
                    if (STDiscounttwo == true)
                    {
                        lblDiscounttwowithst.Visible = true;
                        lblDiscounttwotitlewithst.Visible = true;
                        lblDiscounttwowithst.Text = DisCountTwoAmt.ToString("0.00");
                        lblDiscounttwotitlewithst.Text = Discounttwotitle;

                    }
                    else
                    {
                        lblDiscounttwo.Visible = true;
                        lblDiscounttwoTitle.Visible = true;
                        lblDiscounttwo.Text = DisCountTwoAmt.ToString("0.00");
                        lblDiscounttwoTitle.Text = Discounttwotitle;

                    }
                }
                else
                {

                    #region New code as on 21/01/2014
                    lblDiscounttwowithst.Visible = false;
                    lblDiscounttwotitlewithst.Visible = false;
                    lblDiscounttwo.Visible = false;
                    lblDiscounttwoTitle.Visible = false;

                    lblDiscounttwo.Text = string.Empty;
                    lblDiscounttwoTitle.Text = string.Empty;
                    lblDiscounttwowithst.Text = string.Empty;
                    lblDiscounttwotitlewithst.Text = string.Empty;

                    #endregion
                }

            }
            else
            {

                #region New code as on 21/01/2014
                lblDiscounttwowithst.Visible = false;
                lblDiscounttwotitlewithst.Visible = false;
                lblDiscounttwo.Visible = false;
                lblDiscounttwoTitle.Visible = false;

                lblDiscounttwo.Text = string.Empty;
                lblDiscounttwoTitle.Text = string.Empty;
                lblDiscounttwowithst.Text = string.Empty;
                lblDiscounttwotitlewithst.Text = string.Empty;

                #endregion
            }
            #endregion

            #region Begin New Code for Service tax amount on Individual extra detail as on 01/04/2014 by Venkat

            if (Staxonservicecharge > 0)
            {
                lblStaxamtonServicechargetitle.Visible = true;
                lblStaxamtonServicecharge.Visible = true;
                lblStaxamtonServicecharge.Text = Staxonservicecharge.ToString();
            }
            else
            {

                lblStaxamtonServicechargetitle.Visible = false;
                lblStaxamtonServicecharge.Visible = false;
                lblStaxamtonServicecharge.Text = string.Empty;
            }

            if (SCamtonMachinary > 0 && SCMachinary == true)
            {

                lblSChargeamtonMachinarytitle.Visible = true;
                lblSChargeamtonMachinary.Visible = true;
                lblSChargeamtonMachinary.Text = SCamtonMachinary.ToString();
            }
            else
            {
                lblSChargeamtonMachinarytitle.Visible = false;
                lblSChargeamtonMachinary.Visible = false;
                lblSChargeamtonMachinary.Text = string.Empty;
            }


            if (SCamtonMaintenance > 0 && SCMaintenance == true)
            {

                lblSchargeamtonMaintenancetitle.Visible = true;
                lblSchargeamtonMaintenance.Visible = true;
                lblSchargeamtonMaintenance.Text = SCamtonMaintenance.ToString();
            }
            else
            {
                lblSchargeamtonMaintenancetitle.Visible = false;
                lblSchargeamtonMaintenance.Visible = false;
                lblSchargeamtonMaintenance.Text = string.Empty;
            }


            if (SCamtonMaterial > 0 && SCMaterial == true)
            {

                lblSchargeamtonMaterialtitle.Visible = true;
                lblSchargeamtonMaterial.Visible = true;
                lblSchargeamtonMaterial.Text = SCamtonMaterial.ToString();

            }
            else
            {
                lblSchargeamtonMaterialtitle.Visible = false;
                lblSchargeamtonMaterial.Visible = false;
                lblSchargeamtonMaterial.Text = string.Empty;
            }


            if (SCamtonExtraone > 0 && SCExtraone == true)
            {

                lblSchargeamtonExtraonetitle.Visible = true;
                lblSchargeamtonExtraone.Visible = true;
                lblSchargeamtonExtraone.Text = SCamtonExtraone.ToString();

            }
            else
            {
                lblSchargeamtonExtraonetitle.Visible = false;
                lblSchargeamtonExtraone.Visible = false;
                lblSchargeamtonExtraone.Text = string.Empty;
            }

            if (SCamtonExtratwo > 0 && SCExtratwo == true)
            {

                lblSchargeamtonExtratwotitle.Visible = true;
                lblSchargeamtonExtratwo.Visible = true;
                lblSchargeamtonExtratwo.Text = SCamtonExtratwo.ToString();
            }
            else
            {
                lblSchargeamtonExtratwotitle.Visible = false;
                lblSchargeamtonExtratwo.Visible = false;
                lblSchargeamtonExtratwo.Text = string.Empty;
            }

            #endregion
        }

        public void FillDefaultGird()
        {
            DataTable DefaultTable = new DataTable();
            DefaultTable.Columns.Add("Sid", typeof(int));
            DefaultTable.Columns.Add("Designid", typeof(string));
            DefaultTable.Columns.Add("Type", typeof(string));
            DefaultTable.Columns.Add("Designation", typeof(string));
            // DefaultTable.Columns.Add("DutyHrs", typeof(string));
            DefaultTable.Columns.Add("HSNNumber", typeof(string));
            DefaultTable.Columns.Add("UOM", typeof(string));
            DefaultTable.Columns.Add("NoofEmps", typeof(string));
            DefaultTable.Columns.Add("DutyHours", typeof(string));
            DefaultTable.Columns.Add("payrate", typeof(string));
            DefaultTable.Columns.Add("newpayrate", typeof(string));
            DefaultTable.Columns.Add("paytype", typeof(string));
            DefaultTable.Columns.Add("BasicDa", typeof(string));
            DefaultTable.Columns.Add("OTAmount", typeof(string));
            DefaultTable.Columns.Add("NoOfDays", typeof(string));
            DefaultTable.Columns.Add("Totalamount", typeof(string));
            DefaultTable.Columns.Add("Remarks", typeof(string));
            DefaultTable.Columns.Add("GSTPer", typeof(string));
            DefaultTable.Columns.Add("CGSTPrc", typeof(string));
            DefaultTable.Columns.Add("CGSTAmt", typeof(string));
            DefaultTable.Columns.Add("SGSTPrc", typeof(string));
            DefaultTable.Columns.Add("SGSTAmt", typeof(string));
            DefaultTable.Columns.Add("IGSTPrc", typeof(string));
            DefaultTable.Columns.Add("IGSTAmt", typeof(string));
            DefaultTable.Columns.Add("TotalTaxAmount", typeof(string));
            DefaultTable.Columns.Add("Location", typeof(string));
            DefaultTable.Columns.Add("storecode", typeof(string));
            var cid = ddlclientid.SelectedValue;

            int noOfDaysInMonth = 0;

            if (!cid.Equals("--Select--"))
            {
                #region Month Selection
                int month = 0;
                month = GetMonthBasedOnSelectionDateorMonth();


                #endregion


                #region  Begin Get Contract Id Based on The Last Day

                DateTime DtLastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }
                var ContractID = "";
                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                HtGetContractID.Add("@LastDay", DtLastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();

                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                    return;
                }

                #endregion  End Get Contract Id Based on The Last Day

                int prevmonth = 0;

                if (ddlmonth.SelectedIndex == 1)
                {
                    prevmonth = Timings.Instance.GetIdForPreviousMonth();
                }

                if (ddlmonth.SelectedIndex == 2)
                {
                    prevmonth = Timings.Instance.GetIdForPreviousOneMonth();
                }

                if (ddlmonth.SelectedIndex == 3)
                {
                    prevmonth = Timings.Instance.GetIdForPreviousTwoMonth();
                }

                string year = "";
                string monval = "";

                if (month != 0)
                {

                    if (month.ToString().Length == 3)
                    {
                        monval = month.ToString().Substring(0, 1);
                        year = "20" + month.ToString().Substring(1, 2);
                    }
                    else if (month.ToString().Length == 4)
                    {
                        monval = month.ToString().Substring(0, 2);
                        year = "20" + month.ToString().Substring(2, 2);
                    }

                    noOfDaysInMonth = DateTime.DaysInMonth(int.Parse(year), int.Parse(monval));
                }


                string sqlqry = "select max(isnull(munitidbillno,'')) as billno from MUnitBillBreakup where  UnitId='" + ddlclientid.SelectedValue + "' and month='" + prevmonth + "'";
                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(sqlqry).Result;
                string MaxBillno = string.Empty;
                if (dt.Rows.Count > 0)
                {
                    MaxBillno = dt.Rows[0]["billno"].ToString();

                    if (MaxBillno != "")
                    {
                        var query = @"select Designation,NoofEmps,DutyHours,PayRate,PayRateType as paytype,monthlydays as NoOfDays,BasicDa,Totalamount,isnull(NewPayRate,0) as NewPayRate,isnull(otamount,0) as otamount,'' as designid,remarks,'' as type,HSNNumber,UOM,GSTPer,CGSTPrc,CGSTAmt,SGSTPrc,SGSTAmt,IGSTPrc,IGSTAmt,TotalTaxAmount,'' as Extra,isnull(EmpName,'') as Location,isnull(storecode,'') as storecode  from MUnitBillBreakup  where UnitId='" + ddlclientid.SelectedValue + "' and month='" + prevmonth + "' and munitidbillno='" + MaxBillno + "' order by sino ";
                        var griddata = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;
                        DefaultTable = griddata;
                        if (ddlType.SelectedIndex == 0)
                        {
                            gvClientBilling.Columns[3].Visible = true;
                            gvClientBilling.Columns[7].Visible = false;
                            gvClientBilling.Columns[8].Visible = false;
                            gvClientBilling.Columns[9].Visible = true;
                            gvClientBilling.Columns[12].Visible = false;
                            gvClientBilling.Columns[13].Visible = false;
                            gvClientBilling.Columns[14].Visible = false;
                            gvClientBilling.Columns[15].Visible = false;
                            gvClientBilling.Columns[16].Visible = false;

                        }
                        else if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            if (ddlType.SelectedIndex == 1)
                            {
                                gvClientBilling.Columns[1].Visible = true;
                                gvClientBilling.Columns[7].Visible = false;
                                gvClientBilling.Columns[3].Visible = true;

                            }
                            else if (ddlType.SelectedIndex == 2)
                            {
                                gvClientBilling.Columns[3].Visible = true;
                                gvClientBilling.Columns[7].Visible = true;

                            }

                            gvClientBilling.Columns[9].Visible = true;
                            gvClientBilling.Columns[8].Visible = true;
                            gvClientBilling.Columns[12].Visible = false;
                            gvClientBilling.Columns[13].Visible = false;
                            gvClientBilling.Columns[14].Visible = false;
                            gvClientBilling.Columns[15].Visible = false;
                            gvClientBilling.Columns[16].Visible = false;

                        }

                        else
                        {
                            gvClientBilling.Columns[3].Visible = true;
                            gvClientBilling.Columns[7].Visible = false;
                            gvClientBilling.Columns[8].Visible = true;
                            gvClientBilling.Columns[9].Visible = true;
                            gvClientBilling.Columns[12].Visible = true;
                            gvClientBilling.Columns[13].Visible = true;
                            gvClientBilling.Columns[14].Visible = true;
                            gvClientBilling.Columns[15].Visible = true;
                            gvClientBilling.Columns[16].Visible = true;

                        }

                    }
                    else
                    {
                        var query = @"select d.Design as Designation,'' as designid,
	                               ISNULL(cd.Quantity,0) as NoofEmps,
                                   ISNULL(cd.DutyHrs,0) as DutyHrs,
	                               ISNULL(cad.Duties,0) as DutyHours,
	                               ISNULL(Amount,0) as payrate,
                                    0 as newpayrate,
	                               cd.PayType as paytype,0 as BasicDa,0 as OTAmount,cd.NoOfDays,0 as Totalamount,'' as Remarks,'' as type,'' as Branch,
                                   '' as HSNNumber,'' as UOM,0 as GSTPer,0 as CGSTPrc,0 as CGSTAmt,0 as SGSTPrc,0 as SGSTAmt,0 as IGSTPrc,0 as IGSTAmt,0 as TotalTaxAmount,'' as Extra,'' as Location,'' as storecode
	                        from Designations d 
                            inner join ContractDetails cd on d.DesignId = cd.Designations
                            left outer join ClientAttenDance cad on cd.ClientID = cad.ClientId and cd.Designations = cad.Desingnation 
                            and cad.[month]= " + month.ToString() + " where cd.ClientID = '" + cid + "' and cd.contractid='" + ContractID + "'";

                        var griddata = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;
                        DefaultTable = griddata;
                        if (ddlType.SelectedIndex == 0)
                        {
                            gvClientBilling.Columns[3].Visible = true;
                            gvClientBilling.Columns[7].Visible = false;
                            gvClientBilling.Columns[8].Visible = false;
                            gvClientBilling.Columns[9].Visible = true;
                            gvClientBilling.Columns[12].Visible = false;
                            gvClientBilling.Columns[13].Visible = false;
                            gvClientBilling.Columns[14].Visible = false;
                            gvClientBilling.Columns[15].Visible = false;
                            gvClientBilling.Columns[16].Visible = false;

                        }
                        else if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            if (ddlType.SelectedIndex == 1)
                            {
                                gvClientBilling.Columns[7].Visible = false;
                                gvClientBilling.Columns[3].Visible = true;
                            }
                            else if (ddlType.SelectedIndex == 2)
                            {
                                gvClientBilling.Columns[3].Visible = true;
                                gvClientBilling.Columns[7].Visible = true;

                            }

                            gvClientBilling.Columns[8].Visible = true;
                            gvClientBilling.Columns[9].Visible = true;
                            gvClientBilling.Columns[12].Visible = false;
                            gvClientBilling.Columns[13].Visible = false;
                            gvClientBilling.Columns[14].Visible = false;
                            gvClientBilling.Columns[15].Visible = false;
                            gvClientBilling.Columns[16].Visible = false;


                        }
                        else
                        {
                            gvClientBilling.Columns[3].Visible = true;
                            gvClientBilling.Columns[7].Visible = false;
                            gvClientBilling.Columns[8].Visible = true;
                            gvClientBilling.Columns[9].Visible = true;
                            gvClientBilling.Columns[12].Visible = true;
                            gvClientBilling.Columns[13].Visible = true;
                            gvClientBilling.Columns[14].Visible = true;
                            gvClientBilling.Columns[15].Visible = true;
                            gvClientBilling.Columns[16].Visible = true;

                        }

                    }
                }
                else
                {
                    var query = @"select d.Design as Designation,'' as designid,
	                               ISNULL(cd.Quantity,0) as NoofEmps,
                                   ISNULL(cd.DutyHrs,0) as DutyHrs,
	                               ISNULL(cad.Duties,0) as DutyHours,
	                               ISNULL(Amount,0) as payrate,
                                   0 as newpayrate,
	                               cd.PayType as paytype,0 as BasicDa,0 as OTAmount,cd.NoOfDays,0 as Totalamount,'' as Remarks,'' as type,'' as Branch ,
                                   '' as HSNNumber,'' as UOM,0 as GSTPer,0 as CGSTPrc,0 as CGSTAmt,0 as SGSTPrc,0 as SGSTAmt,0 as IGSTPrc,0 as IGSTAmt,0 as TotalTaxAmount,'' as Extra,'' as Location,'' as storecode
	                        from Designations d 
                            inner join ContractDetails cd on d.DesignId = cd.Designations
                            left outer join ClientAttenDance cad on cd.ClientID = cad.ClientId and cd.Designations = cad.Desingnation 
                            and cad.[month]= " + month.ToString() + " where cd.ClientID = '" + cid + "' and cd.contractid='" + ContractID + "'";

                    var griddata = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;

                    DefaultTable = griddata;
                    if (ddlType.SelectedIndex == 0)
                    {
                        gvClientBilling.Columns[3].Visible = true;
                        gvClientBilling.Columns[7].Visible = false;
                        gvClientBilling.Columns[8].Visible = false;
                        gvClientBilling.Columns[9].Visible = true;
                        gvClientBilling.Columns[12].Visible = false;
                        gvClientBilling.Columns[13].Visible = false;
                        gvClientBilling.Columns[14].Visible = false;
                        gvClientBilling.Columns[15].Visible = false;
                        gvClientBilling.Columns[16].Visible = false;

                    }
                    else if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                    {
                        if (ddlType.SelectedIndex == 1)
                        {
                            gvClientBilling.Columns[7].Visible = false;
                            gvClientBilling.Columns[3].Visible = true;
                        }
                        else if (ddlType.SelectedIndex == 2)
                        {
                            gvClientBilling.Columns[7].Visible = true;
                            gvClientBilling.Columns[3].Visible = true;

                        }

                        gvClientBilling.Columns[8].Visible = true;
                        gvClientBilling.Columns[9].Visible = true;
                        gvClientBilling.Columns[3].Visible = true;
                        gvClientBilling.Columns[12].Visible = false;
                        gvClientBilling.Columns[13].Visible = false;
                        gvClientBilling.Columns[14].Visible = false;
                        gvClientBilling.Columns[15].Visible = false;
                        gvClientBilling.Columns[16].Visible = false;


                    }
                    else
                    {
                        gvClientBilling.Columns[3].Visible = true;
                        gvClientBilling.Columns[7].Visible = false;
                        gvClientBilling.Columns[8].Visible = true;
                        gvClientBilling.Columns[9].Visible = true;
                        gvClientBilling.Columns[12].Visible = true;
                        gvClientBilling.Columns[13].Visible = true;
                        gvClientBilling.Columns[14].Visible = true;
                        gvClientBilling.Columns[15].Visible = true;
                        gvClientBilling.Columns[16].Visible = true;

                    }

                }
            }

            var sl = DefaultTable.Rows.Count;
            var count = DefaultTable.Rows.Count > 0 ? DefaultTable.Rows.Count + 5 : 1;

            for (int i = sl + 1; i < count; i++)
            {
                DataRow dr = DefaultTable.NewRow();
                //dr["Sid"] = i;
                dr["Designation"] = "";
                dr["designid"] = "";
                dr["NoofEmps"] = 0;
                dr["Type"] = "";
                dr["DutyHours"] = 0;
                dr["payrate"] = 0;
                dr["newpayrate"] = 0;
                dr["paytype"] = 0;
                dr["BasicDa"] = 0;
                dr["OTAmount"] = 0;
                dr["NoOfDays"] = 1;
                dr["Totalamount"] = 0;
                dr["Remarks"] = "";
                dr["GSTPer"] = 0;
                dr["CGSTPrc"] = 0;
                dr["CGSTAmt"] = 0;
                dr["SGSTPrc"] = 0;
                dr["SGSTAmt"] = 0;
                dr["IGSTPrc"] = 0;
                dr["IGSTAmt"] = 0;
                dr["TotalTaxAmount"] = 0;
                dr["HSNNumber"] = "";
                dr["UOM"] = "";
                dr["Location"] = "";
                dr["storecode"] = "";
                DefaultTable.Rows.Add(dr);
            }

            ViewState["DTDefaultManual"] = DefaultTable;
            gvClientBilling.DataSource = DefaultTable;
            gvClientBilling.DataBind();

            for (int i = 0; i < DefaultTable.Rows.Count; i++)
            {
                DropDownList CDutytype = gvClientBilling.Rows[i].FindControl("ddldutytype") as DropDownList;

                if (String.IsNullOrEmpty(DefaultTable.Rows[i]["paytype"].ToString()) != false)
                {
                    CDutytype.SelectedIndex = 0;
                }
                else
                {
                    if (DefaultTable.Rows[i]["paytype"].ToString().Trim().Length > 0)
                    {
                        CDutytype.SelectedIndex = Convert.ToInt32(DefaultTable.Rows[i]["paytype"].ToString().Trim());
                    }
                }


                DropDownList ddlnod = gvClientBilling.Rows[i].FindControl("ddlnod") as DropDownList;

                if (String.IsNullOrEmpty(DefaultTable.Rows[i]["NoOfDays"].ToString()) != false)
                {
                    ddlnod.SelectedIndex = 0;
                }
                else
                {
                    if (DefaultTable.Rows[i]["NoOfDays"].ToString().Trim().Length > 0)
                    {
                        ddlnod.SelectedValue = noOfDaysInMonth.ToString();
                    }
                }

            }

            btnAddNewRow.Visible = (gvClientBilling.Rows.Count > 0);
            btnCalculateTotals.Visible = (gvClientBilling.Rows.Count > 0);

            ScriptManager.RegisterStartupScript(this, GetType(), "bindautofilldesgs", "bindautofilldesgs();", true);

        }

        protected void btnAddNewRow_Click(object sender, EventArgs e)
        {
            if (ddlType.SelectedIndex == 0)
            {

                DataTable dt = new DataTable();
                dt.Columns.Add("sno");
                dt.Columns.Add("Designid");
                dt.Columns.Add("type");
                dt.Columns.Add("Noofdays");
                dt.Columns.Add("Designation");
                dt.Columns.Add("NoofEmps");
                dt.Columns.Add("DutyHours");
                dt.Columns.Add("payrate");
                dt.Columns.Add("newpayrate");
                dt.Columns.Add("BasicDa");
                dt.Columns.Add("OTAmount");

                dt.Columns.Add("Totalamount");
                //dt.Columns.Add("Remarks");
                dt.Columns.Add("GSTPer");
                dt.Columns.Add("CGSTPrc");
                dt.Columns.Add("CGSTAmt");
                dt.Columns.Add("SGSTPrc");
                dt.Columns.Add("SGSTAmt");

                dt.Columns.Add("IGSTPrc");
                dt.Columns.Add("IGSTAmt");
                dt.Columns.Add("TotalTaxAmount");
                dt.Columns.Add("HSNNumber");
                dt.Columns.Add("UOM");
                dt.Columns.Add("Extra");
                dt.Columns.Add("Location");
                dt.Columns.Add("storecode");
                foreach (GridViewRow gvRow in gvClientBilling.Rows)
                {

                    DataRow dr = dt.NewRow();
                    dr["sno"] = ((Label)gvRow.FindControl("lblSno")).Text;
                    dr["designid"] = ((Label)gvRow.FindControl("lbldesignid")).Text;

                    dr["type"] = ((DropDownList)gvRow.FindControl("ddldutytype")).SelectedValue;
                    dr["Noofdays"] = ((DropDownList)gvRow.FindControl("ddlnod")).SelectedValue;
                    dr["Designation"] = ((TextBox)gvRow.FindControl("lbldesgn")).Text;
                    dr["NoofEmps"] = ((TextBox)gvRow.FindControl("lblnoofemployees")).Text;
                    dr["DutyHours"] = ((TextBox)gvRow.FindControl("lblNoOfDuties")).Text; ;
                    dr["payrate"] = ((TextBox)gvRow.FindControl("lblpayrate")).Text;
                    dr["newpayrate"] = ((TextBox)gvRow.FindControl("txtNewPayRate")).Text;
                    dr["BasicDa"] = ((TextBox)gvRow.FindControl("lblda")).Text;
                    dr["OTAmount"] = ((Label)gvRow.FindControl("lblOtAmount")).Text;
                    dr["Totalamount"] = ((TextBox)gvRow.FindControl("lblAmount")).Text;
                    dr["GSTPer"] = ((TextBox)gvRow.FindControl("lblGSTper")).Text;
                    dr["CGSTPrc"] = ((TextBox)gvRow.FindControl("lblCGSTPrc")).Text;
                    dr["CGSTAmt"] = ((TextBox)gvRow.FindControl("lblCGSTAmount")).Text;
                    dr["SGSTPrc"] = ((TextBox)gvRow.FindControl("lblSGSTPrc")).Text;
                    dr["SGSTAmt"] = ((TextBox)gvRow.FindControl("lblSGSTAmount")).Text;
                    dr["IGSTPrc"] = ((TextBox)gvRow.FindControl("lblIGSTPrc")).Text;
                    dr["IGSTAmt"] = ((TextBox)gvRow.FindControl("lblIGSTAmount")).Text;
                    dr["TotalTaxAmount"] = ((TextBox)gvRow.FindControl("lblTotalTaxmount")).Text;
                    dr["HSNNumber"] = ((TextBox)gvRow.FindControl("txtHSNNumber")).Text;
                    dr["UOM"] = ((TextBox)gvRow.FindControl("txtUOM")).Text;
                    dr["Extra"] = ((Label)gvRow.FindControl("lblextra")).Text;
                    dr["Location"] = ((TextBox)gvRow.FindControl("txtempname")).Text;
                    dr["storecode"] = ((TextBox)gvRow.FindControl("txtstorecode")).Text;
                    ((Label)gvRow.FindControl("lblnoofdays")).Text = ((DropDownList)gvRow.FindControl("ddlnod")).SelectedValue;
                    dt.Rows.Add(dr);
                }

                DataRow dr1 = dt.NewRow();
                dr1["sno"] = "";
                dr1["Designation"] = "";
                dr1["designid"] = "";
                dr1["NoofEmps"] = "0";
                dr1["type"] = "0";
                dr1["Noofdays"] = "0";
                dr1["DutyHours"] = "0";
                dr1["payrate"] = "0";
                dr1["newpayrate"] = "0";
                dr1["BasicDa"] = "0";
                dr1["OTAmount"] = "9999999999";
                dr1["Totalamount"] = "0";
                dr1["GSTPer"] = "0";
                dr1["CGSTPrc"] = "0";
                dr1["CGSTAmt"] = "0";
                dr1["SGSTPrc"] = "0";
                dr1["SGSTAmt"] = "0";
                dr1["IGSTPrc"] = "0";
                dr1["IGSTAmt"] = "0";

                dr1["TotalTaxAmount"] = "0";
                dr1["HSNNumber"] = "";
                dr1["UOM"] = "";
                dr1["Extra"] = "E";
                dr1["Location"] = "";
                dr1["storecode"] = "";

                dt.Rows.Add(dr1);

                gvClientBilling.DataSource = dt;
                gvClientBilling.DataBind();

                foreach (GridViewRow gvRow in gvClientBilling.Rows)
                {
                    if (gvRow.RowType == DataControlRowType.DataRow)
                    {

                        ((DropDownList)gvRow.FindControl("ddlnod")).SelectedValue = ((Label)gvRow.FindControl("lblnoofdays")).Text;

                        if (((Label)gvRow.FindControl("lblextra")).Text.Contains("E"))
                        {
                            (gvRow.FindControl("lbldesgn") as TextBox).Enabled = true;
                            (gvRow.FindControl("ddldutytype") as DropDownList).Enabled = true;
                            (gvRow.FindControl("lblnoofemployees") as TextBox).Enabled = true;
                            (gvRow.FindControl("lblNoOfDuties") as TextBox).Enabled = true;
                            (gvRow.FindControl("lblpayrate") as TextBox).Enabled = true;
                            (gvRow.FindControl("lblda") as TextBox).Enabled = true;
                            (gvRow.FindControl("txtHSNNumber") as TextBox).Enabled = true;
                            (gvRow.FindControl("lblAmount") as TextBox).Enabled = true;
                            (gvRow.FindControl("lblTotalTaxmount") as TextBox).Enabled = true;
                            (gvRow.FindControl("chkExtra") as CheckBox).Checked = true;
                            (gvRow.FindControl("ddlnod") as DropDownList).Enabled = true;
                        }
                        else
                        {
                            (gvRow.FindControl("lbldesgn") as TextBox).Enabled = false;
                            (gvRow.FindControl("ddldutytype") as DropDownList).Enabled = false;
                            (gvRow.FindControl("lblnoofemployees") as TextBox).Enabled = false;
                            (gvRow.FindControl("lblNoOfDuties") as TextBox).Enabled = false;
                            (gvRow.FindControl("lblpayrate") as TextBox).Enabled = false;
                            (gvRow.FindControl("lblda") as TextBox).Enabled = false;
                            (gvRow.FindControl("txtHSNNumber") as TextBox).Enabled = false;
                            (gvRow.FindControl("lblAmount") as TextBox).Enabled = false;
                            (gvRow.FindControl("lblTotalTaxmount") as TextBox).Enabled = false;
                            (gvRow.FindControl("chkExtra") as CheckBox).Checked = false;
                            (gvRow.FindControl("ddlnod") as DropDownList).Enabled = false;
                        }


                    }
                }


            }

            else
            {
                AddNewRowArrear();
                EnabledFields();
            }

        }

        protected void btnCalculateTotals_Click(object sender, EventArgs e)
        {
            CalculateTotals();
        }

        protected void AddNewRowArrear()
        {
            try
            {

                int rowIndex = 0;

                if (ViewState["DTDefaultManual"] != null)
                {
                    DataTable dtCurrentTable = (DataTable)ViewState["DTDefaultManual"];
                    DataRow drCurrentRow = null;
                    if (dtCurrentTable.Rows.Count > 0)
                    {
                        for (int i = 1; i <= dtCurrentTable.Rows.Count; i++)
                        {
                            //extract the TextBox values
                            TextBox txtgvdesgn = (TextBox)gvClientBilling.Rows[rowIndex].Cells[2].FindControl("lbldesgn");
                            TextBox txtHSNNumber = (TextBox)gvClientBilling.Rows[rowIndex].Cells[3].FindControl("txtHSNNumber");
                            TextBox txtnoofemployees = (TextBox)gvClientBilling.Rows[rowIndex].Cells[4].FindControl("lblnoofemployees");
                            TextBox txtNoOfDuties = (TextBox)gvClientBilling.Rows[rowIndex].Cells[5].FindControl("lblNoOfDuties");
                            TextBox txtPayRate = (TextBox)gvClientBilling.Rows[rowIndex].Cells[6].FindControl("lblpayrate");
                            TextBox txtNewPayRate = (TextBox)gvClientBilling.Rows[rowIndex].Cells[7].FindControl("txtNewPayRate");
                            DropDownList ddldutytype = (DropDownList)gvClientBilling.Rows[rowIndex].Cells[8].FindControl("ddldutytype");
                            DropDownList ddlnod = (DropDownList)gvClientBilling.Rows[rowIndex].Cells[9].FindControl("ddlnod");
                            TextBox txtda = (TextBox)gvClientBilling.Rows[rowIndex].Cells[10].FindControl("lblda");
                            TextBox txtAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[11].FindControl("lblAmount");
                            TextBox lblGSTper = (TextBox)gvClientBilling.Rows[rowIndex].Cells[12].FindControl("lblGSTper");
                            TextBox lblCGSTAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[13].FindControl("lblCGSTAmount");
                            TextBox lblSGSTAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[14].FindControl("lblSGSTAmount");
                            TextBox lblIGSTAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[15].FindControl("lblIGSTAmount");
                            TextBox lblTotalTaxmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[16].FindControl("lblTotalTaxmount");
                            TextBox txtempname = (TextBox)gvClientBilling.Rows[rowIndex].Cells[1].FindControl("txtempname");
                            TextBox txtstorecode = (TextBox)gvClientBilling.Rows[rowIndex].Cells[1].FindControl("txtstorecode");

                            drCurrentRow = dtCurrentTable.NewRow();
                            // drCurrentRow["Sid"] = i + 1;

                            dtCurrentTable.Rows[i - 1]["Designation"] = txtgvdesgn.Text;
                            dtCurrentTable.Rows[i - 1]["HSNNumber"] = txtHSNNumber.Text;
                            dtCurrentTable.Rows[i - 1]["NoofEmps"] = txtnoofemployees.Text.Trim() == "" ? 0 : Convert.ToInt32(txtnoofemployees.Text);
                            dtCurrentTable.Rows[i - 1]["DutyHours"] = txtNoOfDuties.Text.Trim() == "" ? 0 : Convert.ToSingle(txtNoOfDuties.Text);
                            dtCurrentTable.Rows[i - 1]["payrate"] = txtPayRate.Text.Trim() == "" ? 0 : Convert.ToSingle(txtPayRate.Text);
                            dtCurrentTable.Rows[i - 1]["newpayrate"] = txtNewPayRate.Text.Trim() == "" ? 0 : Convert.ToSingle(txtNewPayRate.Text);
                            dtCurrentTable.Rows[i - 1]["paytype"] = ddldutytype.SelectedValue;
                            dtCurrentTable.Rows[i - 1]["NoOfDays"] = ddlnod.SelectedValue;
                            dtCurrentTable.Rows[i - 1]["BasicDa"] = txtda.Text.Trim() == "" ? 0 : Convert.ToSingle(txtda.Text);
                            dtCurrentTable.Rows[i - 1]["Totalamount"] = txtAmount.Text.Trim() == "" ? 0 : Convert.ToSingle(txtAmount.Text);
                            dtCurrentTable.Rows[i - 1]["GSTper"] = lblGSTper.Text.Trim() == "" ? 0 : Convert.ToSingle(lblGSTper.Text);
                            dtCurrentTable.Rows[i - 1]["CGSTAmt"] = lblCGSTAmount.Text.Trim() == "" ? 0 : Convert.ToSingle(lblCGSTAmount.Text);
                            dtCurrentTable.Rows[i - 1]["SGSTAmt"] = lblSGSTAmount.Text.Trim() == "" ? 0 : Convert.ToSingle(lblSGSTAmount.Text);
                            dtCurrentTable.Rows[i - 1]["IGSTAmt"] = lblIGSTAmount.Text.Trim() == "" ? 0 : Convert.ToSingle(lblIGSTAmount.Text);
                            dtCurrentTable.Rows[i - 1]["TotalTaxAmount"] = lblTotalTaxmount.Text.Trim() == "" ? 0 : Convert.ToSingle(lblTotalTaxmount.Text);
                            dtCurrentTable.Rows[i - 1]["Location"] = txtempname.Text;
                            dtCurrentTable.Rows[i - 1]["storecode"] = txtstorecode.Text;

                            rowIndex++;
                        }
                        dtCurrentTable.Rows.Add(drCurrentRow);
                        ViewState["DTDefaultManual"] = dtCurrentTable;

                        gvClientBilling.DataSource = dtCurrentTable;
                        gvClientBilling.DataBind();
                    }
                }
                else
                {
                    Response.Write("ViewState is null");
                }
                SetPreviousDataArrear();

            }
            catch (Exception ex)
            {

            }
        }

        private void SetPreviousDataArrear()
        {
            int rowIndex = 0;
            if (ViewState["DTDefaultManual"] != null)
            {
                DataTable dt = (DataTable)ViewState["DTDefaultManual"];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        TextBox txtgvdesgn = (TextBox)gvClientBilling.Rows[rowIndex].Cells[2].FindControl("lbldesgn");
                        TextBox txtHSNNumber = (TextBox)gvClientBilling.Rows[rowIndex].Cells[3].FindControl("txtHSNNumber");
                        TextBox txtnoofemployees = (TextBox)gvClientBilling.Rows[rowIndex].Cells[4].FindControl("lblnoofemployees");
                        TextBox txtNoOfDuties = (TextBox)gvClientBilling.Rows[rowIndex].Cells[5].FindControl("lblNoOfDuties");
                        TextBox txtPayRate = (TextBox)gvClientBilling.Rows[rowIndex].Cells[6].FindControl("lblpayrate");
                        TextBox txtNewPayRate = (TextBox)gvClientBilling.Rows[rowIndex].Cells[7].FindControl("txtNewPayRate");
                        DropDownList ddldutytype = (DropDownList)gvClientBilling.Rows[rowIndex].Cells[8].FindControl("ddldutytype");
                        DropDownList ddlnod = (DropDownList)gvClientBilling.Rows[rowIndex].Cells[9].FindControl("ddlnod");
                        TextBox txtda = (TextBox)gvClientBilling.Rows[rowIndex].Cells[10].FindControl("lblda");
                        TextBox txtAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[11].FindControl("lblAmount");
                        TextBox lblGSTper = (TextBox)gvClientBilling.Rows[rowIndex].Cells[12].FindControl("lblGSTper");
                        TextBox lblCGSTAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[13].FindControl("lblCGSTAmount");
                        TextBox lblSGSTAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[14].FindControl("lblSGSTAmount");
                        TextBox lblIGSTAmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[15].FindControl("lblIGSTAmount");
                        TextBox lblTotalTaxmount = (TextBox)gvClientBilling.Rows[rowIndex].Cells[16].FindControl("lblTotalTaxmount");
                        TextBox txtempname = (TextBox)gvClientBilling.Rows[rowIndex].Cells[1].FindControl("txtempname");

                        txtgvdesgn.Text = dt.Rows[i]["Designation"].ToString();
                        txtHSNNumber.Text = dt.Rows[i]["HSNNumber"].ToString();
                        txtnoofemployees.Text = dt.Rows[i]["NoofEmps"].ToString();
                        txtNoOfDuties.Text = dt.Rows[i]["DutyHours"].ToString();
                        txtPayRate.Text = dt.Rows[i]["payrate"].ToString();
                        txtNewPayRate.Text = dt.Rows[i]["newpayrate"].ToString();
                        ddldutytype.SelectedValue = dt.Rows[i]["paytype"].ToString();
                        ddlnod.SelectedValue = dt.Rows[i]["NoOfDays"].ToString();
                        txtda.Text = dt.Rows[i]["BasicDa"].ToString();
                        txtAmount.Text = dt.Rows[i]["Totalamount"].ToString();
                        lblGSTper.Text = dt.Rows[i]["GSTper"].ToString();
                        lblCGSTAmount.Text = dt.Rows[i]["CGSTAmt"].ToString();
                        lblSGSTAmount.Text = dt.Rows[i]["SGSTAmt"].ToString();
                        lblIGSTAmount.Text = dt.Rows[i]["IGSTAmt"].ToString();
                        lblTotalTaxmount.Text = dt.Rows[i]["TotalTaxAmount"].ToString();
                        txtempname.Text = dt.Rows[i]["Location"].ToString();
                        rowIndex++;
                    }
                }
            }
        }

        private void CalculateTotals()
        {
            try
            {

                DateTime DtLastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }

                var ContractID = "";


                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                HtGetContractID.Add("@LastDay", DtLastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not Avaialable For This Client.');", true);

                }


                string qry = "select roundoff,CGST,SGST,IGST,IncludeST,GSTLineItem from contracts where clientid='" + ddlclientid.SelectedValue + "' and contractid='" + ContractID + "'";
                DataTable dtqry = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;

                bool roundoff = false;
                var CCGST = false;
                var CSGST = false;
                var CIGST = false;
                var STInclude = false;
                var GSTLineItem = false;

                if (dtqry.Rows.Count > 0)
                {
                    roundoff = bool.Parse(dtqry.Rows[0]["roundoff"].ToString());
                    CCGST = bool.Parse(dtqry.Rows[0]["CGST"].ToString());
                    CSGST = bool.Parse(dtqry.Rows[0]["SGST"].ToString());
                    CIGST = bool.Parse(dtqry.Rows[0]["IGST"].ToString());
                    STInclude = bool.Parse(dtqry.Rows[0]["IncludeST"].ToString());
                    GSTLineItem = bool.Parse(dtqry.Rows[0]["GSTLineItem"].ToString());
                }

                decimal totalamt = 0;

                decimal TotalbeforeTax = 0;

                for (int i = 0; i < gvClientBilling.Rows.Count; i++)
                {
                    DropDownList ddldtype = gvClientBilling.Rows[i].FindControl("ddldutytype") as DropDownList;
                    DropDownList ddlnod = gvClientBilling.Rows[i].FindControl("ddlnod") as DropDownList;
                    TextBox txtDesg = gvClientBilling.Rows[i].FindControl("lbldesgn") as TextBox;
                    TextBox txtpayrate = gvClientBilling.Rows[i].FindControl("lblpayrate") as TextBox;
                    TextBox txtNewPayRate = gvClientBilling.Rows[i].FindControl("txtNewPayRate") as TextBox;
                    //HiddenField hdNOD = gvClientBilling.Rows[i].FindControl("hdNOD") as HiddenField;
                    TextBox txtnod = gvClientBilling.Rows[i].FindControl("lblNoOfDuties") as TextBox;
                    TextBox txtdutyamt = gvClientBilling.Rows[i].FindControl("lblda") as TextBox;
                    TextBox txtTotal = gvClientBilling.Rows[i].FindControl("lblAmount") as TextBox;
                    TextBox txtnoofemplyes = gvClientBilling.Rows[i].FindControl("lblnoofemployees") as TextBox;
                    TextBox txtHSNNumber = gvClientBilling.Rows[i].FindControl("txtHSNNumber") as TextBox;
                    TextBox lblCGSTAmount = gvClientBilling.Rows[i].FindControl("lblCGSTAmount") as TextBox;
                    TextBox lblCGSTPrc = gvClientBilling.Rows[i].FindControl("lblCGSTPrc") as TextBox;
                    TextBox lblSGSTAmount = gvClientBilling.Rows[i].FindControl("lblSGSTAmount") as TextBox;
                    TextBox lblSGSTPrc = gvClientBilling.Rows[i].FindControl("lblSGSTPrc") as TextBox;
                    TextBox lblIGSTAmount = gvClientBilling.Rows[i].FindControl("lblIGSTAmount") as TextBox;
                    TextBox lblIGSTPrc = gvClientBilling.Rows[i].FindControl("lblIGSTPrc") as TextBox;
                    TextBox lblTotalTaxmount = gvClientBilling.Rows[i].FindControl("lblTotalTaxmount") as TextBox;
                    TextBox lblGSTper = gvClientBilling.Rows[i].FindControl("lblGSTper") as TextBox;

                    if (!string.IsNullOrEmpty(txtDesg.Text.Trim()))
                    {
                        switch (ddldtype.SelectedIndex)
                        {
                            case 4:
                                if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 3)
                                {
                                    txtdutyamt.Text = txtTotal.Text = txtpayrate.Text;
                                }
                                else if (ddlType.SelectedIndex == 2)
                                {

                                    txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtNewPayRate.Text) - Convert.ToDecimal(txtpayrate.Text)).ToString("0");
                                }

                                break;
                            case 1:
                            case 2:
                            case 3:

                                if (txtpayrate.Text == "")
                                {
                                    txtpayrate.Text = "0";
                                }

                                if (txtnod.Text == "")
                                {
                                    txtnod.Text = "0";
                                }

                                if (txtNewPayRate.Text == "")
                                {
                                    txtNewPayRate.Text = "0";
                                }

                                if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 3)
                                {

                                    if (roundoff == true)
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtpayrate.Text) * Convert.ToDecimal(txtnod.Text)).ToString("0.##");
                                    }
                                    else
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtpayrate.Text) * Convert.ToDecimal(txtnod.Text)).ToString("0");
                                    }
                                }
                                else if (ddlType.SelectedIndex == 2)
                                {
                                    if (roundoff == true)
                                    {
                                        txtdutyamt.Text = txtTotal.Text = ((Convert.ToDecimal(txtNewPayRate.Text) - (Convert.ToDecimal(txtpayrate.Text))) * Convert.ToDecimal(txtnod.Text)).ToString("0.##");
                                    }
                                    else
                                    {
                                        txtdutyamt.Text = txtTotal.Text = ((Convert.ToDecimal(txtNewPayRate.Text) - (Convert.ToDecimal(txtpayrate.Text))) * Convert.ToDecimal(txtnod.Text)).ToString("0");

                                    }
                                }
                                break;
                            case 0:
                                if (txtpayrate.Text == "")
                                {
                                    txtpayrate.Text = "0";
                                }

                                if (txtnod.Text == "")
                                {
                                    txtnod.Text = "0";
                                }

                                if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 3)
                                {
                                    if (roundoff == true)
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtpayrate.Text) / Convert.ToDecimal(ddlnod.SelectedValue) * Convert.ToDecimal(txtnod.Text)).ToString("0.##");
                                    }
                                    else
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtpayrate.Text) / Convert.ToDecimal(ddlnod.SelectedValue) * Convert.ToDecimal(txtnod.Text)).ToString("0");

                                    }
                                }
                                else if (ddlType.SelectedIndex == 2)
                                {
                                    if (roundoff == true)
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (((Convert.ToDecimal(txtNewPayRate.Text) - (Convert.ToDecimal(txtpayrate.Text))) / Convert.ToDecimal(ddlnod.SelectedValue)) * Convert.ToDecimal(txtnod.Text)).ToString("0.##");
                                    }
                                    else
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (((Convert.ToDecimal(txtNewPayRate.Text) - (Convert.ToDecimal(txtpayrate.Text))) / Convert.ToDecimal(ddlnod.SelectedValue)) * Convert.ToDecimal(txtnod.Text)).ToString("0");

                                    }

                                }

                                break;
                            case 7:
                                if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 3)
                                {
                                    if (roundoff == true)
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtnoofemplyes.Text) * Convert.ToDecimal(txtpayrate.Text)).ToString("0.##");
                                    }
                                    else
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtnoofemplyes.Text) * Convert.ToDecimal(txtpayrate.Text)).ToString("0");

                                    }
                                }
                                else if (ddlType.SelectedIndex == 2)
                                {
                                    if (roundoff == true)
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtnoofemplyes.Text) * ((Convert.ToDecimal(txtNewPayRate.Text) - (Convert.ToDecimal(txtpayrate.Text))))).ToString("0.##");
                                    }
                                    else
                                    {
                                        txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtnoofemplyes.Text) * ((Convert.ToDecimal(txtNewPayRate.Text) - (Convert.ToDecimal(txtpayrate.Text))))).ToString("0");
                                    }
                                }

                                break;
                            default:
                                if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 3)
                                {
                                    txtdutyamt.Text = txtTotal.Text = txtpayrate.Text;
                                }
                                else if (ddlType.SelectedIndex == 2)
                                {
                                    txtdutyamt.Text = txtTotal.Text = (Convert.ToDecimal(txtNewPayRate.Text) - Convert.ToDecimal(txtpayrate.Text)).ToString("0");
                                }

                                break;
                        }





                        if (ddlType.SelectedIndex == 3)
                        {
                            if (!STInclude)
                            {

                                if (CCGST)
                                {
                                    lblCGSTPrc.Text = (decimal.Parse(lblGSTper.Text) / 2).ToString();
                                    lblCGSTAmount.Text = ((decimal.Parse(txtTotal.Text)) / 100 * decimal.Parse(lblCGSTPrc.Text)).ToString("0.00");

                                }
                                else
                                {
                                    lblCGSTAmount.Text = "0";
                                    lblCGSTPrc.Text = "0";
                                }

                                if (CSGST)
                                {
                                    lblSGSTPrc.Text = (decimal.Parse(lblGSTper.Text) / 2).ToString();
                                    lblSGSTAmount.Text = ((decimal.Parse(txtTotal.Text)) / 100 * decimal.Parse(lblSGSTPrc.Text)).ToString("0.00");

                                }
                                else
                                {
                                    lblSGSTAmount.Text = "0";
                                }


                                if (CIGST)
                                {
                                    lblIGSTPrc.Text = (decimal.Parse(lblGSTper.Text)).ToString();
                                    lblIGSTAmount.Text = ((decimal.Parse(txtTotal.Text)) / 100 * decimal.Parse(lblIGSTPrc.Text)).ToString("0.00");
                                }
                                else
                                {
                                    lblIGSTAmount.Text = "0";
                                }
                            }



                            lblTotalTaxmount.Text = (decimal.Parse(txtTotal.Text) + decimal.Parse(lblCGSTAmount.Text) + decimal.Parse(lblSGSTAmount.Text) + decimal.Parse(lblIGSTAmount.Text)).ToString("0.00");

                        }


                        if (ddlType.SelectedIndex != 3)
                        {
                            if (!string.IsNullOrEmpty(txtTotal.Text.Trim()))
                                totalamt += (Convert.ToDecimal(txtTotal.Text.ToString()));
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(lblTotalTaxmount.Text.Trim()))
                                totalamt += (Convert.ToDecimal(lblTotalTaxmount.Text.ToString()));

                        }

                        // totalamt = totalamt.ToString("#.##");

                    }
                }

                var billdtnew = DateTime.Now.ToString("dd/MM/yyyy");

                if (txtbilldate.Text != "")
                {
                    billdtnew = txtbilldate.Text;
                }

                DateTime dt = DateTime.ParseExact(billdtnew, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                // for both "1/1/2000" or "25/1/2000" formats
                string billdt = dt.ToString("MM/dd/yyyy");


                var cid = ddlclientid.SelectedValue;
                var query = @"select * from Contracts where ClientID =  '" + cid + "'";
                var query1 = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2 from TblOptions where '" + billdt + "' between fromdate and todate ";//Gst

                var contractdetails = config.ExecuteAdaptorAsyncWithQueryParams(query).Result;
                var optiondetails = config.ExecuteAdaptorAsyncWithQueryParams(query1).Result;

                decimal ServiceTaxSeparate = Convert.ToDecimal(optiondetails.Rows[0]["ServiceTaxSeparate"].ToString());
                decimal Cess = Convert.ToDecimal(optiondetails.Rows[0]["Cess"].ToString());
                decimal SHEcess = Convert.ToDecimal(optiondetails.Rows[0]["SHECess"].ToString());
                decimal SBcess = Convert.ToDecimal(optiondetails.Rows[0]["SBCess"].ToString());
                decimal KKcess = Convert.ToDecimal(optiondetails.Rows[0]["KKCess"].ToString());

                decimal CGST = Convert.ToDecimal(optiondetails.Rows[0]["CGST"].ToString()); //Gst
                decimal SGST = Convert.ToDecimal(optiondetails.Rows[0]["SGST"].ToString());
                decimal IGST = Convert.ToDecimal(optiondetails.Rows[0]["IGST"].ToString());
                decimal Cess1 = Convert.ToDecimal(optiondetails.Rows[0]["Cess1"].ToString());
                decimal Cess2 = Convert.ToDecimal(optiondetails.Rows[0]["Cess2"].ToString());


                decimal servicetax = 0;
                decimal cesstax = 0;
                decimal sbcesstax = 0;
                decimal kkcesstax = 0;
                decimal educess = 0;
                decimal gtotal = 0;
                decimal servicecharge = 0;
                decimal subtotal = 0;
                decimal Servicechargeamt = 0;
                decimal Machineryamt = 0;
                decimal Materialamt = 0;
                decimal extraonevalueamt = 0;
                decimal extratwovalueamt = 0;
                decimal Electicalamt = 0;
                decimal Discountsamt = 0;
                decimal discounttwovalueamt = 0;

                decimal CGSTTax = 0;   //gst
                decimal SGSTTax = 0;
                decimal IGSTTax = 0;
                decimal Cess1Tax = 0;
                decimal Cess2Tax = 0;

                decimal STCMachineryamt = 0;//Gst
                decimal STCMaterialamt = 0;
                decimal STCextraonevalueamt = 0;
                decimal STCextratwovalueamt = 0;
                decimal STCElecticalamt = 0;

                decimal STDiscountOne = 0;
                decimal STDiscountTwo = 0;
                bool ServiceChargeType = false;

                if (txtMachinery.Text.Length > 0)
                {
                    Machineryamt = Convert.ToDecimal(txtMachinery.Text);
                }
                if (txtMaterial.Text.Length > 0)
                {
                    Materialamt = Convert.ToDecimal(txtMaterial.Text);
                }
                if (txtextraonevalue.Text.Length > 0)
                {
                    extraonevalueamt = Convert.ToDecimal(txtextraonevalue.Text);
                }
                if (txtextratwovalue.Text.Length > 0)
                {
                    extratwovalueamt = Convert.ToDecimal(txtextratwovalue.Text);
                }
                if (txtElectical.Text.Length > 0)
                {
                    Electicalamt = Convert.ToDecimal(txtElectical.Text);
                }
                if (txtDiscounts.Text.Length > 0)
                {
                    Discountsamt = Convert.ToDecimal(txtDiscounts.Text);
                }
                if (txtdiscounttwovalue.Text.Length > 0)
                {
                    discounttwovalueamt = Convert.ToDecimal(txtdiscounttwovalue.Text);
                }


                if (chkSTYesMachinary.Checked == true)  //Gst
                {
                    STCMachineryamt = Machineryamt;
                }
                if (chkSTYesMaterial.Checked == true)
                {
                    STCMaterialamt = Materialamt;
                }
                if (chkSTYesExtraone.Checked == true)
                {
                    STCextraonevalueamt = extraonevalueamt;
                }
                if (chkSTYesExtratwo.Checked == true)
                {
                    STCextratwovalueamt = extratwovalueamt;
                }
                if (chkSTYesElectrical.Checked == true)
                {
                    STCElecticalamt = Electicalamt;
                }

                if (chkSTDiscountone.Checked == true)
                {
                    STDiscountOne = Discountsamt;
                }

                if (chkSTDiscounttwo.Checked == true)
                {
                    STDiscountTwo = discounttwovalueamt;
                }


                if (contractdetails.Rows.Count > 0)
                {
                    if (TxtservicechrgPrc.Text == "")
                    {
                        TxtservicechrgPrc.Text = "0";
                    }

                    ServiceChargeType = Convert.ToBoolean(contractdetails.Rows[0]["ServiceChargeType"].ToString());


                    //  Txtservicechrg.Text = contractdetails.Rows[0]["ServiceCharge"].ToString();
                    servicecharge = Convert.ToDecimal(TxtservicechrgPrc.Text);
                    if (ServiceChargeType == true)
                    {
                        Servicechargeamt = Convert.ToDecimal(lblServiceCharges.Text);
                    }
                    else
                    {
                        if (roundoff == true)
                        {
                            lblServiceCharges.Text = (totalamt * (servicecharge / 100)).ToString("0.##");
                        }
                        else
                        {
                            lblServiceCharges.Text = (totalamt * (servicecharge / 100)).ToString("0");

                        }

                        if (lblServiceCharges.Text == "")
                        {
                            lblServiceCharges.Text = "0";
                        }
                    }
                    Servicechargeamt = Convert.ToDecimal(lblServiceCharges.Text);
                    subtotal = totalamt + Servicechargeamt;

                    if (roundoff == true)
                    {
                        lblTotalResources.Text = subtotal.ToString("0.##");
                    }
                    else
                    {
                        lblTotalResources.Text = subtotal.ToString("0");
                    }

                    if (contractdetails.Rows[0]["IncludeST"].ToString() == "True")
                    {
                        servicetax = 0;
                        cesstax = 0;
                        educess = 0;
                        sbcesstax = 0;
                        kkcesstax = 0;
                        CGSTTax = 0;   //gst
                        SGSTTax = 0;
                        IGSTTax = 0;
                        Cess1Tax = 0;
                        Cess2Tax = 0;

                    }
                    else if (contractdetails.Rows[0]["ServiceTax75"].ToString() == "True")
                    {
                        servicetax = 3 * totalamt / 100;
                        sbcesstax = 3 * totalamt / 100;
                        kkcesstax = 3 * totalamt / 100;
                        cesstax = 2 * servicetax / 100;
                        educess = 1 * servicetax / 100;
                    }
                    else
                    {
                        if (roundoff == true)
                        {
                            servicetax = Math.Round(ServiceTaxSeparate * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) / 100, 2);//GST
                        }
                        else
                        {
                            servicetax = Math.Round(ServiceTaxSeparate * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) / 100, 0);//GST
                        }

                        if (roundoff == true)
                        {
                            sbcesstax = Math.Round(SBcess * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) / 100, 2);
                        }
                        else
                        {
                            sbcesstax = Math.Round(SBcess * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) / 100, 0);

                        }

                        if (roundoff == true)
                        {
                            kkcesstax = Math.Round(KKcess * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) / 100, 2);
                        }
                        else
                        {
                            kkcesstax = Math.Round(KKcess * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) / 100, 0);

                        }


                        cesstax = Math.Round(Cess * servicetax / 100, 0);
                        educess = Math.Round(SHEcess * servicetax / 100, 0);


                        if (ddlType.SelectedIndex != 3)
                        {
                            if (contractdetails.Rows[0]["CGST"].ToString() == "False")
                            {
                                CGSTTax = 0;
                            }
                            else
                            {
                                if (roundoff == true)
                                {
                                    CGSTTax = Math.Round(CGST * ((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo)) / 100, 2);
                                }
                                else
                                {
                                    CGSTTax = Math.Round(CGST * ((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo)) / 100, 0);
                                }
                            }

                            if (contractdetails.Rows[0]["SGST"].ToString() == "False")
                            {
                                SGSTTax = 0;
                            }
                            else
                            {
                                if (roundoff == true)
                                {
                                    SGSTTax = Math.Round(SGST * ((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo)) / 100, 2);
                                }
                                else
                                {
                                    SGSTTax = Math.Round(SGST * ((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo)) / 100, 0);

                                }
                            }


                            if (contractdetails.Rows[0]["IGST"].ToString() == "False")
                            {
                                IGSTTax = 0;
                            }
                            else
                            {
                                if (roundoff == true)
                                {
                                    IGSTTax = Math.Round(IGST * ((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo)) / 100, 2);

                                }
                                else
                                {
                                    IGSTTax = Math.Round(IGST * ((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo)) / 100, 0);

                                }
                            }


                            if (contractdetails.Rows[0]["Cess1"].ToString() == "False")
                            {
                                Cess1Tax = 0;
                            }
                            else
                            {
                                if (roundoff == true)
                                {
                                    Cess1Tax = Math.Round(Cess1 * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo) / 100, 2);
                                }
                                else
                                {
                                    Cess1Tax = Math.Round(Cess1 * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo) / 100, 0);

                                }
                            }

                            if (contractdetails.Rows[0]["Cess2"].ToString() == "False")
                            {
                                Cess2Tax = 0;
                            }
                            else
                            {
                                if (roundoff == true)
                                {
                                    Cess2Tax = Math.Round(Cess2 * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo) / 100, 2);
                                }
                                else
                                {
                                    Cess2Tax = Math.Round(Cess2 * (totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo) / 100, 0);

                                }
                            }
                        }



                    }



                    gtotal = subtotal + servicetax + cesstax + educess + sbcesstax + kkcesstax + Cess1Tax + Cess2Tax + CGSTTax + SGSTTax + IGSTTax + Machineryamt + Materialamt + extraonevalueamt + extratwovalueamt + Electicalamt - (Discountsamt + discounttwovalueamt);
                }


                if (roundoff == true)
                {
                    TotalbeforeTax = Math.Round((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo), 2);

                }
                else
                {
                    TotalbeforeTax = Math.Round((totalamt + Servicechargeamt + STCMachineryamt + STCMaterialamt + STCextraonevalueamt + STCextratwovalueamt + STCElecticalamt) - (STDiscountOne + STDiscountTwo), 0);

                }





                if (TotalbeforeTax > 0)
                {
                    TxtTotalbeforeTax.Text = TotalbeforeTax.ToString();
                }
                else
                {
                    lblTotalResources.Text = "0";
                }

                if (totalamt > 0)
                {

                    lblTotalResources.Text = totalamt.ToString();
                    lblTotalResources.Visible = true;
                    lbltotal.Visible = true;
                }


                if (servicetax > 0)
                {
                    lblServiceTax.Text = servicetax.ToString();
                    TxtServiceTaxPrc.Text = ServiceTaxSeparate.ToString();
                    lblServiceTaxTitle.Visible = true;
                    lblServiceTax.Visible = true;
                    TxtServiceTaxPrc.Visible = true;
                }
                else
                {
                    lblServiceTax.Text = servicetax.ToString();
                    lblServiceTaxTitle.Visible = false;
                    lblServiceTax.Visible = false;
                    TxtServiceTaxPrc.Visible = false;
                }


                if (sbcesstax > 0)
                {

                    lblSBCESS.Text = sbcesstax.ToString();
                    TxtSBCESSPrc.Text = SBcess.ToString();
                    lblSBCESSTitle.Visible = true;
                    lblSBCESS.Visible = true;
                    TxtSBCESSPrc.Visible = true;

                }
                else
                {

                    lblSBCESS.Text = sbcesstax.ToString();
                    lblSBCESSTitle.Visible = false;
                    lblSBCESS.Visible = false;
                    TxtSBCESSPrc.Visible = false;
                }


                if (kkcesstax > 0)
                {

                    lblKKCESS.Text = kkcesstax.ToString();
                    TxtKKCESSPrc.Text = KKcess.ToString();
                    lblKKCESSTitle.Visible = true;
                    lblKKCESS.Visible = true;
                    TxtKKCESSPrc.Visible = true;
                }
                else
                {

                    lblKKCESS.Text = kkcesstax.ToString();
                    lblKKCESSTitle.Visible = false;
                    lblKKCESS.Visible = false;
                    TxtKKCESSPrc.Visible = false;

                }

                #region for GST on 17-6-2017 by swathi

                if (CGSTTax > 0)
                {
                    lblCGST.Text = CGSTTax.ToString();
                    TxtCGSTPrc.Text = CGST.ToString();
                    lblCGSTTitle.Visible = true;
                    lblCGST.Visible = true;
                    TxtCGSTPrc.Visible = true;
                }
                else
                {
                    lblCGST.Text = CGSTTax.ToString();
                    lblCGSTTitle.Visible = false;
                    lblCGST.Visible = false;
                    TxtCGSTPrc.Visible = false;

                }



                if (SGSTTax > 0)
                {
                    lblSGST.Text = SGSTTax.ToString();
                    TxtSGSTPrc.Text = SGST.ToString();
                    lblSGSTTitle.Visible = true;
                    lblSGST.Visible = true;
                    TxtSGSTPrc.Visible = true;
                }
                else
                {
                    lblSGST.Text = SGSTTax.ToString();
                    lblSGSTTitle.Visible = false;
                    lblSGST.Visible = false;
                    TxtSGSTPrc.Visible = false;

                }



                if (IGSTTax > 0)
                {
                    lblIGST.Text = IGSTTax.ToString();
                    TxtIGSTPrc.Text = IGST.ToString();
                    lblIGSTTitle.Visible = true;
                    lblIGST.Visible = true;
                    TxtIGSTPrc.Visible = true;
                }
                else
                {
                    lblIGST.Text = IGSTTax.ToString();
                    lblIGSTTitle.Visible = false;
                    lblIGST.Visible = false;
                    TxtIGSTPrc.Visible = false;

                }



                if (Cess1Tax > 0)
                {
                    lblCess1.Text = Cess1Tax.ToString();
                    TxtCess1Prc.Text = Cess1.ToString();
                    lblCess1Title.Visible = true;
                    lblCess1.Visible = true;
                    TxtCess1Prc.Visible = true;
                }
                else
                {
                    lblCess1.Text = Cess1Tax.ToString();
                    lblCess1Title.Visible = false;
                    lblCess1.Visible = false;
                    TxtCess1Prc.Visible = false;

                }



                if (Cess2Tax > 0)
                {
                    lblCess2.Text = Cess2Tax.ToString();
                    TxtCess2Prc.Text = Cess2.ToString();
                    lblCess2Title.Visible = true;
                    lblCess2.Visible = true;
                    TxtCess2Prc.Visible = true;
                }
                else
                {
                    lblCess2.Text = Cess2Tax.ToString();
                    lblCess2Title.Visible = false;
                    lblCess2.Visible = false;
                    TxtCess2Prc.Visible = false;

                }

                #endregion for GST on 17-6-2017

                if (cesstax > 0)
                {

                    lblCESS.Text = cesstax.ToString();
                    TxtCESSPrc.Text = Cess.ToString();
                    lblCESSTitle.Visible = true;
                    lblCESS.Visible = true;
                    TxtCESSPrc.Visible = true;
                }
                else
                {
                    lblCESS.Text = cesstax.ToString();
                    lblCESSTitle.Visible = false;
                    lblCESS.Visible = false;
                    TxtCESSPrc.Visible = false;
                }

                if (educess > 0)
                {

                    lblSheCESS.Text = educess.ToString();
                    TxtSheCESSPrc.Text = SHEcess.ToString();
                    lblSheCESSTitle.Visible = true;
                    lblSheCESS.Visible = true;
                    TxtSheCESSPrc.Visible = true;
                }
                else
                {
                    lblSheCESS.Text = educess.ToString();
                    lblSheCESSTitle.Visible = false;
                    lblSheCESS.Visible = false;
                    TxtSheCESSPrc.Visible = false;
                }



                if (gtotal > 0)
                {
                    lblGrandTotal.Text = gtotal.ToString();
                    lblGrandTotal.Visible = true;
                    lblgrandtotalss.Visible = true;
                }

                DispalyExtraDataHeadings();

            }
            catch (Exception ex)
            {

            }
        }

        protected void ddlmonth_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                //cleartext();
                ClearExtraDataForBilling();
                int month = 0;
                if (ddlmonth.SelectedIndex > 0)
                {

                    if (ddlType.SelectedIndex == 0)
                    {
                        bool SelectAll = false;
                        if (chkalllist.Checked == true)
                            SelectAll = true;

                        bool excludeList = false;
                        if (chkexcludelist.Checked == true)
                            excludeList = true;
                        String BillType = "Normal";
                        month = GetMonthBasedOnSelectionDateorMonth();
                        LoadClientIDBasedonMonth(month, BillType, SelectAll, excludeList);
                    }
                    else
                    {
                        string BillType = "Manual";
                        bool SelectAll = false;
                        if (chklistformanual.Checked == true)
                            SelectAll = true;
                        month = GetMonthBasedOnSelectionDateorMonth();
                        LoadClientIDBasedonMonth(month, BillType, SelectAll, false);
                    }

                    //FillMonthDetails();
                    //if (ddlType.SelectedIndex == 0)
                    //{
                    //    DisplayDataInGrid();

                    //}
                    //else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                    //{

                    //    LoadOldBillnos();
                    //    DisplayDataInGridManual();
                    //    EnabledFields();
                    //    // GetDCDetails();

                    //}

                }


            }
            catch (Exception ex)
            {

            }

        }

        protected void LoadClientIDBasedonMonth(int month, string BillType, bool SelectAll, bool ExcludeList)
        {
            DataTable dtBranch = GlobalData.Instance.LoadBranchOnUserID(BranchID);

            string order = "";
            DataTable DtClientnames = null;
            ddlCname.Items.Clear();
            ddlclientid.Items.Clear();
            order = "orderClientName";
            DtClientnames = GlobalData.Instance.LoadActiveClientnames(CmpIDPrefix, SelectAll, order, ExcludeList, BillType, month, dtBranch);
            if (DtClientnames.Rows.Count > 0)
            {

                ddlCname.DataValueField = "Clientid";
                ddlCname.DataTextField = "clientname";
                ddlCname.DataSource = DtClientnames;
                ddlCname.DataBind();
            }

            order = "orderClientID";
            DtClientnames = GlobalData.Instance.LoadActiveClientnames(CmpIDPrefix, SelectAll, order, ExcludeList, BillType, month, dtBranch);
            if (DtClientnames.Rows.Count > 0)
            {
                ddlclientid.DataValueField = "Clientid";
                ddlclientid.DataTextField = "Clientid";
                ddlclientid.DataSource = DtClientnames;
                ddlclientid.DataBind();
            }

            ddlCname.Items.Insert(0, "-Select-");
            ddlclientid.Items.Insert(0, "-Select-");
        }

        public void loadDesignations()
        {
            DataTable DtDesignation = null;
            List<string> list = new List<string>();

            if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
            {
                DtDesignation = GlobalData.Instance.LoadDesigns();
                list = DtDesignation.AsEnumerable()
                                  .Select(r => r.Field<string>("Design"))
                                  .ToList();
                var result = new JavaScriptSerializer().Serialize(list);
                hdDesignations.Value = result;
            }
            else
            {
                DtDesignation = GlobalData.Instance.LoadItemNames();
                list = DtDesignation.AsEnumerable()
                                  .Select(r => r.Field<string>("ItemName"))
                                  .ToList();
                var result = new JavaScriptSerializer().Serialize(list);
                hdDesignations.Value = result;
            }

        }

        protected void txtmonthOnTextChanged(object sender, EventArgs e)
        {
            //cleartext();

            //if (ddlclientid.SelectedIndex <= 0)
            //{
            //    //LblResult.Text = "Please select ClientId";
            //    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Please select ClientId ');", true);
            //    return;
            //}
            if (txtmonth.Text.Length > 0)
            {
                // FillMonthDetails();
                int month = 0;
                ddlclientid.Items.Clear();
                ddlCname.Items.Clear();
                if (ddlType.SelectedIndex == 0)
                {
                    bool SelectAll = false;
                    if (chkalllist.Checked == true)
                        SelectAll = true;

                    bool excludeList = false;
                    if (chkexcludelist.Checked == true)
                        excludeList = false;
                    String BillType = "Normal";
                    month = GetMonthBasedOnSelectionDateorMonth();
                    LoadClientIDBasedonMonth(month, BillType, SelectAll, excludeList);
                }
                else
                {
                    string BillType = "Manual";
                    bool SelectAll = false;
                    if (chklistformanual.Checked == true)
                        SelectAll = true;
                    month = GetMonthBasedOnSelectionDateorMonth();
                    LoadClientIDBasedonMonth(month, BillType, SelectAll, false);
                }

                //FillMonthDetails();
                //if (ddlType.SelectedIndex == 0)
                //{
                //    DisplayDataInGrid();

                //}
                //else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                //{

                //    LoadOldBillnos();
                //    DisplayDataInGridManual();
                //    EnabledFields();
                //    // GetDCDetails();

                //}



            }

            //EnabledFields();

        }

        protected void LoadOldBillnos()
        {
            ddlMBBillnos.Items.Clear();
            if (ddlclientid.SelectedIndex == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert()", "alert('please select Client ID/Name')", true);
                return;
            }

            int month = 0;

            month = GetMonthBasedOnSelectionDateorMonth();

            string SqlQry = "";
            DataTable Dt = null;

            if (ddlType.SelectedIndex == 1)
            {
                SqlQry = "SElect BillNo  From Munitbill Where  unitid ='" + ddlclientid.SelectedValue + "'  and month ='" + month + "' and billtype='M'";
                Dt = config.ExecuteAdaptorAsyncWithQueryParams(SqlQry).Result;
            }
            else if (ddlType.SelectedIndex == 2)
            {
                SqlQry = "SElect BillNo  From Munitbill Where  unitid ='" + ddlclientid.SelectedValue + "'  and month ='" + month + "' and billtype='A'";
                Dt = config.ExecuteAdaptorAsyncWithQueryParams(SqlQry).Result;
            }
            else if (ddlType.SelectedIndex == 3)
            {
                SqlQry = "SElect BillNo  From Munitbill Where  unitid ='" + ddlclientid.SelectedValue + "'  and month ='" + month + "' and billtype='I'";
                Dt = config.ExecuteAdaptorAsyncWithQueryParams(SqlQry).Result;
            }


            ddlMBBillnos.Items.Clear();
            if (Dt.Rows.Count > 0)
            {
                ddlMBBillnos.DataTextField = "BillNo";
                ddlMBBillnos.DataValueField = "BillNo";
                ddlMBBillnos.DataSource = Dt;
                ddlMBBillnos.DataBind();
            }
            ddlMBBillnos.Items.Insert(0, "--Select--");


        }

        public void cleartext()
        {
            if (ddlType.SelectedIndex == 0)
            {
                gvClientBilling.Columns[3].Visible = true;
                gvClientBilling.Columns[7].Visible = false;
                gvClientBilling.Columns[8].Visible = false;
                gvClientBilling.Columns[9].Visible = false;
                gvClientBilling.Columns[12].Visible = false;
                gvClientBilling.Columns[13].Visible = false;
                gvClientBilling.Columns[14].Visible = false;
                gvClientBilling.Columns[15].Visible = false;
                gvClientBilling.Columns[16].Visible = false;
                gvClientBilling.Columns[1].Visible = false;

                btnAddNewRow.Visible = true;
                btnCalculateTotals.Visible = false;
                lblbilltype.Visible = false;
                lblManualBillNo.Visible = false;
                ddlMBBillnos.Visible = false;
                rdbcreatebill.Visible = false;
                rdbmodifybill.Visible = false;
                lbltotal.Visible = true;
                lblTotalResources.Visible = true;
                lblgrandtotalss.Visible = true;
                lblGrandTotal.Visible = true;
                checkExtraData.Visible = true;
                btncleardata.Visible = false;
            }
            else if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2 || ddlType.SelectedIndex == 3)
            {

                FillDefaultGird();
                btncleardata.Visible = true;


                if (ddlType.SelectedIndex == 1)
                {
                    gvClientBilling.Columns[1].Visible = true;
                    gvClientBilling.Columns[2].Visible = true;
                    gvClientBilling.Columns[7].Visible = false;
                    gvClientBilling.Columns[3].Visible = true;
                    gvClientBilling.Columns[12].Visible = false;
                    gvClientBilling.Columns[13].Visible = false;
                    gvClientBilling.Columns[14].Visible = false;
                    gvClientBilling.Columns[15].Visible = false;
                    gvClientBilling.Columns[16].Visible = false;


                }
                else if (ddlType.SelectedIndex == 2)
                {
                    gvClientBilling.Columns[7].Visible = true;
                    gvClientBilling.Columns[3].Visible = true;
                    gvClientBilling.Columns[12].Visible = false;
                    gvClientBilling.Columns[13].Visible = false;
                    gvClientBilling.Columns[14].Visible = false;
                    gvClientBilling.Columns[15].Visible = false;
                    gvClientBilling.Columns[16].Visible = false;

                }
                else if (ddlType.SelectedIndex == 3)
                {
                    gvClientBilling.Columns[7].Visible = false;
                    gvClientBilling.Columns[3].Visible = true;
                    gvClientBilling.Columns[12].Visible = true;
                    gvClientBilling.Columns[13].Visible = true;
                    gvClientBilling.Columns[14].Visible = true;
                    gvClientBilling.Columns[15].Visible = true;
                    gvClientBilling.Columns[16].Visible = true;

                }


                gvClientBilling.Columns[8].Visible = true;
                gvClientBilling.Columns[9].Visible = true;

                btnAddNewRow.Visible = true;
                btnCalculateTotals.Visible = true;
                lblbilltype.Visible = true;
                lblManualBillNo.Visible = true;
                ddlMBBillnos.Visible = true;
                rdbcreatebill.Visible = true;
                rdbmodifybill.Visible = true;
                lblServiceCharges.Enabled = true;
                // Chk_Month.Visible = false;
                lbltotal.Visible = true;
                lblTotalResources.Visible = true;
                lblgrandtotalss.Visible = true;
                lblGrandTotal.Visible = true;
                checkExtraData.Visible = true;
                ddlMBBillnos.Items.Clear();
                ddlMBBillnos.Items.Insert(0, "--Select--");



            }

            lblResult.Text = "";
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            //txtMBillNo.Text = "";
            TxtservicechrgPrc.Text = "";
            checkExtraData.Visible = true;
            lblTotalResources.Visible = true;
            lbltotal.Visible = true;
            lblgrandtotalss.Visible = true;
            lblGrandTotal.Visible = true;
            rdbcreatebill.Checked = true;
            rdbmodifybill.Checked = false;


            for (int i = 0; i < gvClientBilling.Rows.Count; i++)
            {
                TextBox lbldesgn = gvClientBilling.Rows[i].FindControl("lbldesgn") as TextBox;
                TextBox lblnoofemployees = gvClientBilling.Rows[i].FindControl("lblnoofemployees") as TextBox;
                TextBox txtHSNNumber = gvClientBilling.Rows[i].FindControl("txtHSNNumber") as TextBox;
                TextBox lblNoOfDuties = gvClientBilling.Rows[i].FindControl("lblNoOfDuties") as TextBox;
                TextBox lblpayrate = gvClientBilling.Rows[i].FindControl("lblpayrate") as TextBox;
                TextBox txtNewPayRate = gvClientBilling.Rows[i].FindControl("txtNewPayRate") as TextBox;
                TextBox lblda = gvClientBilling.Rows[i].FindControl("lblda") as TextBox;
                TextBox lblAmount = gvClientBilling.Rows[i].FindControl("lblAmount") as TextBox;
                TextBox lblCGSTAmount = gvClientBilling.Rows[i].FindControl("lblCGSTAmount") as TextBox;
                TextBox lblSGSTAmount = gvClientBilling.Rows[i].FindControl("lblSGSTAmount") as TextBox;
                TextBox lblIGSTAmount = gvClientBilling.Rows[i].FindControl("lblIGSTAmount") as TextBox;
                TextBox lblCGSTPrc = gvClientBilling.Rows[i].FindControl("lblCGSTPrc") as TextBox;
                TextBox lblSGSTPrc = gvClientBilling.Rows[i].FindControl("lblSGSTPrc") as TextBox;
                TextBox lblIGSTPrc = gvClientBilling.Rows[i].FindControl("lblIGSTPrc") as TextBox;
                TextBox lblTotalTaxmount = gvClientBilling.Rows[i].FindControl("lblTotalTaxmount") as TextBox;
                TextBox txtempname = gvClientBilling.Rows[i].FindControl("txtempname") as TextBox;

                if (ddlType.SelectedIndex == 0)
                {
                    lbldesgn.Enabled = false;
                    lblnoofemployees.Enabled = false;
                    txtHSNNumber.Enabled = false;
                    lblNoOfDuties.Enabled = false;
                    lblpayrate.Enabled = false;
                    txtNewPayRate.Enabled = false;
                    lblda.Enabled = false;
                    lblAmount.Enabled = false;
                    lblCGSTAmount.Enabled = false;
                    lblSGSTAmount.Enabled = false;
                    lblIGSTAmount.Enabled = false;
                    lblCGSTPrc.Enabled = false;
                    lblSGSTPrc.Enabled = false;
                    lblIGSTPrc.Enabled = false;
                    lblTotalTaxmount.Enabled = false;
                }
                else
                {
                    lbldesgn.Enabled = true;
                    lblnoofemployees.Enabled = true;
                    txtHSNNumber.Enabled = true;
                    lblNoOfDuties.Enabled = true;
                    lblpayrate.Enabled = true;
                    txtNewPayRate.Enabled = true;
                    lblda.Enabled = true;
                    lblAmount.Enabled = true;
                    lblCGSTAmount.Enabled = true;
                    lblSGSTAmount.Enabled = true;
                    lblIGSTAmount.Enabled = true;
                    lblCGSTPrc.Enabled = true;
                    lblSGSTPrc.Enabled = true;
                    lblIGSTPrc.Enabled = true;
                    lblTotalTaxmount.Enabled = true;
                    txtempname.Enabled = true;
                }

            }



        }

        public void ManualBillGenerateMethod()
        {
            try
            {

                lbltotalamount.Visible = true;

                #region Validations

                if (ddlclientid.SelectedIndex <= 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Select Client Id ');", true);

                    return;
                }
                #region  Begin New code As on [10-03-2014]

                if (Chk_Month.Checked == true)
                {
                    if (txtmonth.Text.Trim().Length == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Enter Month for Bill ');", true);
                        return;
                    }
                    if (Timings.Instance.CheckEnteredDate(txtmonth.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid TO DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }
                else
                {
                    if (ddlmonth.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Select Month for Bill ');", true);

                        return;
                    }
                }
                #endregion  End Old Code As on [14-02-2014]
                if (txtbilldate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Please Fill The Billdate  ');", true);
                    return;
                }

                if (ddlMBBillnos.SelectedIndex > 0)
                {
                    if (rdbmodifybill.Checked == false)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Select The Bill No.');", true);
                        return;
                    }
                }
                #endregion

                int month = 0;
                var monthReports = 0;
                string SelectedClient = ddlclientid.SelectedValue;

                string Billtype = "";

                if (ddlType.SelectedIndex == 1)
                {
                    Billtype = "M";
                }
                else if (ddlType.SelectedIndex == 2)
                {
                    Billtype = "A";
                }
                else
                {
                    Billtype = "I";
                }

                #region Month Selection

                month = GetMonthBasedOnSelectionDateorMonth();

                #endregion

                DateTime dt = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                string billdt = dt.ToString("MM/dd/yyyy");

                var query1 = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2 from TblOptions where '" + billdt + "' between fromdate and todate ";//Gst
                var optiondetails = config.ExecuteAdaptorAsyncWithQueryParams(query1).Result;

                decimal ServiceTaxSeparate = 0;
                decimal Cessprc = 0;
                decimal SHEcessprc = 0;
                decimal SBcessprc = 0;
                decimal KKcessprc = 0;
                decimal Cess1prc = 0;//Gst
                decimal Cess2prc = 0;
                decimal CGSTprc = 0;
                decimal IGSTprc = 0;
                decimal SGSTprc = 0;


                if (optiondetails.Rows.Count > 0)
                {

                    ServiceTaxSeparate = Convert.ToDecimal(optiondetails.Rows[0]["ServiceTaxSeparate"].ToString());
                    Cessprc = Convert.ToDecimal(optiondetails.Rows[0]["Cess"].ToString());
                    SHEcessprc = Convert.ToDecimal(optiondetails.Rows[0]["SHECess"].ToString());
                    SBcessprc = Convert.ToDecimal(optiondetails.Rows[0]["SBCess"].ToString());
                    KKcessprc = Convert.ToDecimal(optiondetails.Rows[0]["KKCess"].ToString());
                    CGSTprc = Convert.ToDecimal(optiondetails.Rows[0]["CGST"].ToString());
                    IGSTprc = Convert.ToDecimal(optiondetails.Rows[0]["IGST"].ToString());
                    SGSTprc = Convert.ToDecimal(optiondetails.Rows[0]["SGST"].ToString());
                    Cess1prc = Convert.ToDecimal(optiondetails.Rows[0]["Cess1"].ToString());
                    Cess2prc = Convert.ToDecimal(optiondetails.Rows[0]["Cess2"].ToString());

                }


                #region  Query For Delete Unitbill Break Up Data

                /** Delete previously generated UnitBillBreakup data */

                if (rdbmodifybill.Checked)
                {
                    string DeleteQueryForSelectedMonth = "Delete from Munitbillbreakup where unitid ='" + SelectedClient + "' and month =" +
                                                                         month + " and MunitidBillno='" + ddlMBBillnos.SelectedValue + "'";
                    int deleteop = config.ExecuteNonQueryWithQueryAsync(DeleteQueryForSelectedMonth).Result;
                }
                //Unitbill details are not deleted now due to Billno(avoid regeneration)
                /** Delete **/

                #endregion

                #region   Query for  Get  Contracts  Details

                string sqlQry = "Select ContractId,ContractStartDate,ContractEndDate,PaymentType,MaterialCostPerMonth, " +
                    " MachinaryCostPerMonth,NoOfDays,servicecharge,OTPersent,PayLumpsum,ServiceChargeType,ServiceTax75,IncludeST, " +
                    "  ServiceTaxType,BillDates,IGST from Contracts where ClientId='" + ddlclientid.SelectedValue + "'";
                DataTable dtContracts = config.ExecuteAdaptorAsyncWithQueryParams(sqlQry).Result;

                if (dtContracts.Rows.Count > 0)
                {
                    //CalculateTotals();

                    string strSTType = dtContracts.Rows[0]["ServiceTaxType"].ToString();
                    string NoOfDaysFromContract = dtContracts.Rows[0]["NoOfDays"].ToString();
                    string strServiceChargetType = dtContracts.Rows[0]["ServiceChargeType"].ToString();
                    string ServiceCharge = dtContracts.Rows[0]["ServiceCharge"].ToString();
                    string IGST = dtContracts.Rows[0]["IGST"].ToString();

                    bool bSTType = (strSTType == "True");
                    string billno = (rdbmodifybill.Checked)
                                    ? ddlMBBillnos.SelectedValue
                                    : BillnoAutoGenrate(bSTType, ddlclientid.SelectedValue, month);



                    #region   Get Data From GridView and Saving In the Munitbillbreakup Table

                    if (gvClientBilling.Rows.Count > 0)
                    {
                        string invoicedesc = "";//txtdescription.Text;
                        //string remarks = txtRemarks.Text;// txtremarks.Text;
                        string Unitid = ddlclientid.SelectedValue;
                        int totalstatus = 0;
                        int i = 0;



                        foreach (GridViewRow GvRow in gvClientBilling.Rows)
                        {
                            string sno = ((Label)GvRow.FindControl("lblSno")).Text;
                            string Desgn = ((TextBox)GvRow.FindControl("lbldesgn")).Text;
                            string HSNNumber = ((TextBox)GvRow.FindControl("txtHSNNumber")).Text;
                            string NoOfEmps = ((TextBox)GvRow.FindControl("lblnoofemployees")).Text;
                            string NoOfDuties = ((TextBox)GvRow.FindControl("lblNoOfDuties")).Text;
                            string Payrate = ((TextBox)GvRow.FindControl("lblpayrate")).Text; //lblda
                            string NewPayRate = ((TextBox)GvRow.FindControl("txtNewPayRate")).Text; //lblda
                            string EmpName = ((TextBox)GvRow.FindControl("txtempname")).Text;
                            // string Payratetype = ((TextBox)GvRow.FindControl("txtPayRatetype")).Text;
                            string DutiesAmount = ((TextBox)GvRow.FindControl("lblda")).Text;
                            //string OtAmount = ((TextBox)GvRow.FindControl("lblOtAmount")).Text;
                            string Total = ((TextBox)GvRow.FindControl("lblAmount")).Text;
                            string CGSTAmt = ((TextBox)GvRow.FindControl("lblCGSTAmount")).Text;
                            string lblCGSTPrc = ((TextBox)GvRow.FindControl("lblCGSTPrc")).Text;
                            string SGSTAmt = ((TextBox)GvRow.FindControl("lblSGSTAmount")).Text;
                            string lblSGSTPrc = ((TextBox)GvRow.FindControl("lblSGSTPrc")).Text;
                            string IGSTAmt = ((TextBox)GvRow.FindControl("lblIGSTAmount")).Text;
                            string lblIGSTPrc = ((TextBox)GvRow.FindControl("lblIGSTPrc")).Text;
                            string TotalTaxmount = ((TextBox)GvRow.FindControl("lblTotalTaxmount")).Text;
                            string GSTper = ((TextBox)GvRow.FindControl("lblGSTper")).Text;
                            string UOM = ((TextBox)GvRow.FindControl("txtUOM")).Text;
                            string StoreCode = ((TextBox)GvRow.FindControl("txtstorecode")).Text;


                            float ToatlAmount = 0;
                            float basicda = 0;
                            ToatlAmount = (Total.Trim().Length != 0) ? float.Parse(Total) : 0;
                            basicda = (DutiesAmount.Trim().Length != 0) ? float.Parse(DutiesAmount) : 0;
                            DropDownList ddlnodays = gvClientBilling.Rows[i].FindControl("ddlnod") as DropDownList;
                            float ddlnod = float.Parse(ddlnodays.SelectedItem.Text);
                            DropDownList ddldttype = gvClientBilling.Rows[i].FindControl("ddldutytype") as DropDownList;
                            int ddldutytype = int.Parse(ddldttype.SelectedValue);

                            decimal GSTPercentage = 0;
                            if (ddlType.SelectedIndex == 3)
                            {
                                if (GSTper == "0")
                                {
                                    IGSTprc = 0;
                                    CGSTprc = 0;
                                    SGSTprc = 0;
                                }
                                else
                                {
                                    if (IGST == "False")
                                    {
                                        GSTPercentage = Convert.ToDecimal(GSTper) / 2;
                                        CGSTprc = Convert.ToDecimal(GSTPercentage);
                                        SGSTprc = Convert.ToDecimal(GSTPercentage);
                                    }
                                    else
                                    {
                                        IGSTprc = Convert.ToDecimal(GSTper);
                                    }

                                }

                            }

                            string CGSTTaxV = lblCGST.Text;

                            if (CGSTTaxV.Trim().Length == 0)
                            {
                                CGSTTaxV = "0";
                            }


                            string SGSTTaxV = lblSGST.Text;

                            if (SGSTTaxV.Trim().Length == 0)
                            {
                                SGSTTaxV = "0";
                            }


                            string IGSTTaxV = lblIGST.Text;

                            if (IGSTTaxV.Trim().Length == 0)
                            {
                                IGSTTaxV = "0";
                            }


                            if (float.Parse(CGSTTaxV) > 0)
                            {
                                IGSTprc = 0;
                            }
                            else if (float.Parse(IGSTTaxV) > 0)
                            {
                                CGSTprc = 0;
                                SGSTprc = 0;
                            }
                            else
                            {
                                IGSTprc = 0;
                                CGSTprc = 0;
                                SGSTprc = 0;
                            }



                            i = i + 1;

                            if (Desgn.Length > 0)
                            {
                                string Sqlqry = string.Format("insert into Munitbillbreakup(unitid,designation,DutyHours,NoofEmps,BasicDa, " +
                                    "PayRate,PayRateType,Month,OTamount,Totalamount,MunitidBillno,monthlydays,Description,Remarks,NewPayrate,noofdays,BillType,SiNo,HSNNumber,UOM,GSTPer,CGSTAmt,SGSTAmt,IGSTAmt,CGSTPrc,SGSTPrc,IGSTPrc,TotalTaxAmount,Sno,EmpName,StoreCode) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}','{27}','{28}','{29}','{30}')",
                                    Unitid, Desgn, NoOfDuties, NoOfEmps, DutiesAmount, Payrate, ddldutytype, month, 0, Total, billno, ddlnod, invoicedesc, txtRemarks.Text, NewPayRate, ddlnod, Billtype, sno, HSNNumber, UOM, GSTper, CGSTAmt, SGSTAmt, IGSTAmt, CGSTprc, SGSTprc, IGSTprc, TotalTaxmount, sno, EmpName, StoreCode);
                                int Status = config.ExecuteNonQueryWithQueryAsync(Sqlqry).Result;
                                if (Status != 0)
                                {
                                    totalstatus++;
                                    if (totalstatus == 1)
                                    {
                                        if (ddlType.SelectedIndex == 1)
                                        {
                                            ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Manual Billing Details Added Sucessfully');", true);
                                        }
                                        else if (ddlType.SelectedIndex == 2)
                                        {
                                            ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Arrear Billing Details Added Sucessfully');", true);

                                        }
                                        else if (ddlType.SelectedIndex == 3)
                                        {
                                            ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Material Billing Details Added Sucessfully');", true);

                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region   Storing Details about the  Unit Bill Table


                    bool bServiceChargeType = false;
                    if (strServiceChargetType == "True")
                    {
                        bServiceChargeType = true;
                    }

                    //float serviceCharge = 0;
                    //if (ServiceCharge.Length > 0)
                    //{
                    //    serviceCharge = Convert.ToSingle(ServiceCharge);
                    //}

                    if (lblTotalResources.Text.Trim().Length == 0)
                    {
                        lblTotalResources.Text = "0";
                    }

                    double totalCharges = double.Parse(lblTotalResources.Text);

                    string grandtotal = lblGrandTotal.Text;
                    if (grandtotal.Trim().Length == 0)
                    {
                        grandtotal = "0";
                    }

                    string ServiceTax = lblServiceTax.Text;

                    if (ServiceTax.Trim().Length == 0)
                    {
                        ServiceTax = "0";

                    }

                    string sbcesstax = lblSBCESS.Text;

                    if (sbcesstax.Trim().Length == 0)
                    {
                        sbcesstax = "0";
                    }

                    string kkcesstax = lblKKCESS.Text;


                    if (kkcesstax.Trim().Length == 0)
                    {
                        kkcesstax = "0";
                    }


                    string cesstax = lblCESS.Text;

                    if (cesstax.Trim().Length == 0)
                    {
                        cesstax = "0";
                    }

                    #region for GST as on 17-6-2017 by swathi

                    string CGSTTax = lblCGST.Text;

                    if (CGSTTax.Trim().Length == 0)
                    {
                        CGSTTax = "0";
                    }


                    string SGSTTax = lblSGST.Text;

                    if (SGSTTax.Trim().Length == 0)
                    {
                        SGSTTax = "0";
                    }


                    string IGSTTax = lblIGST.Text;

                    if (IGSTTax.Trim().Length == 0)
                    {
                        IGSTTax = "0";
                    }


                    string Cess1Tax = lblCess1.Text;

                    if (Cess1Tax.Trim().Length == 0)
                    {
                        Cess1Tax = "0";
                    }

                    string Cess2Tax = lblCess2.Text;

                    if (Cess2Tax.Trim().Length == 0)
                    {
                        Cess2Tax = "0";
                    }

                    #endregion for GST as on 17-6-2017 by swathi

                    string Shesstax = lblSheCESS.Text;

                    if (Shesstax.Trim().Length == 0)
                    {
                        Shesstax = "0";
                    }

                    string ServiceChargePer = TxtservicechrgPrc.Text;
                    if (ServiceChargePer.Trim().Length == 0)
                    {
                        ServiceChargePer = "0";
                    }

                    string SubTotal = lblTotalResources.Text;
                    if (SubTotal.Trim().Length == 0)
                    {
                        SubTotal = "0";
                    }

                    string Servicechrg = lblServiceCharges.Text;

                    if (Servicechrg.Trim().Length == 0)
                    {
                        Servicechrg = "0";
                    }




                    System.Globalization.CultureInfo enGB = new System.Globalization.CultureInfo("en-GB");
                    DateTime dtb = Convert.ToDateTime(txtbilldate.Text, enGB);
                    string billdate = dtb.ToString("yyyy-MM-dd hh:mm:ss");
                    DateTime dtf = Convert.ToDateTime(txtfromdate.Text, enGB);
                    string tfrom = dtf.ToString("yyyy-MM-dd hh:mm:ss");
                    DateTime dtt = Convert.ToDateTime(txttodate.Text, enGB);
                    string tto = dtt.ToString("yyyy-MM-dd hh:mm:ss");

                    //titels
                    string MachinaryCosttitle = txtmachinarycost.Text;
                    string MaterialCosttitle = txtMaterialcost.Text;
                    string ExtraAmtTwotitle = txtextratwotitle.Text;
                    string ExtraAmtonetitle = txtextraonetitle.Text;
                    string DiscountTwotitle = txtdiscounttwotitle.Text;
                    string Discounttitle = txtdiscount.Text;
                    string ElectricalChrgtitle = txtMaintanancecost.Text;
                    //values
                    string MachinaryCost = txtMachinery.Text;
                    string MaterialCost = txtMaterial.Text;
                    string ExtraAmtTwo = txtextratwovalue.Text;
                    string ExtraAmtone = txtextraonevalue.Text;
                    string DiscountTwo = txtdiscounttwovalue.Text;
                    string Discount = txtDiscounts.Text;
                    string ElectricalChrg = txtElectical.Text;
                    //checkbox
                    var chkSTYesMachinarys = 0;
                    if (chkSTYesMachinary.Checked == true)
                    {
                        chkSTYesMachinarys = 1;
                    }
                    var chkSCYesMachinarys = 0;
                    if (chkSCYesMachinary.Checked == true)
                    {
                        chkSCYesMachinarys = 1;
                    }
                    var chkSTYesMaterials = 0;
                    if (chkSTYesMaterial.Checked == true)
                    {
                        chkSTYesMaterials = 1;
                    }
                    var chkSCYesMaterials = 0;
                    if (chkSCYesMaterial.Checked == true)
                    {
                        chkSCYesMaterials = 1;
                    }

                    var chkSTYesElectricals = 0;
                    if (chkSTYesElectrical.Checked == true)
                    {
                        chkSTYesElectricals = 1;
                    }

                    var chkSCYesElectricals = 0;
                    if (chkSCYesElectrical.Checked == true)
                    {
                        chkSCYesElectricals = 1;
                    }



                    var chkSTYesExtraones = 0;
                    if (chkSTYesExtraone.Checked == true)
                    {
                        chkSTYesExtraones = 1;
                    }



                    var chkSCYesExtraones = 0;
                    if (chkSCYesExtraone.Checked == true)
                    {
                        chkSCYesExtraones = 1;
                    }

                    var chkSTYesExtratwos = 0;
                    if (chkSTYesExtratwo.Checked == true)
                    {
                        chkSTYesExtratwos = 1;
                    }


                    var chkSCYesExtratwos = 0;
                    if (chkSCYesExtratwo.Checked == true)
                    {
                        chkSCYesExtratwos = 1;
                    }

                    var chkSTDiscountones = 0;
                    if (chkSTDiscountone.Checked == true)
                    {
                        chkSTDiscountones = 1;
                    }

                    var chkSTDiscounttwos = 0;
                    if (chkSTDiscounttwo.Checked == true)
                    {
                        chkSTDiscounttwos = 1;
                    }

                    var checkExtraDatas = 0;
                    if (checkExtraData.Checked == true)
                    {
                        checkExtraDatas = 1;
                    }

                    string NatureOfSupply = txtnatureofsupply.Text;
                    string PlaceOfSupply = txtPlaceOfSupply.Text;
                    string JPCode = txtJPCode.Text;

                    #region Client detils saving in manualbill

                    var OURGSTNo = "";
                    var BillToGSTNo = "";
                    var BillToState = "";
                    var BillToStateCode = "";
                    var ShipToGSTNo = "";
                    var ShipToState = "";
                    var ShipToStateCode = "";
                    var TotalbeforeTax = "0";

                    if (TxtTotalbeforeTax.Text.Trim().Length>0)
                    {
                        TotalbeforeTax = TxtTotalbeforeTax.Text;
                    }
                    string Query = "select isnull(GST.GSTNo,'')GSTNo, isnull(GSTIN,'')GSTIN,isnull(s.state,'')state,isnull(s.GSTStateCode,'0')GSTStateCode,isnull(ShipToGSTIN,'') as ShipToGSTIN,isnull(s1.state,'') as ShipToState,isnull(s1.GSTStateCode,'') as ShipToStateCode from Clients C  left join GSTMaster GST on GST.Id=C.OurGSTIN left join states s on s.stateid=c.state left join states s1 on s1.stateid=c.ShipToState  where ClientId='" + ddlclientid.SelectedValue + "'";
                    DataTable DTCLientData = config.ExecuteAdaptorAsyncWithQueryParams(Query).Result;
                    if (DTCLientData.Rows.Count > 0)
                    {
                        OURGSTNo = DTCLientData.Rows[0]["GSTNo"].ToString();
                        BillToGSTNo = DTCLientData.Rows[0]["GSTIN"].ToString();
                        BillToState = DTCLientData.Rows[0]["state"].ToString();
                        BillToStateCode = DTCLientData.Rows[0]["GSTStateCode"].ToString();
                        ShipToGSTNo = DTCLientData.Rows[0]["ShipToGSTIN"].ToString();
                        ShipToState = DTCLientData.Rows[0]["ShipToState"].ToString();
                        ShipToStateCode = DTCLientData.Rows[0]["ShipToStateCode"].ToString();
                    }
                    #endregion


                    string TotalServiceTax = (float.Parse(ServiceTax) + float.Parse(sbcesstax) + float.Parse(kkcesstax) + float.Parse(CGSTTax) + float.Parse(SGSTTax) + float.Parse(IGSTTax) + float.Parse(Cess1Tax) + float.Parse(Cess2Tax) + float.Parse(cesstax) + float.Parse(Shesstax)).ToString();

                    string FreezeStatus = "1";
                    string QryFreezeStatus = "select * from munitbill where billno='" + billno + "' and FreezeStatus=2";
                    DataTable dtFreezeStatus = config.ExecuteAdaptorAsyncWithQueryParams(QryFreezeStatus).Result;
                    if (dtFreezeStatus.Rows.Count > 0)
                    {
                        FreezeStatus = "2";
                    }

                    DateTime Created_On = DateTime.Parse(DateTime.Now.ToString());
                    string Created_By = Username;
                    string remarks = txtRemarks.Text;
                    if (rdbcreatebill.Checked)
                    {
                        string InsertQueryForUnitBill = "insert into Munitbill(billno,billdt,unitid,fromdt,todt,TotalChrg,dutiestotalamount," +
                                                       " monthlydays,grandtotal,Servicechrg,servicetax,cess,shecess,ServiceTax75percentage,ServiceChrgPer,Subtotal," +
                                                       " month,SBCessAmt,kkcessamt,ServiceTaxPrc,SBCessTaxPrc,KKCessTaxPrc,CESSPer,SHECessPer, " +
                                                       " MachinaryCost,MaterialCost,ExtraAmtTwo,ExtraAmtone,DiscountTwo,Discount,ElectricalChrg, " +
                                                       " Machinarycosttitle,Materialcosttitle,Extraonetitle,Extratwotitle,Discountonetitle,Discounttwotitle,Maintanancecosttitle, " +
                                                       " stmachinary,STMaterial,STMaintenance,STExtraone,STExtratwo,STDiscountone,STDiscounttwo, " +
                                                       " SCMachinary,SCMaterial,SCMaintenance,SCExtraone,SCExtratwo,Extradatacheck,BillType,Created_By,Created_On,"+
                                                       " CGSTAmt ,SGSTAmt , IGSTAmt , Cess1Amt,Cess2Amt , CGSTPrc , SGSTPrc ,IGSTPrc , Cess1Prc , Cess2Prc,TotalServiceTax,BillCompletedStatus,remarks,"+
                                                       "FreezeStatus,TotalbeforeTax ,OURGSTNo,BillToGSTNo,BillToState,BillToStateCode,ShipToGSTNo,ShipToState,"+
                                                       "ShipToStateCode,NatureOfSupply,PlaceOfSupply,JPCode) values('"
                                                       + billno + "','"
                                                       + billdate + "','"
                                                       + ddlclientid.SelectedValue + "','"
                                                       + tfrom + "','"
                                                       + tto + "','"
                                                       + totalCharges + "','"
                                                       + totalCharges + "','0','"
                                                       + grandtotal + "','"
                                                       + lblServiceCharges.Text + "','"
                                                       + ServiceTax + "',"
                                                       + cesstax + ","
                                                       + Shesstax + ","
                                                       + "null,'"
                                                       + ServiceChargePer + "','"
                                                       + lblTotalResources.Text + "',"
                                                       + month + ",'"
                                                       + lblSBCESS.Text + "','" + lblKKCESS.Text + "','" + TxtServiceTaxPrc.Text + "','" + TxtSBCESSPrc.Text + "','" + TxtKKCESSPrc.Text + "','" + TxtCESSPrc.Text + "','" + TxtSheCESSPrc.Text + "','"
                                                       + MachinaryCost + "','" + MaterialCost + "','" + ExtraAmtTwo + "','" + ExtraAmtone + "','" + DiscountTwo + "','" + Discount + "','" + ElectricalChrg + "','"
                                                      + MachinaryCosttitle + "','" + MaterialCosttitle + "','" + ExtraAmtTwotitle + "','" + ExtraAmtonetitle + "','" + DiscountTwotitle + "','" + Discounttitle + "','" + ElectricalChrgtitle + "','"
                                                      + chkSTYesMachinarys + "','" + chkSTYesMaterials + "','" + chkSTYesElectricals + "','" + chkSTYesExtraones + "','" + chkSTYesExtratwos + "','" + chkSTDiscountones + "','" + chkSTDiscounttwos + "','"
                                                      + chkSCYesMachinarys + "','" + chkSCYesMaterials + "','" + chkSCYesElectricals + "','" + chkSCYesExtraones + "','" + chkSCYesExtratwos + "','" + checkExtraDatas + "','" + Billtype + "','" + Created_By + "','" + Created_On + "','"
                                                      + CGSTTax + "','" + SGSTTax + "','" + IGSTTax + "','" + Cess1Tax + "','" + Cess2Tax + "','" + CGSTprc + "','"
                                                      + SGSTprc + "','" + IGSTprc + "','" + Cess1Tax + "','" + Cess2prc + "','" + TotalServiceTax + "','0','" +
                                                      remarks + "','" + FreezeStatus + "','" + TotalbeforeTax + "','" + OURGSTNo + "','" + BillToGSTNo + "','"
                                                      + BillToState + "','" + BillToStateCode + "','" + ShipToGSTNo + "','" + ShipToState + "','" 
                                                      + ShipToStateCode + "','" + NatureOfSupply + "','" + PlaceOfSupply + "','" + JPCode + "')";
                        int insrt = config.ExecuteNonQueryWithQueryAsync(InsertQueryForUnitBill).Result;
                    }


                    if (rdbmodifybill.Checked)
                    {
                        string ServiceCharge1 = lblServiceCharges.Text;
                        string ServiceChargePer1 = TxtservicechrgPrc.Text;
                        string totalCharges1 = lblTotalResources.Text;
                        string ServiceTax1 = lblServiceTax.Text;
                        string cesstax1 = lblCESS.Text;
                        string sbcesstax1 = lblSBCESS.Text;
                        string Shesstax1 = lblSheCESS.Text;
                        string SubTotal1 = lblResult.Text;
                        string grandtotal1 = lblGrandTotal.Text;
                        string kkcesstax1 = lblKKCESS.Text;

                        string desc = ""; //txtdescription.Text;
                        string Remarks = txtRemarks.Text;// txtremarks.Text;
                        DateTime Modify_On = DateTime.Parse(DateTime.Now.ToString());
                        string Modify_By = Username;


                        string SqlQryForUnitBill = "Select * from MUnitbill  where unitid ='" + SelectedClient + "' and month=" + month + "   and  billno='" + ddlMBBillnos.SelectedValue + "'";
                        DataTable dtUnitBill = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForUnitBill).Result;

                        string SqlQryForudateUnitBillbreakup = "Select Description,Remarks from MUnitbillBreakUp  where unitid ='" + SelectedClient + "' and month=" + month + " and MunitidBillno='" + ddlMBBillnos.SelectedValue + "'  ";
                        DataTable dtMUnitBill = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForudateUnitBillbreakup).Result;




                        if (dtUnitBill.Rows.Count > 0)
                        {
                            string InsertQueryForUnitBill = string.Format("update Munitbill set billdt='{1}',unitid='{2}',fromdt='{3}',todt='{4}', " +
                              " monthlydays='{5}',grandtotal='{6}',servicetax='{7}',cess='{8}',shecess='{9}',month='{10}',dutiestotalamount='{11}',ServiceChrg='{12}',ServiceChrgPer='{13}',Subtotal='{14}',sbcessamt='{15}',kkcessamt='{16}',ServiceTaxPrc='{17}',SBCessTaxPrc='{18}',KKCessTaxPrc='{19}',CESSPer='{20}',SHECessPer='{21}'," +
                             " MachinaryCost='{22}', MaterialCost='{23}', ExtraAmtTwo='{24}', ExtraAmtone='{25}', DiscountTwo='{26}', Discount='{27}', ElectricalChrg='{28}', " +
                                          "Machinarycosttitle='{29}',Materialcosttitle='{30}',Extraonetitle='{31}',Extratwotitle='{32}',Discountonetitle='{33}',Discounttwotitle='{34}',Maintanancecosttitle='{35}', " +
                                                      "stmachinary='{36}',STMaterial='{37}',STMaintenance='{38}',STExtraone='{39}',STExtratwo='{40}',STDiscountone='{41}',STDiscounttwo='{42}', " +
                                                  " SCMachinary='{43}',SCMaterial='{44}',SCMaintenance='{45}',SCExtraone='{46}',SCExtratwo='{47}',Extradatacheck={48},Billtype='{49}',Modify_By='{50}',Modify_On='{51}',TotalChrg ='{52}', CGSTAmt = '{53}', SGSTAmt = '{54}', IGSTAmt = '{55}', Cess1Amt = '{56}', Cess2Amt = '{57}', CGSTPrc = '{58}', SGSTPrc = '{59}', IGSTPrc = '{60}', Cess1Prc = '{61}', Cess2Prc ='{62}',TotalServiceTax='{63}',Remarks='{64}',FreezeStatus='{65}',"+
                                                  "TotalbeforeTax='{66}',OURGSTNo='{67}',BillToGSTNo='{68}',BillToState='{69}',BillToStateCode='{70}',ShipToGSTNo='{71}',"+
                                                  "ShipToState='{72}',ShipToStateCode='{73}',NatureOfSupply='{74}',PlaceOfSupply='{75}',JPCode='{76}'" +
                              " where  billno='{0}'  ",
                              billno, billdate, ddlclientid.SelectedValue, tfrom, tto,
                              0, grandtotal1, ServiceTax1, cesstax1, Shesstax1, month, totalCharges1, ServiceCharge1, ServiceChargePer1, SubTotal1, sbcesstax1, kkcesstax1, ServiceTaxSeparate, SBcessprc, KKcessprc, Cessprc, SHEcessprc,
                              MachinaryCost, MaterialCost, ExtraAmtTwo, ExtraAmtone, DiscountTwo, Discount, ElectricalChrg, MachinaryCosttitle, MaterialCosttitle, ExtraAmtonetitle, ExtraAmtTwotitle, Discounttitle, DiscountTwotitle,
                              ElectricalChrgtitle, chkSTYesMachinarys, chkSTYesMaterials, chkSTYesElectricals, chkSTYesExtraones, chkSTYesExtratwos, chkSTDiscountones, chkSTDiscounttwos,
                                chkSCYesMachinarys, chkSCYesMaterials, chkSCYesElectricals, chkSCYesExtraones, chkSCYesExtratwos, checkExtraDatas, Billtype, 
                                Modify_By, Modify_On, totalCharges, CGSTTax, SGSTTax, IGSTTax, Cess1Tax, Cess2Tax, CGSTprc, SGSTprc, IGSTprc, Cess1Tax, Cess2prc, 
                                TotalServiceTax, Remarks, FreezeStatus, TotalbeforeTax, OURGSTNo, BillToGSTNo, BillToState, BillToStateCode, ShipToGSTNo,
                                ShipToState, ShipToStateCode,NatureOfSupply,PlaceOfSupply,JPCode);

                            int insret2 = config.ExecuteNonQueryWithQueryAsync(InsertQueryForUnitBill).Result;

                            string InsertQueryForMUnitBill = string.Format("update MunitbillBreakUp set Description='" + desc + "',Remarks='" + Remarks + "' where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and MunitidBillno='" + billno + "'");
                            int insert3 = config.ExecuteNonQueryWithQueryAsync(InsertQueryForMUnitBill).Result;

                        }


                    }
                    #endregion

                    LoadDefaultData();
                    EnabledFields();
                    LoadOldBillnos();

                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('ContractId not available for this client.');", true);
                }
                #endregion
            }
            catch (Exception ex)
            {

            }
        }

        protected void LoadDefaultData()
        {


            txtfromdate.Text = "";
            txttodate.Text = "";
            txtbilldate.Text = "";
            rdbcreatebill.Checked = true;
            rdbmodifybill.Checked = false;
            ddlMBBillnos.Items.Clear();
            FillDefaultGird();
            lblTotalResources.Text = "0";
            lblServiceTax.Text = "0";
            lblGrandTotal.Text = "0";
            lblCESS.Text = "0";
            lblSBCESS.Text = "0";
            lblKKCESS.Text = "0";
            lblSheCESS.Text = "0";
            #region for GST on 17-6-2017 by swathi
            lblCGST.Text = "0";
            lblSGST.Text = "0";
            lblIGST.Text = "0";
            lblCess1.Text = "0";
            lblCess2.Text = "0";
            #endregion for GST on 17-6-2017 by swathi
            lblServiceCharges.Text = "0";
            lblTotalResources.Text = "0";
            TxtservicechrgPrc.Text = "";
            // txtremarks.Text = "";

            lblbillnolatest.Text = "";

        }

        protected void lbldesgn_TextChanged(object sender, EventArgs e)
        {

            if (ddlType.SelectedIndex == 3)
            {
                TextBox lbldesgn = sender as TextBox;
                GridViewRow row = null;
                if (lbldesgn == null)
                    return;

                row = (GridViewRow)lbldesgn.NamingContainer;
                if (row == null)
                    return;

                TextBox txtHSNNumber = row.FindControl("txtHSNNumber") as TextBox;
                TextBox lblGSTper = row.FindControl("lblGSTper") as TextBox;
                TextBox txtUOM = row.FindControl("txtUOM") as TextBox;
                DropDownList ddldutytype = row.FindControl("ddldutytype") as DropDownList;

                string qry = "select hsnnumber,Gstper,unitmeasure from invstockitemlist where itemname='" + lbldesgn.Text.Trim() + "'";
                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;

                if (dt.Rows.Count > 0)
                {
                    txtHSNNumber.Text = dt.Rows[0]["hsnnumber"].ToString();
                    lblGSTper.Text = dt.Rows[0]["Gstper"].ToString();
                    txtUOM.Text = dt.Rows[0]["unitmeasure"].ToString();
                    ddldutytype.SelectedValue = "7";

                }
            }
        }

        public void VisibleFreeze()
        {
            int month = GetMonthBasedOnSelectionDateorMonth();
            string qry = string.Empty;

            if (ddlType.SelectedIndex == 0)
            {
                qry = "select isnull(freezestatus,0) Freezestatus from unitbill where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' ";
            }
            else
            {
                qry = "select isnull(freezestatus,0) Freezestatus from Munitbill where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'  and BillNo='" + ddlMBBillnos.SelectedValue + "'";

            }

            DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;
            string Freezestatus = "";

            if (dt.Rows.Count > 0)
            {
                Freezestatus = dt.Rows[0]["Freezestatus"].ToString();

                if (Freezestatus == "0")
                {
                    btnFreeze.Visible = true;
                    btnUnFreeze.Visible = false;
                    btngenratepayment.Enabled = true;
                }
                else
                {
                    btnFreeze.Visible = false;

                    btnUnFreeze.Visible = true;

                    btngenratepayment.Enabled = false;
                }
            }
            else
            {
                btnFreeze.Visible = false;
                btnUnFreeze.Visible = false;
                btngenratepayment.Enabled = true;

            }
        }

        protected void btnFreeze_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            string qry = "";
            int status = 0;
            if (ddlType.SelectedIndex == 0)
            {
                qry = "update unitbill set freezestatus=1 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' ";
            }
            else
            {
                qry = "update Munitbill set freezestatus=1 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and Billno='" + ddlMBBillnos.SelectedValue + "'";
            }
            status = config.ExecuteNonQueryWithQueryAsync(qry).Result;


            if (status > 0)
            {
                btngenratepayment.Enabled = false;
                btnUnFreeze.Visible = true;
                btnFreeze.Visible = false;


            }
            else
            {
                btngenratepayment.Enabled = true;
                btnUnFreeze.Visible = false;
                btnFreeze.Visible = true;
            }
        }

        protected void btnFreezeSubmit_Click(object sender, EventArgs e)
        {
            var password = string.Empty;
            var SPName = string.Empty;
            password = txtPassword.Text.Trim();
            string sqlPassword = "select password from IouserDetails where password='" + TxtFreeze.Text + "' and id='2'";
            DataTable dtpassword = config.ExecuteAdaptorAsyncWithQueryParams(sqlPassword).Result;
            if (dtpassword.Rows.Count == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Invalid Password');", true);
                return;
            }
            else
            {
                btnFreeze.Visible = true;
                btngenratepayment.Enabled = true;
                btnUnFreeze.Visible = false;
                int month = GetMonthBasedOnSelectionDateorMonth();

                string Qry = "";


                if (ddlType.SelectedIndex == 0)
                {
                    Qry = "select * from unitbill where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'";
                }
                else
                {
                    Qry = "select * from Munitbill where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and BillNo='" + ddlMBBillnos.SelectedValue + "'";
                }
                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(Qry).Result;
                if (dt.Rows.Count > 0)
                {

                    if (ddlType.SelectedIndex == 0)
                    {
                        Qry = "update unitbill set Freezestatus=0 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'";
                    }
                    else
                    {
                        Qry = "update Munitbill set Freezestatus=0 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and BillNo='" + ddlMBBillnos.SelectedValue + "'";

                    }
                    int status = config.ExecuteNonQueryWithQueryAsync(Qry).Result;
                }

            }

            #region Validation

            if (ddlclientid.SelectedIndex == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Select The client Id');", true);
                return;
            }

            #endregion



        }

        protected void btnFreezeClose_Click(object sender, EventArgs e)
        {
            //ModalFreezeDetails.Hide();

        }

        protected void btnUnFreeze_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();
            string qry = "";
            int status = 0;
            if (ddlType.SelectedIndex == 0)
            {
                qry = "update unitbill set freezestatus=0 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'";
            }
            else
            {
                qry = "update Munitbill set freezestatus=0 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'  and BillNo='" + ddlMBBillnos.SelectedValue + "'";
            }

            status = config.ExecuteNonQueryWithQueryAsync(qry).Result;


            if (status > 0)
            {
                btngenratepayment.Enabled = true;
                btnFreeze.Visible = true;
                btnUnFreeze.Visible = false;

            }
            else
            {
                btngenratepayment.Enabled = false;
                btnFreeze.Visible = false;
                btnUnFreeze.Visible = true;

            }
        }

        public string AmountInWords(decimal GrandTotal)
        {
            string Inwords = "";

            string GTotal = GrandTotal.ToString("0.00");
            string[] arr = GTotal.ToString().Split("."[0]);
            string inwords = "";
            string rupee = (arr[0]);
            string paise = "";
            if (arr.Length == 2)
            {
                if (arr[1].Length > 0 && arr[1] != "00")
                {
                    paise = (arr[1]);
                }
            }

            if (paise != "0.00" && paise != "0" && paise != "")
            {
                int I = Int16.Parse(paise);
                string p = NumberToEnglish.Instance.NumbersToWordsDecimal(I, true);
                paise = p;
                rupee = NumberToEnglish.Instance.NumbersToWordsDecimal(Convert.ToInt64(arr[0]), false);
                inwords = " Rupees " + rupee + " and " + paise + " Paise Only";

            }
            else
            {
                rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), true);
                inwords = " Rupees " + rupee + " Only";
            }

            Inwords = inwords;

            return Inwords;

        }

        protected void btnSendMail_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();
            string qry = "";
            int status = 0;

            bool TrueOrFalse = SendMail();
            if ((TrueOrFalse == true))
            {
                if (ddlType.SelectedIndex == 0)
                {
                    qry = "update unitbill set MailStatus=1 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'";
                    status = config.ExecuteNonQueryWithQueryAsync(qry).Result;
                }
                else
                {
                    qry = "update munitbill set MailStatus=1 where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and BillNo='" + ddlMBBillnos.SelectedValue + "'";
                    status = config.ExecuteNonQueryWithQueryAsync(qry).Result;
                }

                ViewSendMail();

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Mail was not sent');", true);
                return;
            }
        }

        public void ViewSendMail()
        {
            int month = GetMonthBasedOnSelectionDateorMonth();
            DataTable dt = null;
            string qry = "";


            if (ddlType.SelectedIndex == 0)
            {
                qry = "select Grandtotal,billno,isnull(mailstatus,0) as mailstatus from unitbill where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "'";
                dt = config.ExecuteReaderWithQueryAsync(qry).Result;
            }
            else
            {
                qry = "select Grandtotal,billno,isnull(mailstatus,0) as mailstatus from munitbill where unitid='" + ddlclientid.SelectedValue + "' and month='" + month + "' and billno='" + ddlMBBillnos.SelectedValue + "'";
                dt = config.ExecuteReaderWithQueryAsync(qry).Result;
            }

            bool MailStatus = false;

            if (dt.Rows.Count > 0)
            {
                btnSendMail.Visible = false;

                MailStatus = bool.Parse(dt.Rows[0]["mailstatus"].ToString());
                if (MailStatus)
                {
                    btnSendMail.Enabled = false;
                }
                else
                {
                    btnSendMail.Enabled = true;
                }
            }
            else
            {
                btnSendMail.Visible = false;
            }
        }

        private bool SendMail()
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();

            try
            {
                MemoryStream ms = new MemoryStream();
                Document document = new Document(PageSize.A4);


                string SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo from MUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and BillNo='" + ddlMBBillnos.SelectedValue + "'";
                DataTable DtBilling = SqlHelper.Instance.GetTableByQuery(SelectBillNo);

                string DisplayBillNo = "";
                if (DtBilling.Rows.Count > 0)
                {

                    DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                }


                string ClientsQry = "select ClientEmail,EmailCC,Clientshortname from clients where clientid='" + ddlclientid.SelectedValue + "' ";
                DataTable dtClient = config.ExecuteReaderWithQueryAsync(ClientsQry).Result;

                string ClientEmail = "";
                string EmailCC = "";
                string ShortName = "";

                if (dtClient.Rows.Count > 0)
                {
                    ClientEmail = dtClient.Rows[0]["ClientEmail"].ToString();
                    EmailCC = dtClient.Rows[0]["EmailCC"].ToString();
                    ShortName = dtClient.Rows[0]["Clientshortname"].ToString();

                }

                DownloadBill(document, ms);


                #region Begin Email sending as on [03-10-2015]


                byte[] bytes = ms.ToArray();
                ms.Close();



                if (ClientEmail.Length > 0)
                {

                    MailMessage mm = new MailMessage();
                    mm.From = new MailAddress("yeddlaanilreddy@gmail.com");
                    string[] multi = ClientEmail.Split(',');

                    foreach (string mailid in multi)
                    {
                        mm.To.Add(new MailAddress(mailid));
                    }
                    string[] multiCC = EmailCC.Split(',');

                    if (EmailCC.Length > 0)
                    {

                        foreach (string mailid in multiCC)
                        {
                            mm.CC.Add(new MailAddress(mailid));
                        }
                    }

                    mm.Subject = "" + ShortName + ": Invoice for the month of " + GetMonthName() + " - " + GetMonthOfYear() + ".";
                    mm.Body = "Dear Sir/Madam,  <br><br> Please find the attached soft-copy of the Invoice for our services undertaken in the month of <B>" + GetMonthName() + " - " + GetMonthOfYear() + "</B> " +
                         "<br><br><I>Please note that the payment has to be made in favor of </I> <B>''DARKS SECURITY CONSULTANT PRIVATE LIMITED''</B> <I>  or by NEFT under the following bank details: </I> <br>" +
                         "<br><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1)A/c Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: DARKS SECURITY CONSULTANT PRIVATE LIMITED</B> " +
                         "<br><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bank Name&nbsp;&nbsp;&nbsp;: ICICI BANK</B>" +
                         "<br><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A/c No.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 031205004941</B>" +
                         "<br><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Branch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Gorky Terrace Branch,Kolkata</B> " +
                         "<br><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IFSC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: ICIC0000312</B> " +
                         "<br><br>" +
                         "<br><I><font color='red'>Note: Please remember to mention your Company Name/Invoice No. in the remarks field  for payments made through NEFT.</font></I>" +
                         "<br><br>Thanking you very much for entrusting us with our services, we wish for a long and continued relation between us.<br>" +
                         "<br>. For Admin related please email darks_hm@darks.in" +

                     " <br><br><I><font size=3><B>Accounts Team, </B></font></I><br><br><font size=3><B> DARKS SECURITY CONSULTANT PRIVATE LIMITED</B></font> <br><B> Ph : +91 - 033 - 2289 - 3554/55</B><br><B> Website : www.darksmanpower.com</B><br><B>Address : MANAGEMENT CONSULTANTS, DETECTIVE SERVICES,HOUSE KEEPING & MAINTENANCE,</B><br><B>CIN No :- U749200R1999PTC005980</B><br><B>Reg.Office: 8C, JAY DURGA NAGAR, BHUBANESWAR - 751 006</B><br><B><br>Corporate Office: 224A, A.J.C.BOSE ROAD, KOLKATA - 700 017</B>";

                    string filename = ddlCname.SelectedItem + "-" + DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

                    mm.Attachments.Add(new Attachment(new MemoryStream(bytes), filename));
                    mm.IsBodyHtml = true;
                    //mm.AlternateViews.Add(Mail_Body());
                    SmtpClient smtp = new SmtpClient();
                    smtp.Port = 587;
                    smtp.Host = "smtp.gmail.com";
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = true;
                    NetworkCredential NetworkCred = new NetworkCredential();
                    NetworkCred.UserName = "yeddlaanilreddy@gmail.com";
                    NetworkCred.Password = "pspkalyan";
                    smtp.Credentials = NetworkCred;
                    smtp.Send(mm);


                    return true;


                }
                else
                {
                    return false;
                }

                #endregion End Email sending as on [03-10-2015]



            }

            catch (Exception ex)
            {
                return false;
            }

        }

        protected void btninvoiceDownload_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            MemoryStream ms = new MemoryStream();
            Document document = new Document();
            if (chkletterhead.Checked == true)
            {
                document = new Document(PageSize.A4, 0, 0, 100, 10);
            }
            else
            {
                document = new Document(PageSize.A4, 0, 0, 0, 0);
            }


            Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            string filename = "";
            string CopyName = "";
            document.Open();

            BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            string SelectBillNo = string.Empty;
            string DisplayBillNo = "";

            if (ddlType.SelectedIndex == 0)
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
            }
            else
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
            }
            DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;

            if (DtBilling.Rows.Count > 0)
            {
                DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
            }


            DownloadBill(document, ms);

            filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
            Response.Buffer = true;
            Response.Clear();
            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
            Response.OutputStream.Flush();
            Response.End();
        }

        public void DownloadBill(Document document, MemoryStream ms)
        {

            int month = 0;
            int font = Convert.ToInt32(ddlfont.SelectedValue);

            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    int m = 0;
                    int Copycount = 1;

                    if (chkcopy.Checked == true)
                    {
                        Copycount = 2;
                    }

                    //for (m = 0; m < Copycount; m++)
                    {
                        document.NewPage();
                        string CopyName = "";
                        if (chkcopy.Checked == true)
                        {
                            //if (m == 0)
                            //{
                            //    CopyName = "ORIGINAL FOR RECIPIENT";
                            //}
                            //if (m == 1)
                            //{
                            //    CopyName = "DUPLICATE FOR SUPPLIER";
                            //}
                        }
                        PdfPCell cell;
                        #region for PDf
                        Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                        PdfWriter writer = PdfWriter.GetInstance(document, ms);

                        document.Open();
                        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                        #region for CompanyInfo
                        string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";
                        DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        string companyName = "Your Company Name";
                        string companyAddress = "Your Company Address";
                        string companyaddressline = " ";
                        string emailid = "";
                        string website = "";
                        string phoneno = "";
                        string PANNO = "";
                        string PFNo = "";
                        string Esino = "";
                        string CmpPFNo = "";
                        string CmpEsino = "";
                        string Servicetax = "";
                        string notes = "";
                        string ServiceText = "";
                        string PSARARegNo = "";
                        string Category = "";
                        string HSNNumber = "";
                        string SACCode = "";
                        string BillDesc = "";
                        string BankName = "";
                        string BankAcNumber = "";
                        string IFSCCode = "";
                        string BranchName = "";
                        string CINNo = "";
                        string MSMENo = "";
                        string BillSeq = "";
                        if (compInfo.Rows.Count > 0)
                        {
                            companyName = compInfo.Rows[0]["CompanyName"].ToString();
                            companyAddress = compInfo.Rows[0]["Address"].ToString();
                            //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                            companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                            //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                            PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                            CmpPFNo = compInfo.Rows[0]["PFNo"].ToString();
                            Category = compInfo.Rows[0]["Category"].ToString();
                            CmpEsino = compInfo.Rows[0]["ESINo"].ToString();
                            Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                            emailid = compInfo.Rows[0]["Emailid"].ToString();
                            website = compInfo.Rows[0]["Website"].ToString();
                            phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                            notes = compInfo.Rows[0]["notes"].ToString();
                            HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                            SACCode = compInfo.Rows[0]["SACCode"].ToString();
                            BillDesc = compInfo.Rows[0]["BillDesc"].ToString();
                            BankName = compInfo.Rows[0]["Bankname"].ToString();
                            BranchName = compInfo.Rows[0]["BranchName"].ToString();
                            BankAcNumber = compInfo.Rows[0]["bankaccountno"].ToString();
                            IFSCCode = compInfo.Rows[0]["IfscCode"].ToString();
                            CINNo = compInfo.Rows[0]["CINNo"].ToString();
                            MSMENo = compInfo.Rows[0]["MSMENo"].ToString();
                            BillSeq= compInfo.Rows[0]["BillSeq"].ToString();
                        }

                        #endregion

                        DateTime DtLastDay = DateTime.Now;
                        if (Chk_Month.Checked == false)
                        {
                            DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                        }
                        if (Chk_Month.Checked == true)
                        {
                            DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        }
                        var ContractID = "";


                        #region  Begin Get Contract Id Based on The Last Day

                        Hashtable HtGetContractID = new Hashtable();
                        var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                        HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                        HtGetContractID.Add("@LastDay", DtLastDay);
                        DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                        if (DTContractID.Rows.Count > 0)
                        {
                            ContractID = DTContractID.Rows[0]["contractid"].ToString();

                        }
                        #endregion

                        #region
                        string SqlQuryForServiCharge = "select ContractId,servicecharge,PODate, isnull(EBD.ESiNO,'') EsiBranchname,isnull(PBD.PFNo,'') PFBranchname,convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,'' billnotes,isnull(ServiceChargeDesc,'') as ServiceChargeDesc,GSTLineitem from contracts  C left join EsiBranchDetails EBD on EBD.EsiBranchid=isnull(C.Esibranch,0) left join PFBranchDetails PBD on PBD.PFBranchid=isnull(C.PFbranch,0)   where " +
                            " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                        DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                        string Typeofwork = "";
                        string BillNotes = "";
                        string ServiceCharge = "0";
                        string strSCType = "";
                        string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                        bool bSCType = false;
                        bool GSTLineitem = false;
                        string strIncludeST = "";
                        string ContractStartDate = "";
                        string strST75 = "";
                        bool bIncludeST = false;
                        bool bST75 = false;
                        string POContent = "";
                        string PODate = "";
                        string CnPFNo = "";
                        string CnESINo = "";
                        string Location = "";
                        string ReversCharges = "";
                        string ServiceChargeDesc = "";
                        // string ServiceTaxCategory = "";
                        if (DtServicecharge.Rows.Count > 0)
                        {
                            PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                            {
                                ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                            }
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                            {
                                strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                            }
                            string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                            if (tempDescription.Trim().Length > 0)
                            {
                                strDescription = tempDescription;
                            }
                            if (strSCType.Length > 0)
                            {
                                bSCType = Convert.ToBoolean(strSCType);
                            }
                            GSTLineitem = Convert.ToBoolean(DtServicecharge.Rows[0]["GSTLineitem"].ToString());
                            PFNo = DtServicecharge.Rows[0]["PFBranchname"].ToString().Trim();
                            Esino = DtServicecharge.Rows[0]["EsiBranchname"].ToString().Trim();

                            strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                            strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                            ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                            if (strIncludeST == "True")
                            {
                                bIncludeST = true;
                            }
                            if (strST75 == "True")
                            {
                                bST75 = true;
                            }
                            POContent = DtServicecharge.Rows[0]["pono"].ToString();
                            Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                            BillNotes = DtServicecharge.Rows[0]["BillNotes"].ToString();
                            // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                            string tempServiceDesc = DtServicecharge.Rows[0]["ServiceChargeDesc"].ToString();
                            if (tempServiceDesc.Trim().Length > 0)
                            {
                                ServiceChargeDesc = tempServiceDesc;
                            }
                        }

                        #endregion

                        #region

                        string selectclientaddress = "select isnull(sg.segname,'') as segname,c.*, s.state as Statename,s.GSTStateCode,gst.gstno,gst.GSTAddress,s1.state as ShipState,s1.GSTStateCode as ShipToStateCode1 from clients c left join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin left join states s1 on s1.stateid=c.ShipToState where clientid= '" + ddlclientid.SelectedValue + "'";
                        DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
                        string OurGSTIN = "";
                        string GSTIN = "";
                        string StateCode = "0";
                        string State = "";
                        string ShipToGSTIN = "";
                        string ShipToStateCode = "0";
                        string ShipToState = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                            StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                            GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                            State = dtclientaddress.Rows[0]["Statename"].ToString();
                            Location = dtclientaddress.Rows[0]["Location"].ToString();

                            //companyAddress = dtclientaddress.Rows[0]["GSTAddress"].ToString();
                            ShipToStateCode = dtclientaddress.Rows[0]["ShipToStateCode1"].ToString();
                            ShipToGSTIN = dtclientaddress.Rows[0]["ShipToGSTIN"].ToString();
                            ShipToState = dtclientaddress.Rows[0]["ShipState"].ToString();
                        }

                        string SelectBillNo = string.Empty;
                        if (ddlType.SelectedIndex == 0)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                        }
                        else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                        }
                        DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                        string BillNo = "";
                        string DisplayBillNo = "";
                        string area = "";
                        string ExtraRemarks = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            area = dtclientaddress.Rows[0]["segname"].ToString();
                        }

                        DateTime BillDate;
                        DateTime DueDate;


                        #region Variables for data Fields as on 11/03/2014 by venkat


                        decimal servicecharge = 0;
                        decimal servicetax = 0;
                        decimal cess = 0;
                        decimal sbcess = 0;
                        decimal kkcess = 0;


                        #region for GST on 17-6-2017 by swathi

                        decimal CGST = 0;
                        decimal SGST = 0;
                        decimal IGST = 0;
                        decimal Cess1 = 0;
                        decimal Cess2 = 0;
                        decimal CGSTPrc = 0;
                        decimal SGSTPrc = 0;
                        decimal IGSTPrc = 0;
                        decimal Cess1Prc = 0;
                        decimal Cess2Prc = 0;

                        #endregion for GST on 17-6-2017 by swathi


                        decimal shecess = 0;
                        decimal totalamount = 0;
                        decimal TotalbeforeTax = 0;
                        decimal Grandtotal = 0;

                        decimal ServiceTax75 = 0;
                        decimal ServiceTax25 = 0;

                        decimal machinarycost = 0;
                        decimal materialcost = 0;
                        decimal maintenancecost = 0;
                        decimal extraonecost = 0;
                        decimal extratwocost = 0;
                        decimal discountone = 0;
                        decimal discounttwo = 0;

                        string machinarycosttitle = "";
                        string materialcosttitle = "";
                        string maintenancecosttitle = "";
                        string extraonecosttitle = "";
                        string extratwocosttitle = "";
                        string discountonetitle = "";
                        string discounttwotitle = "";

                        bool Extradatacheck = false;
                        bool ExtraDataSTcheck = false;

                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;

                        string strExtradatacheck = "";
                        string strExtrastcheck = "";

                        string strSTMachinary = "";
                        string strSTMaterial = "";
                        string strSTMaintenance = "";
                        string strSTExtraone = "";
                        string strSTExtratwo = "";

                        string strSCMachinary = "";
                        string strSCMaterial = "";
                        string strSCMaintenance = "";
                        string strSCExtraone = "";
                        string strSCExtratwo = "";

                        string strSTDiscountone = "";
                        string strSTDiscounttwo = "";

                        decimal staxamtonservicecharge = 0;
                        decimal RelChrgAmt = 0;
                        decimal PFAmt = 0;
                        decimal ESIAmt = 0;
                        decimal BpfPer = 0;
                        decimal BesiPer = 0;


                        #endregion

                        DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        // for both "1/1/2000" or "25/1/2000" formats
                        string billdt = dtn.ToString("MM/dd/yyyy");

                        string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate";
                        DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                        string CGSTAlias = "";
                        string SGSTAlias = "";
                        string IGSTAlias = "";
                        string Cess1Alias = "";
                        string Cess2Alias = "";
                        string GSTINAlias = "";
                        string OurGSTINAlias = "";

                        string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                        DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                        string SCPersent = "";
                        if (DtTaxes.Rows.Count > 0)
                        {
                            SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                            CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                            SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                            IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                            Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                            Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                            GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                            OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        }
                        else
                        {
                            lblResult.Text = "There Is No Tax Values For Generating Bills ";
                            return;
                        }


                        if (DtBilling.Rows.Count > 0)
                        {

                            ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                            BillNo = DtBilling.Rows[0]["billno"].ToString();
                            DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                            BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());

                            OurGSTIN = DtBilling.Rows[0]["OURGSTNo"].ToString();
                            StateCode = DtBilling.Rows[0]["BillToStateCode"].ToString();
                            GSTIN = DtBilling.Rows[0]["BillToGSTNo"].ToString();
                            State = DtBilling.Rows[0]["BillToState"].ToString();
                            ShipToStateCode = DtBilling.Rows[0]["ShipToStateCode"].ToString();
                            ShipToGSTIN = DtBilling.Rows[0]["ShipToGSTNo"].ToString();
                            ShipToState = DtBilling.Rows[0]["ShipToState"].ToString();

                            if (ddlType.SelectedIndex == 0)
                            {
                                DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                                {
                                    ServiceTax75 = decimal.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                                {
                                    ServiceTax25 = decimal.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                                {
                                    servicecharge = decimal.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                                {
                                    RelChrgAmt = decimal.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                                }

                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Bpfamt"].ToString()) == false)
                                {
                                    PFAmt = decimal.Parse(DtBilling.Rows[0]["Bpfamt"].ToString());
                                }


                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Besiamt"].ToString()) == false)
                                {
                                    ESIAmt = decimal.Parse(DtBilling.Rows[0]["Besiamt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BpfPer"].ToString()) == false)
                                {
                                    BpfPer = decimal.Parse(DtBilling.Rows[0]["BpfPer"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BesiPer"].ToString()) == false)
                                {
                                    BesiPer = decimal.Parse(DtBilling.Rows[0]["BesiPer"].ToString());
                                }

                            }

                            else
                            {
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                                {
                                    servicecharge = decimal.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrgPer"].ToString()) == false)
                                {
                                    ServiceCharge = DtBilling.Rows[0]["ServiceChrgPer"].ToString();
                                }
                            }



                            #region Begin New code for values taken from database as on 11/03/2014 by venkat

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                            {
                                totalamount = decimal.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalbeforeTax"].ToString()) == false)
                            {
                                TotalbeforeTax = decimal.Parse(DtBilling.Rows[0]["TotalbeforeTax"].ToString());
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                            {
                                servicetax = decimal.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                            {
                                sbcess = decimal.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                            {
                                kkcess = decimal.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                            }

                            #region for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                            {
                                CGST = decimal.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                            {
                                SGST = decimal.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                            {
                                IGST = decimal.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                            {
                                Cess1 = decimal.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                            {
                                Cess2 = decimal.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                            {
                                CGSTPrc = decimal.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                            {
                                SGSTPrc = decimal.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                            {
                                IGSTPrc = decimal.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                            {
                                Cess1Prc = decimal.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                            {
                                Cess2Prc = decimal.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                            }

                            #endregion for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                            {
                                cess = decimal.Parse(DtBilling.Rows[0]["CESS"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                            {
                                shecess = decimal.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                            {
                                Grandtotal = decimal.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                            {
                                machinarycost = decimal.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                            {
                                materialcost = decimal.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                            {
                                maintenancecost = decimal.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                            {
                                extraonecost = decimal.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                            {
                                extratwocost = decimal.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                            {
                                discountone = decimal.Parse(DtBilling.Rows[0]["Discount"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                            {
                                discounttwo = decimal.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                            }

                            machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                            materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                            maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                            extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                            extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                            discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                            discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                            {
                                strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                                if (strExtradatacheck == "True")
                                {
                                    Extradatacheck = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                            {
                                strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                                if (strExtrastcheck == "True")
                                {
                                    ExtraDataSTcheck = true;
                                }
                            }



                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                            {
                                strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                                if (strSTMachinary == "True")
                                {
                                    STMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                            {
                                strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                                if (strSTMaterial == "True")
                                {
                                    STMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                            {
                                strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                                if (strSTMaintenance == "True")
                                {
                                    STMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                            {
                                strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                                if (strSTExtraone == "True")
                                {
                                    STExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                            {
                                strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                                if (strSTExtratwo == "True")
                                {
                                    STExtratwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                            {
                                strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                                if (strSCMachinary == "True")
                                {
                                    SCMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                            {
                                strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                                if (strSCMaterial == "True")
                                {
                                    SCMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                            {
                                strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                                if (strSCMaintenance == "True")
                                {
                                    SCMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                            {
                                strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                                if (strSCExtraone == "True")
                                {
                                    SCExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                            {
                                strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                                if (strSCExtratwo == "True")
                                {
                                    SCExtratwo = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                            {
                                staxamtonservicecharge = decimal.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                            }

                            #endregion
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                            return;
                        }
                        string Year = DateTime.Now.Year.ToString();
                        #endregion

                        document.AddTitle(companyName);
                        document.AddAuthor("DIYOS");
                        document.AddSubject("Invoice");
                        document.AddKeywords("Keyword1, keyword2, …");
                        string imagepath = Server.MapPath("~/assets/" + CmpIDPrefix + "BillLogo.png");
                        //if (CmpIDPrefix == "STD")
                        //{

                        //}

                        //PdfContentByte content = writer.DirectContent;
                        PdfPTable tablelogo = new PdfPTable(2);
                        tablelogo.TotalWidth = 500f;
                        tablelogo.LockedWidth = true;
                        float[] widtlogo = new float[] { 0.4f, 2f };
                        tablelogo.SetWidths(widtlogo);
                        if (chkletterhead.Checked == true)
                        {
                            PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                            CCompName.HorizontalAlignment = 1;
                            CCompName.Border = 0;
                            CCompName.Colspan = 2;
                            // CCompName.PaddingTop =50;
                            tablelogo.AddCell(CCompName);

                            PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            CCompAddress.HorizontalAlignment = 1;
                            CCompAddress.Border = 0;
                            CCompAddress.Colspan = 2;
                            // space between lines
                            CCompAddress.SetLeading(0f, 1.3f);
                            tablelogo.AddCell(CCompAddress);

                            PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellline.Border = 0;
                            cellline.Colspan = 2;
                            tablelogo.AddCell(cellline);
                            //For Space

                            PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celll.Border = 0;
                            celll.Colspan = 2;
                            celll.PaddingTop = 25f;
                            tablelogo.AddCell(celll);
                            tablelogo.AddCell(celll);
                            document.Add(tablelogo);
                        }
                        else
                        {
                            if (File.Exists(imagepath))
                            {
                                iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);
                                gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                                gif2.ScalePercent(75f);//55
                                gif2.SetAbsolutePosition(50f, 750f); //745
                                document.Add(gif2);
                            }

                            //tablelogo.AddCell(celll);


                            var FontColour = new BaseColor(178, 34, 34);
                            Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                            //if (CmpIDPrefix == "STD")
                            {
                                PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 20, Font.BOLD, BaseColor.BLACK)));
                                CCompName1.HorizontalAlignment = 0;
                                CCompName1.Colspan = 2;
                                CCompName1.PaddingLeft = 120f;
                                CCompName1.PaddingTop = 10f;
                                CCompName1.Border = 0;                              
                                tablelogo.AddCell(CCompName1);

                                PdfPCell CCompName = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName.HorizontalAlignment = 0;
                                CCompName.Colspan = 2;
                                CCompName.Border = 0;
                                //CCompName.PaddingTop = 5f;
                                CCompName.PaddingLeft = 120;
                                CCompName.SetLeading(0, 1.2f);
                                tablelogo.AddCell(CCompName);
                            }

                            if (emailid.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 0;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                //CCompName2.PaddingTop = 4f;
                                CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (phoneno.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 0;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                CCompName2.PaddingBottom = 5;
                                CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (GSTIN.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.Border = 0;
                                // clietnpin.PaddingTop = 4f;
                                //clietnpin.BorderWidthBottom = 0;
                                //clietnpin.BorderWidthTop = 0;
                                //clietnpin.BorderWidthLeft = .2f;
                                //clietnpin.BorderWidthRight = 0;
                                //clietnpin.BorderColor = BaseColor.BLACK;
                                // clietnpin.PaddingLeft = 120;
                                //tablelogo.AddCell(clietnpin);                      

                            }

                            var CelGSTaddr = new Paragraph();
                            CelGSTaddr.Add(new Chunk(CopyName, FontFactory.GetFont(FontStyle, 11 - 1, Font.BOLD, BaseColor.BLACK)));
                            CelGSTaddr.SetLeading(0, 1f);
                            PdfPCell CellGstaddress = new PdfPCell();
                            CellGstaddress.AddElement(CelGSTaddr);
                            CellGstaddress.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellGstaddress.Colspan = 2;
                            CellGstaddress.BorderWidthTop = 0;
                            CellGstaddress.BorderWidthBottom = 0;
                            CellGstaddress.BorderWidthLeft = 0;
                            CellGstaddress.BorderWidthRight = 0;
                            CellGstaddress.PaddingLeft = 430;
                            tablelogo.AddCell(CellGstaddress);

                            document.Add(tablelogo);
                        }

                        PdfPTable address = new PdfPTable(5);
                        address.TotalWidth = 500f;
                        address.LockedWidth = true;
                        float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                        address.SetWidths(addreslogo);

                        PdfPCell Celemail = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
                        Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Celemail.Colspan = 5;
                        Celemail.FixedHeight = 20;
                        Celemail.BorderWidthTop = .2f;
                        Celemail.BorderWidthBottom = .2f;
                        Celemail.BorderWidthLeft = .2f;
                        Celemail.BorderWidthRight = .2f;
                        Celemail.BorderColor = BaseColor.BLACK;
                        address.AddCell(Celemail);

                        PdfPTable tempTable1 = new PdfPTable(3);
                        tempTable1.TotalWidth = 300f;
                        tempTable1.LockedWidth = true;
                        float[] tempWidth1 = new float[] { 0.8f, 2f, 2f };
                        tempTable1.SetWidths(tempWidth1);

                        string addressData = "";

                        addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();

                        PdfPCell clientaddrhno1 = new PdfPCell(new Paragraph("Billing Address", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno1.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno1.BorderWidthBottom = 0;
                        clientaddrhno1.BorderWidthTop = 0;
                        clientaddrhno1.BorderWidthLeft = .2f;
                        clientaddrhno1.BorderWidthRight = 0.2f;
                        clientaddrhno1.BorderColor = BaseColor.BLACK;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable1.AddCell(clientaddrhno1);
                        if (addressData.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable1.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }



                        //if (addressData.Trim().Length > 0)
                        //{
                        //    PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    clientcolony.Colspan = 3;
                        //    clientcolony.BorderWidthBottom = 0;
                        //    clientcolony.BorderWidthTop = 0;
                        //    clientcolony.BorderWidthLeft = .2f;
                        //    clientcolony.BorderWidthRight = 0.2f;
                        //    clientcolony.BorderColor = BaseColor.BLACK;
                        //    //clientcolony.PaddingLeft = 20;
                        //    tempTable1.AddCell(clientcolony);
                        //}

                        //if (addressData.Trim().Length > 0)
                        //{
                        //    PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    clientcity.Colspan = 3;
                        //    clientcity.BorderWidthBottom = 0;
                        //    clientcity.BorderWidthTop = 0;
                        //    clientcity.BorderWidthLeft = .2f;
                        //    clientcity.BorderWidthRight = 0.2f;
                        //    clientcity.BorderColor = BaseColor.BLACK;
                        //    //  clientcity.PaddingLeft = 20;
                        //    tempTable1.AddCell(clientcity);
                        //}

                        //if (addressData.Trim().Length > 0)
                        //{
                        //    PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    clientstate.Colspan = 3;
                        //    clientstate.BorderWidthBottom = 0;
                        //    clientstate.BorderWidthTop = 0;
                        //    clientstate.BorderWidthLeft = .2f;
                        //    clientstate.BorderWidthRight = 0.2f;
                        //    clientstate.BorderColor = BaseColor.BLACK;
                        //    // clientstate.PaddingLeft = 20;
                        //    tempTable1.AddCell(clientstate);
                        //}
                        var ClientAddrColony = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        var ClientAddrcity = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        var ClientAddrstate = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                        var ClientAddrpin = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                        addressData = (ClientAddrColony + "," + ClientAddrcity + "," + ClientAddrstate + "," + ClientAddrpin);
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                        if (Bdt.Rows.Count > 0)
                        {
                            if (StateCode == "1" || StateCode == "2" || StateCode == "3" || StateCode == "4" || StateCode == "5" || StateCode == "6" || StateCode == "7" || StateCode == "8" || StateCode == "7")
                            {
                                StateCode = "0" + StateCode;
                            }
                            if (State.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.BorderWidthRight = 0;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);

                                clietnpin = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = 0;
                                clietnpin.BorderWidthRight = 0;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);
                            }
                            if (StateCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code : " + StateCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = 0;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);
                            }


                        }

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.Border = 0;
                            clietnpin.PaddingTop = 4f;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            //clietnpin.BorderColor = BaseColor.BLACK;
                            // clietnpin.PaddingLeft = 120;
                            tempTable1.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                        }

                        var BillToPanNo = dtclientaddress.Rows[0]["BillToPanNo"].ToString();
                        if (BillToPanNo.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("PAN NO ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.Border = 0;
                            clietnpin.PaddingTop = 4f;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            //clietnpin.BorderColor = BaseColor.BLACK;
                            // clietnpin.PaddingLeft = 120;
                            tempTable1.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + BillToPanNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                        }



                        #region copy
                        PdfPCell childTable1 = new PdfPCell(tempTable1);
                        childTable1.Border = 0;
                        childTable1.Colspan = 3;
                        // childTable1.FixedHeight = 100;
                        childTable1.HorizontalAlignment = 0;

                        address.AddCell(childTable1);

                        PdfPTable tempTable2 = new PdfPTable(2);
                        tempTable2.TotalWidth = 200f;
                        tempTable2.LockedWidth = true;
                        float[] tempWidth2 = new float[] { 0.8f, 1.2f };
                        tempTable2.SetWidths(tempWidth2);



                        var phrase = new Phrase();
                        phrase.Add(new Chunk("Invoice No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell13 = new PdfPCell();
                        cell13.AddElement(phrase);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10 = new Phrase();
                        phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phrase11 = new Phrase();
                        phrase11.Add(new Chunk("Invoice Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell131 = new PdfPCell();
                        cell131.AddElement(phrase11);
                        cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131.BorderWidthBottom = 0;
                        cell131.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131.Colspan = 1;
                        cell131.BorderWidthLeft = 0f;
                        cell131.BorderWidthRight = 0f;
                        cell131.PaddingTop = -5;
                        cell131.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131);

                        var phrase11v = new Phrase();
                        phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                            BillDate.Year, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell131v = new PdfPCell();
                        cell131v.AddElement(phrase11v);
                        cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131v.BorderWidthBottom = 0;
                        cell131v.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131v.Colspan = 1;
                        cell131v.BorderWidthLeft = 0;
                        cell131v.BorderWidthRight = .2f;
                        cell131v.PaddingTop = -5;
                        cell131v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131v);


                        var phraseim = new Phrase();
                        phraseim.Add(new Chunk("Invoice Month", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseim);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10im = new Phrase();
                        phrase10im.Add(new Chunk(": " + GetMonthName() + "'" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10im);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);


                        var phraseperiod = new Phrase();
                        phraseperiod.Add(new Chunk("Invoice Period", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseperiod);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        string Fromdate = txtfromdate.Text;
                        string Todate = txttodate.Text;


                        var phrase10p = new Phrase();
                        phrase10p.Add(new Chunk(": " + Fromdate + " to " + Todate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10p);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phraseperiod1 = new Phrase();
                        phraseperiod1.Add(new Chunk("Contract Year", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseperiod1);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                      

                        var phrase10p1 = new Phrase();
                        phrase10p1.Add(new Chunk(": " + BillSeq, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10p1);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        if (POContent.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("PO No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + POContent, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (PODate.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Work Order Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + PODate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (Location.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Place of Supply", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + Location, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (ReversCharges.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Revers Charges", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);
                            if (ReversCharges == "True")
                            {
                                ReversCharges = "Yes";
                            }
                            else
                            {
                                ReversCharges = "No";
                            }

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + ReversCharges, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }


                        PdfPCell childTable2 = new PdfPCell(tempTable2);
                        childTable2.Border = 0;
                        childTable2.Colspan = 2;
                        //childTable2.FixedHeight = 100;
                        childTable2.HorizontalAlignment = 0;
                        address.AddCell(childTable2);
                        // address.AddCell(celll);
                        document.Add(address);





                        #endregion


                        #region
                        int countGrid = gvClientBilling.Rows.Count;

                        DataTable dtheadings = null;
                        var SPNameD = "GetInvHeadings";
                        Hashtable htheadings = new Hashtable();
                        htheadings.Add("@clientid", ddlclientid.SelectedValue);
                        // htheadings.Add("@LastDay", DtLastDay);
                        dtheadings = config.ExecuteAdaptorAsyncWithParams(SPNameD, htheadings).Result;

                        string InvDescription = "";
                        string InvNoOfEmps = "";
                        string InvNoofDuties = "";
                        string InvPayrate = "";
                        string InvAmount = "";
                        string InvSACCode = "";
                        string InvMonthDays = "";
                        string InvDescriptionVisible = "N";
                        string InvNoOfEmpsVisible = "N";
                        string InvNoofDutiesVisible = "N";
                        string InvPayrateVisible = "N";
                        string InvAmountVisible = "N";
                        string InvSACCodeVisible = "N";
                        string InvMonthDaysVisible = "N";
                        string HSNNo = "";
                        var ExDBRemarks = "";
                        if (dtheadings.Rows.Count > 0)
                        {
                            InvDescription = dtheadings.Rows[0]["InvDescription"].ToString();
                            InvNoOfEmps = dtheadings.Rows[0]["InvNoOfEmps"].ToString();
                            InvNoofDuties = dtheadings.Rows[0]["InvNoofDuties"].ToString();
                            InvPayrate = dtheadings.Rows[0]["InvPayrate"].ToString();
                            InvAmount = dtheadings.Rows[0]["InvAmount"].ToString();
                            InvMonthDays = dtheadings.Rows[0]["InvMonthDays"].ToString();
                            InvSACCode = dtheadings.Rows[0]["InvSACCode"].ToString();
                            InvDescriptionVisible = dtheadings.Rows[0]["InvDescriptionVisible"].ToString();
                            InvNoOfEmpsVisible = dtheadings.Rows[0]["InvNoOfEmpsVisible"].ToString();
                            InvNoofDutiesVisible = dtheadings.Rows[0]["InvNoofDutiesVisible"].ToString();
                            InvPayrateVisible = dtheadings.Rows[0]["InvPayrateVisible"].ToString();
                            InvAmountVisible = dtheadings.Rows[0]["InvAmountVisible"].ToString();
                            InvSACCodeVisible = dtheadings.Rows[0]["InvSACCodeVisible"].ToString();
                            InvMonthDaysVisible = dtheadings.Rows[0]["InvMonthDaysVisible"].ToString();
                        }




                        int colCount = 1;

                        if (InvDescriptionVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoOfEmpsVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvAmountVisible == "Y")
                        {
                            colCount += 1;
                        }



                        if (InvSACCodeVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvMonthDaysVisible == "Y")
                        {
                            colCount += 1;
                        }


                        PdfPTable table = new PdfPTable(colCount);
                        table.TotalWidth = 500f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = 1;
                        //float[] colWidths = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.7f };



                        float[] colWidths = new float[] { };
                        if (colCount == 8)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 7)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 6)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            colWidths = new float[] { 1f, 6f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            colWidths = new float[] { 1f, 6f, 2.7f };
                        }


                        table.SetWidths(colWidths);

                        string cellText;


                        cell = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        if (InvDescriptionVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvDescription, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }
                        if (InvSACCodeVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvSACCode, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }
                        if (InvMonthDaysVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvMonthDays, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }
                        if (InvNoOfEmpsVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvNoOfEmps, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvNoofDuties, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvAmountVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvAmount, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = .2f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        ////export rows from GridView to table
                        float noofshifts = 0;
                        int GridLine = 1;

                        ////export rows from GridView to table
                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 8; j++)
                                        {
                                            //fetch the column value of the current row
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthTop = 0;
                                                if (gvClientBilling.Rows.Count >= 14)
                                                {
                                                    cell.MinimumHeight = 18;
                                                }
                                                else
                                                {
                                                    cell.MinimumHeight = 20;
                                                }
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (InvDescriptionVisible == "Y")
                                            {
                                                if (j == 1)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                                    Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                    Label lbltype = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbltype"));

                                                    string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                        "  where c.clientid='" + ddlclientid.SelectedValue + "' and c.Type='" + lbltype.Text + "' and d.designid='" + labldesig.Text + "'";


                                                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(summaryQry).Result;
                                                    cellText = label1.Text;
                                                    if (dt.Rows.Count > 0)
                                                    {
                                                        if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                            cellText += "\n " + dt.Rows[0]["summary"].ToString() + " ";
                                                    }

                                                    //create a new cell with column value
                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }

                                            }
                                            if (InvSACCodeVisible == "Y")
                                            {
                                                if (j == 2)
                                                {
                                                    string HSNN = "";
                                                    TextBox LblHSNNo = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));

                                                    HSNN = LblHSNNo.Text;

                                                    cell = new PdfPCell(new Phrase(HSNN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }
                                            }
                                            if (InvMonthDaysVisible == "Y")
                                            {
                                                if (j == 3)
                                                {
                                                    string Noofdaysinamonth = "";
                                                    DropDownList LblHSNNo = (DropDownList)(gvClientBilling.Rows[rowIndex].FindControl("ddlnod"));

                                                    Noofdaysinamonth = LblHSNNo.SelectedValue;

                                                    cell = new PdfPCell(new Phrase(Noofdaysinamonth, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }
                                            }
                                            if (InvNoOfEmpsVisible == "Y")
                                            {
                                                if (j == 4)
                                                {

                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                                    if (label1.Text == "0")
                                                    {
                                                        cellText = "";
                                                    }
                                                    else
                                                    {
                                                        cellText = label1.Text;
                                                    }
                                                    //create a new cell with column value


                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                            }


                                            if (InvPayrateVisible == "Y")
                                            {

                                                if (j == 5)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                    TextBox label2 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                    Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                    string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                                       "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.designid='" + labldesig.Text + "'";

                                                    //Duty Hrs removed for KL on 27/05/2015
                                                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(dutyhrsQry).Result;
                                                    cellText = label1.Text;

                                                    //create a new cell with column value
                                                    if (cellText == "0")
                                                    {
                                                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 1;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = 0f;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                    else
                                                    {
                                                        cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 1;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderWidthRight = 0f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }

                                                }

                                            }


                                            if (InvNoofDutiesVisible == "Y")
                                            {
                                                if (j == 6)
                                                {

                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                                    if (label1.Text == "0")
                                                    {
                                                        cellText = "";
                                                    }
                                                    else
                                                    {
                                                        cellText = label1.Text;
                                                    }
                                                    //create a new cell with column value


                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                            }

                                            if (InvAmountVisible == "Y")
                                            {
                                                if (j == 7)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                    cellText = label1.Text;
                                                    //create a new cell with column value

                                                    if (cellText == "0")
                                                    {
                                                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 2;
                                                        //cell.Border = 0;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = .2f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                    else
                                                    {
                                                        cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 2;
                                                        //cell.Border = 0;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = .2f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            GridLine++;
                        }

                        #region for space
                        PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty.HorizontalAlignment = 2;
                        Cellempty.Colspan = 1;
                        Cellempty.BorderWidthTop = 0;
                        Cellempty.BorderWidthRight = 0f;
                        Cellempty.BorderWidthLeft = .2f;
                        Cellempty.BorderWidthBottom = 0;
                        Cellempty.MinimumHeight = 2;
                        Cellempty.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty1.HorizontalAlignment = 2;
                        Cellempty1.Colspan = 1;
                        Cellempty1.BorderWidthTop = 0;
                        Cellempty1.BorderWidthRight = 0f;
                        Cellempty1.BorderWidthLeft = 0.2f;
                        Cellempty1.BorderWidthBottom = 0;
                        Cellempty1.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty6.HorizontalAlignment = 2;
                        Cellempty6.Colspan = 1;
                        Cellempty6.BorderWidthTop = 0;
                        Cellempty6.BorderWidthRight = 0f;
                        Cellempty6.BorderWidthLeft = .2f;
                        Cellempty6.BorderWidthBottom = 0;

                        Cellempty6.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty7.HorizontalAlignment = 2;
                        Cellempty7.Colspan = 1;
                        Cellempty7.BorderWidthTop = 0;
                        Cellempty7.BorderWidthRight = 0.2f;
                        Cellempty7.BorderWidthLeft = 0.2f;
                        Cellempty7.BorderWidthBottom = 0;
                        Cellempty7.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty2.HorizontalAlignment = 2;
                        Cellempty2.Colspan = 1;
                        Cellempty2.BorderWidthTop = 0;
                        Cellempty2.BorderWidthRight = 0f;
                        Cellempty2.BorderWidthLeft = 0.2f;
                        Cellempty2.BorderWidthBottom = 0;
                        Cellempty2.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty3.HorizontalAlignment = 2;
                        Cellempty3.Colspan = 1;
                        Cellempty3.BorderWidthTop = 0;
                        Cellempty3.BorderWidthRight = 0f;
                        Cellempty3.BorderWidthLeft = 0.2f;
                        Cellempty3.BorderWidthBottom = 0;
                        Cellempty3.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty4.HorizontalAlignment = 2;
                        Cellempty4.Colspan = 1;
                        Cellempty4.BorderWidthTop = 0;
                        Cellempty4.BorderWidthRight = 0f;
                        Cellempty4.BorderWidthLeft = 0.2f;
                        Cellempty4.BorderWidthBottom = 0;
                        Cellempty4.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty5.HorizontalAlignment = 2;
                        Cellempty5.Colspan = 1;
                        Cellempty5.BorderWidthTop = 0;
                        Cellempty5.BorderWidthRight = 0.2f;
                        Cellempty5.BorderWidthLeft = 0.2f;
                        Cellempty5.BorderWidthBottom = 0;
                        Cellempty5.BorderColor = BaseColor.BLACK;



                        if (gvClientBilling.Rows.Count == 1)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 13; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                    //table.AddCell(Cellempty4);
                                    //table.AddCell(Cellempty5);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 2)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 12; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 3)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 11; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 9; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }

                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 4)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 5)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 9; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 6)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 7)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }

                        if (gvClientBilling.Rows.Count == 8)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 4; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    if (InvSACCodeVisible == "Y")
                                    {
                                        table.AddCell(Cellempty6);
                                    }
                                    if (InvMonthDaysVisible == "Y")
                                    {
                                        table.AddCell(Cellempty7);
                                    }
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }




                        #endregion

                        document.Add(table);

                        // tablelogo.AddCell(celll);


                        PdfPTable tempTable22 = new PdfPTable(colCount);
                        tempTable22.TotalWidth = 500f;
                        tempTable22.LockedWidth = true;
                        // float[] tempWidth22 = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.7f };//2.9f, 1.83f
                        float[] tempWidth22 = new float[] { };
                        if (colCount == 8)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 7)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 6)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2.7f };
                        }
                        tempTable22.SetWidths(tempWidth22);

                        #region




                        if (RelChrgAmt > 0)
                        {

                            PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldz5.Colspan = colCount - 1;
                            celldz5.BorderWidthBottom = 0;
                            celldz5.BorderWidthLeft = .2f;
                            celldz5.BorderWidthTop = 0;
                            celldz5.BorderWidthRight = .2f;
                            celldz5.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz5);

                            PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldz6.BorderWidthBottom = 0;
                            celldz6.BorderWidthLeft = .2f;
                            celldz6.BorderWidthTop = 0;
                            celldz6.BorderWidthRight = .2f;
                            celldz6.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz6);
                        }

                        int Noofcolumns = 4;
                        int Noofcolumnsheading = 3;
                        if (colCount == 4)
                        {
                            Noofcolumns = 2;
                            Noofcolumnsheading = 1;
                        }

                        PdfPCell celldz1 = new PdfPCell(new Phrase(BillDesc, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz1.Colspan = colCount - Noofcolumns;
                        celldz1.BorderWidthBottom = 0;
                        celldz1.BorderWidthLeft = .2f;
                        celldz1.BorderWidthTop = 0.2f;
                        celldz1.BorderWidthRight = 0.2f;
                        celldz1.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz1);

                        celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz1.Colspan = Noofcolumnsheading;
                        celldz1.BorderWidthBottom = 0;
                        celldz1.BorderWidthLeft = .2f;
                        celldz1.BorderWidthTop = .2f;
                        celldz1.BorderWidthRight = 0;
                        celldz1.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz1);

                        PdfPCell celldz4 = new PdfPCell(new Phrase(" " + (totalamount - (PFAmt + ESIAmt)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz4.BorderWidthBottom = 0;
                        celldz4.BorderWidthLeft = 0.2f;
                        celldz4.BorderWidthTop = .2f;
                        celldz4.BorderWidthRight = .2f;
                        celldz4.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz4);


                        if (PFAmt > 0)
                        {

                            PdfPCell CellCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = colCount - Noofcolumns;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = .2f;
                            CellCGST.BorderWidthTop = 0f;
                            CellCGST.BorderWidthRight = 0.2f;
                            // CellCGST.PaddingBottom = 5;
                            // CellCGST.PaddingTop = 5;
                            CellCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellCGST);

                            CellCGST = new PdfPCell(new Phrase("EPF Employer Share @ " + BpfPer + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = Noofcolumnsheading;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = .2f;
                            CellCGST.BorderWidthTop = 0.2f;
                            CellCGST.BorderWidthRight = 0f;
                            // CellCGST.PaddingBottom = 5;
                            // CellCGST.PaddingTop = 5;
                            CellCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(PFAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0.2f;
                            CellCGSTAmt.BorderWidthTop = 0.2f;
                            CellCGSTAmt.BorderWidthRight = .2f;
                            CellCGSTAmt.BorderColor = BaseColor.BLACK;
                            //CellCGSTAmt.PaddingBottom = 5;
                            //CellCGSTAmt.PaddingTop = 5;
                            tempTable22.AddCell(CellCGSTAmt);

                        }


                        if (ESIAmt > 0)
                        {

                            PdfPCell CellCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = colCount - Noofcolumns;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = .2f;
                            CellCGST.BorderWidthTop = 0f;
                            CellCGST.BorderWidthRight = 0.2f;
                            // CellCGST.PaddingBottom = 5;
                            // CellCGST.PaddingTop = 5;
                            CellCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellCGST);

                            CellCGST = new PdfPCell(new Phrase("ESI Employer Share @ " + BesiPer + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = Noofcolumnsheading;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = .2f;
                            CellCGST.BorderWidthTop = 0.2f;
                            CellCGST.BorderWidthRight = 0f;
                            // CellCGST.PaddingBottom = 5;
                            // CellCGST.PaddingTop = 5;
                            CellCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(ESIAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0.2f;
                            CellCGSTAmt.BorderWidthTop = 0.2f;
                            CellCGSTAmt.BorderWidthRight = .2f;
                            CellCGSTAmt.BorderColor = BaseColor.BLACK;
                            //CellCGSTAmt.PaddingBottom = 5;
                            //CellCGSTAmt.PaddingTop = 5;
                            tempTable22.AddCell(CellCGSTAmt);
                        }

                        #region When Extradata check is false and STcheck is false

                        if (Extradatacheck == true)
                        {
                            if (machinarycost > 0)
                            {
                                if (STMachinary == true)
                                {
                                    if (SCMachinary == true)
                                    {
                                        PdfPCell celldzz = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                        celldzz.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldzz.Colspan = colCount - Noofcolumns;
                                        celldzz.BorderWidthBottom = 0;
                                        celldzz.BorderWidthLeft = .2f;
                                        celldzz.BorderWidthTop = 0;
                                        celldzz.BorderWidthRight = 0.2f;
                                        celldzz.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldzz);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    if (SCMaterial == true)
                                    {
                                        PdfPCell celldzz = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                        celldzz.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldzz.Colspan = colCount - Noofcolumns;
                                        celldzz.BorderWidthBottom = 0;
                                        celldzz.BorderWidthLeft = .2f;
                                        celldzz.BorderWidthTop = 0;
                                        celldzz.BorderWidthRight = 0.2f;
                                        celldzz.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldzz);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    if (SCMaintenance == true)
                                    {
                                        PdfPCell celldzz = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                        celldzz.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldzz.Colspan = colCount - Noofcolumns;
                                        celldzz.BorderWidthBottom = 0;
                                        celldzz.BorderWidthLeft = .2f;
                                        celldzz.BorderWidthTop = 0;
                                        celldzz.BorderWidthRight = 0.2f;
                                        celldzz.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldzz);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == true)
                                {
                                    if (SCExtraone == true)
                                    {
                                        PdfPCell celldzz = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                        celldzz.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldzz.Colspan = colCount - Noofcolumns;
                                        celldzz.BorderWidthBottom = 0;
                                        celldzz.BorderWidthLeft = .2f;
                                        celldzz.BorderWidthTop = 0;
                                        celldzz.BorderWidthRight = 0.2f;
                                        celldzz.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldzz);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    if (SCExtratwo == true)
                                    {
                                        PdfPCell celldzz = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                        celldzz.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldzz.Colspan = colCount - Noofcolumns;
                                        celldzz.BorderWidthBottom = 0;
                                        celldzz.BorderWidthLeft = .2f;
                                        celldzz.BorderWidthTop = 0;
                                        celldzz.BorderWidthRight = 0.2f;
                                        celldzz.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldzz);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                        }

                        if (servicecharge > 0)//bSCType == true)
                        {
                            decimal scharge = servicecharge;
                            if (scharge > 0)
                            {
                                string SCharge = "";
                                if (bSCType == false)
                                {
                                    SCharge = ServiceCharge + "%";
                                }
                                else
                                {
                                    SCharge = ServiceCharge;
                                }


                                PdfPCell Cellservice = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellservice.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellservice.Colspan = colCount - Noofcolumns;
                                Cellservice.BorderWidthBottom = 0;
                                Cellservice.BorderWidthLeft = .2f;
                                Cellservice.BorderWidthTop = 0f;
                                Cellservice.BorderWidthRight = 0.2f;
                                Cellservice.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellservice);

                                Cellservice = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellservice.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellservice.Colspan = Noofcolumnsheading;
                                Cellservice.BorderWidthBottom = 0;
                                Cellservice.BorderWidthLeft = .2f;
                                Cellservice.BorderWidthTop = 0;
                                Cellservice.BorderWidthRight = 0f;
                                Cellservice.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellservice);

                                Cellservice = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellservice.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellservice.BorderWidthBottom = 0;
                                Cellservice.BorderWidthLeft = 0.2f;
                                Cellservice.BorderWidthTop = 0;
                                Cellservice.BorderWidthRight = .2f;
                                Cellservice.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellservice);
                            }
                        }
                        #endregion

                        #region When Extra data is checked and STcheck is true and SCcheck is false

                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == false)
                                {
                                    PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CellIGST2.Colspan = colCount - Noofcolumns;
                                    CellIGST2.BorderWidthBottom = 0;
                                    CellIGST2.BorderWidthLeft = .2f;
                                    CellIGST2.BorderWidthTop = 0f;
                                    CellIGST2.BorderWidthRight = 0.2f;
                                    CellIGST2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(CellIGST2);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = Noofcolumnsheading;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CellIGST2.Colspan = colCount - Noofcolumns;
                                    CellIGST2.BorderWidthBottom = 0;
                                    CellIGST2.BorderWidthLeft = .2f;
                                    CellIGST2.BorderWidthTop = 0f;
                                    CellIGST2.BorderWidthRight = 0.2f;
                                    // CellCGST.PaddingBottom = 5;
                                    // CellCGST.PaddingTop = 5;
                                    CellIGST2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(CellIGST2);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = Noofcolumnsheading;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == false)
                                {
                                    PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CellIGST2.Colspan = colCount - Noofcolumns;
                                    CellIGST2.BorderWidthBottom = 0;
                                    CellIGST2.BorderWidthLeft = .2f;
                                    CellIGST2.BorderWidthTop = 0f;
                                    CellIGST2.BorderWidthRight = 0.2f;
                                    // CellCGST.PaddingBottom = 5;
                                    // CellCGST.PaddingTop = 5;
                                    CellIGST2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(CellIGST2);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = Noofcolumnsheading;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CellIGST2.Colspan = colCount - Noofcolumns;
                                    CellIGST2.BorderWidthBottom = 0;
                                    CellIGST2.BorderWidthLeft = .2f;
                                    CellIGST2.BorderWidthTop = 0f;
                                    CellIGST2.BorderWidthRight = 0.2f;
                                    // CellCGST.PaddingBottom = 5;
                                    // CellCGST.PaddingTop = 5;
                                    CellIGST2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(CellIGST2);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = Noofcolumnsheading;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    CellIGST2.Colspan = colCount - Noofcolumns;
                                    CellIGST2.BorderWidthBottom = 0;
                                    CellIGST2.BorderWidthLeft = .2f;
                                    CellIGST2.BorderWidthTop = 0f;
                                    CellIGST2.BorderWidthRight = 0.2f;
                                    // CellCGST.PaddingBottom = 5;
                                    // CellCGST.PaddingTop = 5;
                                    CellIGST2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(CellIGST2);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = Noofcolumnsheading;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        #endregion

                        #endregion

                        Fromdate = txtfromdate.Text;
                        Todate = txttodate.Text;

                        decimal GSTDiscounts = 0;

                        if (STDiscountone == true)
                        {
                            if (discountone > 0)
                            {

                                PdfPCell CellbbCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.Colspan = colCount - Noofcolumns;
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = .2f;
                                CellbbCGST.BorderWidthTop = 0f;
                                CellbbCGST.BorderWidthRight = 0.2f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);

                                CellbbCGST = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.Colspan = Noofcolumnsheading;
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = .2f;
                                CellbbCGST.BorderWidthTop = 0.2f;
                                CellbbCGST.BorderWidthRight = 0f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);

                                CellbbCGST = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = 0.2f;
                                CellbbCGST.BorderWidthTop = 0.2f;
                                CellbbCGST.BorderWidthRight = .2f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);
                                GSTDiscounts += discountone;



                            }
                        }

                        if (STDiscounttwo == true)
                        {
                            if (discounttwo > 0)
                            {
                                PdfPCell CellbbCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.Colspan = colCount - Noofcolumns;
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = .2f;
                                CellbbCGST.BorderWidthTop = 0f;
                                CellbbCGST.BorderWidthRight = 0.2f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);

                                CellbbCGST = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.Colspan = Noofcolumnsheading;
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = .2f;
                                CellbbCGST.BorderWidthTop = 0.2f;
                                CellbbCGST.BorderWidthRight = 0f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);

                                CellbbCGST = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = 0.2f;
                                CellbbCGST.BorderWidthTop = 0.2f;
                                CellbbCGST.BorderWidthRight = .2f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);
                                GSTDiscounts += discounttwo;
                            }
                        }

                        if (TotalbeforeTax > 0)
                        {
                            PdfPCell CellbbCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellbbCGST.Colspan = colCount - Noofcolumns;
                            CellbbCGST.BorderWidthBottom = 0;
                            CellbbCGST.BorderWidthLeft = .2f;
                            CellbbCGST.BorderWidthTop = 0f;
                            CellbbCGST.BorderWidthRight = 0.2f;
                            CellbbCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellbbCGST);

                            CellbbCGST = new PdfPCell(new Phrase("Total Before Tax", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellbbCGST.Colspan = Noofcolumnsheading;
                            CellbbCGST.BorderWidthBottom = 0;
                            CellbbCGST.BorderWidthLeft = .2f;
                            CellbbCGST.BorderWidthTop = 0.2f;
                            CellbbCGST.BorderWidthRight = 0f;
                            CellbbCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellbbCGST);

                            CellbbCGST = new PdfPCell(new Phrase((TotalbeforeTax).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellbbCGST.BorderWidthBottom = 0;
                            CellbbCGST.BorderWidthLeft = 0.2f;
                            CellbbCGST.BorderWidthTop = 0.2f;
                            CellbbCGST.BorderWidthRight = .2f;
                            CellbbCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellbbCGST);
                        }



                        #region for taxes

                        if (!bIncludeST)
                        {

                            string scpercent = "";
                            if (bST75 == true)
                            {
                                scpercent = "3";
                            }
                            else
                            {
                                scpercent = SCPersent;
                            }

                            if (servicetax > 0)
                            {
                                PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST2.Colspan = colCount - Noofcolumns;
                                CellIGST2.BorderWidthBottom = 0;
                                CellIGST2.BorderWidthLeft = .2f;
                                CellIGST2.BorderWidthTop = 0f;
                                CellIGST2.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellIGST2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST2);

                                PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = Noofcolumnsheading;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0.2f;
                                celldd2.BorderWidthRight = 0f;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                celldd2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0.2f;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (sbcess > 0)
                            {
                                PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST2.Colspan = colCount - Noofcolumns;
                                CellIGST2.BorderWidthBottom = 0;
                                CellIGST2.BorderWidthLeft = .2f;
                                CellIGST2.BorderWidthTop = 0f;
                                CellIGST2.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellIGST2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST2);

                                string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + SBCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = Noofcolumnsheading;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0.2f;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0.2f;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }


                            if (kkcess > 0)
                            {

                                PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST2.Colspan = colCount - Noofcolumns;
                                CellIGST2.BorderWidthBottom = 0;
                                CellIGST2.BorderWidthLeft = .2f;
                                CellIGST2.BorderWidthTop = 0f;
                                CellIGST2.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellIGST2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST2);

                                string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                                PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + KKCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk1.Colspan = Noofcolumnsheading;
                                Cellmtcesskk1.BorderWidthBottom = 0;
                                Cellmtcesskk1.BorderWidthLeft = .2f;
                                Cellmtcesskk1.BorderWidthTop = 0.2f;
                                Cellmtcesskk1.BorderWidthRight = 0f;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                Cellmtcesskk1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellmtcesskk1);

                                PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk2.BorderWidthBottom = 0;
                                Cellmtcesskk2.BorderWidthLeft = 0.2f;
                                Cellmtcesskk2.BorderWidthTop = 0.2f;
                                Cellmtcesskk2.BorderWidthRight = .2f;
                                Cellmtcesskk2.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(Cellmtcesskk2);

                            }

                            #region for GST as on 17-6-2017

                            if (CGST > 0)
                            {
                                PdfPCell CellCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGST.Colspan = colCount - Noofcolumns;
                                CellCGST.BorderWidthBottom = 0;
                                CellCGST.BorderWidthLeft = .2f;
                                CellCGST.BorderWidthTop = 0f;
                                CellCGST.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCGST);

                                CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                                CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGST.Colspan = Noofcolumnsheading;
                                CellCGST.BorderWidthBottom = 0;
                                CellCGST.BorderWidthLeft = .2f;
                                CellCGST.BorderWidthTop = 0.2f;
                                CellCGST.BorderWidthRight = 0f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCGST);

                                PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGSTAmt.BorderWidthBottom = 0;
                                CellCGSTAmt.BorderWidthLeft = 0.2f;
                                CellCGSTAmt.BorderWidthTop = 0.2f;
                                CellCGSTAmt.BorderWidthRight = .2f;
                                CellCGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellCGSTAmt.PaddingBottom = 5;
                                //CellCGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellCGSTAmt);

                            }


                            if (SGST > 0)
                            {
                                PdfPCell CellSGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGST.Colspan = colCount - Noofcolumns;
                                CellSGST.BorderWidthBottom = 0;
                                CellSGST.BorderWidthLeft = .2f;
                                CellSGST.BorderWidthTop = 0f;
                                CellSGST.BorderWidthRight = 0.2f;
                                // CellSGST.PaddingBottom = 5;
                                // CellSGST.PaddingTop = 5;
                                CellSGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellSGST);

                                CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                                CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGST.Colspan = Noofcolumnsheading;
                                CellSGST.BorderWidthBottom = 0;
                                CellSGST.BorderWidthLeft = .2f;
                                CellSGST.BorderWidthTop = 0.2f;
                                CellSGST.BorderWidthRight = 0f;
                                // CellSGST.PaddingBottom = 5;
                                // CellSGST.PaddingTop = 5;
                                CellSGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellSGST);

                                PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGSTAmt.BorderWidthBottom = 0;
                                CellSGSTAmt.BorderWidthLeft = 0.2f;
                                CellSGSTAmt.BorderWidthTop = 0.2f;
                                CellSGSTAmt.BorderWidthRight = .2f;
                                CellSGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellSGSTAmt.PaddingBottom = 5;
                                //CellSGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellSGSTAmt);


                            }

                            if (IGST > 0)
                            {
                                PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST2.Colspan = colCount - Noofcolumns;
                                CellIGST2.BorderWidthBottom = 0;
                                CellIGST2.BorderWidthLeft = .2f;
                                CellIGST2.BorderWidthTop = 0f;
                                CellIGST2.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellIGST2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST2);

                                PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST.Colspan = Noofcolumnsheading;
                                CellIGST.BorderWidthBottom = 0;
                                CellIGST.BorderWidthLeft = .2f;
                                CellIGST.BorderWidthTop = 0.2f;
                                CellIGST.BorderWidthRight = 0f;
                                // CellIGST.PaddingBottom = 5;
                                // CellIGST.PaddingTop = 5;
                                CellIGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST);

                                PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGSTAmt.BorderWidthBottom = 0;
                                CellIGSTAmt.BorderWidthLeft = 0.2f;
                                CellIGSTAmt.BorderWidthTop = 0.2f;
                                CellIGSTAmt.BorderWidthRight = .2f;
                                CellIGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellIGSTAmt.PaddingBottom = 5;
                                //CellIGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellIGSTAmt);


                            }

                            if (Cess1 > 0)
                            {
                                PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST2.Colspan = colCount - Noofcolumns;
                                CellIGST2.BorderWidthBottom = 0;
                                CellIGST2.BorderWidthLeft = .2f;
                                CellIGST2.BorderWidthTop = 0f;
                                CellIGST2.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellIGST2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST2);

                                PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1.Colspan = Noofcolumnsheading;
                                CellCess1.BorderWidthBottom = 0;
                                CellCess1.BorderWidthLeft = .2f;
                                CellCess1.BorderWidthTop = 0.2f;
                                CellCess1.BorderWidthRight = 0f;
                                // CellCess1.PaddingBottom = 5;
                                // CellCess1.PaddingTop = 5;
                                CellCess1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess1);

                                PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1Amt.BorderWidthBottom = 0;
                                CellCess1Amt.BorderWidthLeft = 0.2f;
                                CellCess1Amt.BorderWidthTop = 0.2f;
                                CellCess1Amt.BorderWidthRight = .2f;
                                CellCess1Amt.BorderColor = BaseColor.BLACK;
                                //CellCess1Amt.PaddingBottom = 5;
                                //CellCess1Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess1Amt);

                            }


                            if (Cess2 > 0)
                            {
                                PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST2.Colspan = colCount - Noofcolumns;
                                CellIGST2.BorderWidthBottom = 0;
                                CellIGST2.BorderWidthLeft = .2f;
                                CellIGST2.BorderWidthTop = 0f;
                                CellIGST2.BorderWidthRight = 0.2f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellIGST2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST2);

                                PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2.Colspan = Noofcolumnsheading;
                                CellCess2.BorderWidthBottom = 0;
                                CellCess2.BorderWidthLeft = .2f;
                                CellCess2.BorderWidthTop = 0.2f;
                                CellCess2.BorderWidthRight = 0f;
                                // CellCess2.PaddingBottom = 5;
                                // CellCess2.PaddingTop = 5;
                                CellCess2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess2);

                                PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2Amt.BorderWidthBottom = 0;
                                CellCess2Amt.BorderWidthLeft = 0.2f;
                                CellCess2Amt.BorderWidthTop = 0.2f;
                                CellCess2Amt.BorderWidthRight = .2f;
                                CellCess2Amt.BorderColor = BaseColor.BLACK;
                                //CellCess2Amt.PaddingBottom = 5;
                                //CellCess2Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess2Amt);

                            }

                            #endregion for GST

                            if (cess > 0)
                            {

                                string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + CESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0.2f;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0.2f;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (shecess > 0)
                            {


                                string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                                PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + SHECESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf2.Colspan = colCount - 1;
                                celldf2.BorderWidthBottom = 0;
                                celldf2.BorderWidthLeft = .2f;
                                celldf2.BorderWidthTop = 0.2f;
                                celldf2.BorderWidthRight = 0f;
                                celldf2.BorderColor = BaseColor.BLACK;
                                //celldf2.PaddingBottom = 5;
                                //celldf2.PaddingTop = 5;
                                tempTable22.AddCell(celldf2);


                                PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4.BorderWidthBottom = 0;
                                celldf4.BorderWidthLeft = 0.2f;
                                celldf4.BorderWidthTop = 0.2f;
                                celldf4.BorderWidthRight = .2f;
                                celldf4.BorderColor = BaseColor.BLACK;
                                ////celldf4.PaddingBottom = 5;
                                //celldf4.PaddingTop = 5;
                                //celldf4.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldf4);
                            }
                            #region When Extra data is checked and STcheck is false and SCcheck is true

                            if (machinarycost > 0)
                            {
                                if (STMachinary == false)
                                {
                                    if (SCMachinary == true)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }

                                // bool SCMachinary = false;
                                //bool SCMaterial = false;
                                // bool SCMaintenance = false;
                                //bool SCExtraone = false;
                                //bool SCExtratwo = false;


                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == false)
                                {
                                    if (SCMaterial == true)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == false)
                                {
                                    if (SCMaintenance == true)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == false)
                                {
                                    if (SCExtraone == true)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == false)
                                {
                                    if (SCExtratwo == true)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            #endregion



                            #region When Extra data is checked and STcheck is false and SCcheck is true

                            if (machinarycost > 0)
                            {
                                if (STMachinary == false)
                                {
                                    if (SCMachinary == false)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }

                                // bool SCMachinary = false;
                                //bool SCMaterial = false;
                                // bool SCMaintenance = false;
                                //bool SCExtraone = false;
                                //bool SCExtratwo = false;


                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == false)
                                {
                                    if (SCMaterial == false)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == false)
                                {
                                    if (SCMaintenance == false)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == false)
                                {
                                    if (SCExtraone == false)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == false)
                                {
                                    if (SCExtratwo == false)
                                    {
                                        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        CellIGST2.Colspan = colCount - Noofcolumns;
                                        CellIGST2.BorderWidthBottom = 0;
                                        CellIGST2.BorderWidthLeft = .2f;
                                        CellIGST2.BorderWidthTop = 0f;
                                        CellIGST2.BorderWidthRight = 0.2f;
                                        // CellCGST.PaddingBottom = 5;
                                        // CellCGST.PaddingTop = 5;
                                        CellIGST2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(CellIGST2);

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = Noofcolumnsheading;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = 0.2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = 0f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            #endregion

                            decimal totaltaxamt = 0;
                            totaltaxamt = CGST + SGST + IGST;
                            if (totaltaxamt > 0)
                            {
                                PdfPCell celldfTax2 = new PdfPCell(new Phrase("Total Tax Amount", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldfTax2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldfTax2.Colspan = colCount - 1;
                                celldfTax2.BorderWidthBottom = 0;
                                celldfTax2.BorderWidthLeft = .2f;
                                celldfTax2.BorderWidthTop = 0;
                                celldfTax2.BorderWidthRight = 0f;
                                celldfTax2.BorderColor = BaseColor.BLACK;
                                //celldfTax2.PaddingBottom = 5;
                                //celldfTax2.PaddingTop = 5;
                                //tempTable22.AddCell(celldfTax2);

                                PdfPCell celldf4tax = new PdfPCell(new Phrase(totaltaxamt.ToString("#,##0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldf4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4tax.BorderWidthBottom = 0;
                                celldf4tax.BorderWidthLeft = 0.2f;
                                celldf4tax.BorderWidthTop = 0;
                                celldf4tax.BorderWidthRight = .2f;
                                celldf4tax.BorderColor = BaseColor.BLACK;
                                ////celldf4tax.PaddingBottom = 5;
                                //celldf4tax.PaddingTop = 5;
                                //celldf4tax.BorderColor = BaseColor.BLACK;
                                //tempTable22.AddCell(celldf4tax);
                            }
                        }


                        #endregion for taxes

                        decimal GrandTotalVal = Grandtotal;

                        decimal GrandtotalRoundOff = Math.Round(GrandTotalVal, 0);
                        decimal RoundOff = (GrandtotalRoundOff - GrandTotalVal);
                        decimal GrandtotalValue = (GrandTotalVal + RoundOff);

                        //PdfPCell cellgrandto = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //cellgrandto.Colspan = colCount - Noofcolumns;
                        //cellgrandto.BorderWidthBottom = 0;
                        //cellgrandto.BorderWidthLeft = .2f;
                        //cellgrandto.BorderWidthTop = 0f;
                        //cellgrandto.BorderWidthRight = 0.2f;
                        //cellgrandto.BorderColor = BaseColor.BLACK;
                        //tempTable22.AddCell(cellgrandto);

                        //cellgrandto = new PdfPCell(new Phrase("Round off", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //cellgrandto.Colspan = Noofcolumnsheading;
                        //cellgrandto.BorderWidthBottom = 0;
                        //cellgrandto.BorderWidthLeft = .2f;
                        //cellgrandto.BorderWidthTop = 0.2f;
                        //cellgrandto.BorderWidthRight = 0f;
                        //cellgrandto.BorderColor = BaseColor.BLACK;
                        //tempTable22.AddCell(cellgrandto);

                        //cellgrandto = new PdfPCell(new Phrase(RoundOff.ToString("N2"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //cellgrandto.BorderWidthBottom = 0;
                        //cellgrandto.BorderWidthLeft = 0.2f;
                        //cellgrandto.BorderWidthTop = 0.2f;
                        //cellgrandto.BorderWidthRight = .2f;
                        //cellgrandto.BorderColor = BaseColor.BLACK;
                        //tempTable22.AddCell(cellgrandto);

                        PdfPCell cellgrandto = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        cellgrandto.Colspan = colCount - Noofcolumns;
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = .2f;
                        cellgrandto.BorderWidthTop = 0f;
                        cellgrandto.BorderWidthRight = 0.2f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);

                        cellgrandto = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        cellgrandto.Colspan = Noofcolumnsheading;
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = .2f;
                        cellgrandto.BorderWidthTop = 0.2f;
                        cellgrandto.BorderWidthRight = 0f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);

                        cellgrandto = new PdfPCell(new Phrase(GrandtotalValue.ToString("N2"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = 0.2f;
                        cellgrandto.BorderWidthTop = 0.2f;
                        cellgrandto.BorderWidthRight = .2f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);


                        PdfPCell Cellnoofamout = new PdfPCell(new Phrase("Amount In Words:" + " " + AmountInWords(GrandtotalValue) + "", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        Cellnoofamout.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cellnoofamout.Colspan = colCount;
                        Cellnoofamout.BorderWidthBottom = .2f;
                        Cellnoofamout.BorderWidthLeft = .2f;
                        Cellnoofamout.BorderWidthTop = .2f;
                        Cellnoofamout.BorderWidthRight = 0.2f;
                        Cellnoofamout.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(Cellnoofamout);


                        document.Add(tempTable22);

                        if (GSTLineitem == true)
                        {
                            #region FooterTable
                            PdfPTable tablev = new PdfPTable(7);
                            tablev.TotalWidth = 500f;
                            tablev.LockedWidth = true;
                            float[] widthss = new float[] { 1.5f, 2.5f, 2f, 2f, 2f, 2f, 3f };
                            tablev.SetWidths(widthss);

                            if ((CGST + SGST) > 0)
                            {
                                cell = new PdfPCell(new Phrase("HSN Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthLeft = .2f;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Taxable Value", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Central Tax", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 2;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("State Tax", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 2;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);
                            }
                            else
                            {

                                cell = new PdfPCell(new Phrase("HSN Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthLeft = .2f;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Taxable Value", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 2;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Integrated Tax", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 1.5f;
                                cell.Colspan = 2;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 1.5f;
                                cell.Colspan = 2;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);
                            }





                            //2ndrow
                            if ((CGST + SGST) > 0)
                            {

                                cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = .2f;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);


                                cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Total Tax Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);
                            }
                            else
                            {
                                cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = .2f;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 2;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0.5f;
                                cell.Colspan = 1;
                                cell.PaddingBottom = 3;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 1.5f;
                                cell.PaddingBottom = 3;
                                cell.Colspan = 1;
                                tablev.AddCell(cell);

                                cell = new PdfPCell(new Phrase("Total Tax Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 1.5f;
                                cell.PaddingBottom = 3;
                                cell.Colspan = 2;
                                tablev.AddCell(cell);
                            }


                            DataTable DtDesgnWise = null;
                            var SPDesgnWise = "DesginWiseGSTAmounts";
                            Hashtable htDesgnWise = new Hashtable();
                            htDesgnWise.Add("@ClientID", ddlclientid.SelectedValue);
                            htDesgnWise.Add("@Month", month);
                            htDesgnWise.Add("@BillType", ddlType.SelectedIndex);
                            htDesgnWise.Add("@BillNo", ddlMBBillnos.SelectedValue);

                            DtDesgnWise = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPDesgnWise, htDesgnWise);


                            decimal TotalTaxableval = 0;
                            decimal CGSTAmt = 0;
                            decimal SGSTAmt = 0;
                            decimal IGSTAmt = 0;
                            decimal GrandTotalTaxableval = 0;
                            decimal GrandCGSTAmt = 0;
                            decimal GrandSGSTAmt = 0;
                            decimal GrandIGSTAmt = 0;
                            decimal CGSTRate = 0;
                            decimal SGSTRate = 0;
                            decimal IGSTRate = 0;
                            string HSNCode = "";

                            if (DtDesgnWise.Rows.Count > 0)
                            {
                                for (int k = 0; k < DtDesgnWise.Rows.Count; k++)
                                {
                                    TotalTaxableval = decimal.Parse(DtDesgnWise.Rows[k]["TotalTaxableval"].ToString());
                                    CGSTAmt = decimal.Parse(DtDesgnWise.Rows[k]["CGSTAmt"].ToString());
                                    SGSTAmt = decimal.Parse(DtDesgnWise.Rows[k]["SGSTAmt"].ToString());
                                    IGSTAmt = decimal.Parse(DtDesgnWise.Rows[k]["IGSTAmt"].ToString());
                                    CGSTRate = decimal.Parse(DtDesgnWise.Rows[k]["CGSTPrc"].ToString());
                                    SGSTRate = decimal.Parse(DtDesgnWise.Rows[k]["SGSTPrc"].ToString());
                                    IGSTRate = decimal.Parse(DtDesgnWise.Rows[k]["IGSTPrc"].ToString());
                                    HSNCode = DtDesgnWise.Rows[k]["HSNCode"].ToString();

                                    if ((CGST + SGST) > 0)
                                    {
                                        cell = new PdfPCell(new Phrase(HSNCode, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 0;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = .2f;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        tablev.AddCell(cell);

                                        cell = new PdfPCell(new Phrase(TotalTaxableval.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        tablev.AddCell(cell);
                                        GrandTotalTaxableval += (TotalTaxableval);

                                        cell = new PdfPCell(new Phrase(CGSTRate.ToString() + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        cell.PaddingBottom = 3;
                                        tablev.AddCell(cell);

                                        cell = new PdfPCell(new Phrase(CGSTAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        cell.PaddingBottom = 3;
                                        tablev.AddCell(cell);
                                        GrandCGSTAmt += CGSTAmt;


                                        cell = new PdfPCell(new Phrase(SGSTRate.ToString() + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        cell.PaddingBottom = 3;
                                        tablev.AddCell(cell);

                                        cell = new PdfPCell(new Phrase(SGSTAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        cell.PaddingBottom = 3;
                                        tablev.AddCell(cell);
                                        GrandSGSTAmt += SGSTAmt;

                                        cell = new PdfPCell(new Phrase((GrandCGSTAmt + GrandSGSTAmt).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        cell.PaddingBottom = 3;
                                        tablev.AddCell(cell);
                                    }
                                    else
                                    {
                                        cell = new PdfPCell(new Phrase(HSNCode, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 0;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = .2f;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        tablev.AddCell(cell);

                                        cell = new PdfPCell(new Phrase(TotalTaxableval.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 2;
                                        tablev.AddCell(cell);
                                        GrandTotalTaxableval += (TotalTaxableval);


                                        cell = new PdfPCell(new Phrase(IGSTRate.ToString() + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 0.5f;
                                        cell.Colspan = 1;
                                        cell.PaddingBottom = 3;
                                        tablev.AddCell(cell);

                                        cell = new PdfPCell(new Phrase(IGSTAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 1.5f;
                                        cell.PaddingBottom = 3;
                                        cell.Colspan = 1;
                                        tablev.AddCell(cell);
                                        GrandIGSTAmt += IGSTAmt;

                                        cell = new PdfPCell(new Phrase(GrandIGSTAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                        cell.HorizontalAlignment = 2;
                                        cell.BorderWidthBottom = 0.5f;
                                        cell.BorderWidthLeft = 0;
                                        cell.BorderWidthTop = 0;
                                        cell.BorderWidthRight = 1.5f;
                                        cell.PaddingBottom = 3;
                                        cell.Colspan = 2;
                                        tablev.AddCell(cell);
                                    }



                                }


                                decimal TotalAmount = GrandCGSTAmt + GrandIGSTAmt + GrandSGSTAmt;

                                string GTotal = TotalAmount.ToString("0.00");
                                string[] arr = GTotal.ToString().Split("."[0]);
                                string inwords = "";
                                string rupee = (arr[0]);
                                string paise = "";
                                if (arr.Length == 2)
                                {
                                    if (arr[1].Length > 0 && arr[1] != "00")
                                    {
                                        paise = (arr[1]);
                                    }
                                }

                                if (paise != "0.00" && paise != "0" && paise != "")
                                {
                                    int I = Int16.Parse(paise);
                                    String p = NumberToEnglish.Instance.NumbersToWords(I, true);
                                    paise = p;
                                    rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), false);
                                    inwords = " Rupees " + rupee + "" + paise + " Paise Only /-";

                                }
                                else
                                {
                                    rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), true);
                                    inwords = " Rupees " + rupee + " Only /-";
                                }


                                cell = new PdfPCell(new Phrase("Total Tax Amount (in words) :" + inwords, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0.5f;
                                cell.BorderWidthLeft = .2f;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = .2f;
                                cell.PaddingBottom = 3;
                                cell.Colspan = 7;
                                tablev.AddCell(cell);


                            }


                            document.Add(tablev);

                            #endregion
                        }

                        #region footer

                        PdfPTable Addterms = new PdfPTable(6);
                        Addterms.TotalWidth = 500f;
                        Addterms.LockedWidth = true;
                        float[] widthrerms = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                        Addterms.SetWidths(widthrerms);

                        if (notes.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase(notes, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 6;
                            cell.SetLeading(0, 1.3f);
                            cell.BorderColor = BaseColor.BLACK;
                            Addterms.AddCell(cell);
                        }

                        //if (BankAcNumber.Length > 0 || BankName.Length > 0 || IFSCCode.Length > 0 || BranchName.Length > 0)
                        //{
                        //    cell = new PdfPCell(new Phrase("Bank Details", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    cell.HorizontalAlignment = 0;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.Colspan = 6;
                        //    // cell.SetLeading(0, 1.3f);
                        //    cell.BorderColor = BaseColor.BLACK;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead5 = new Paragraph();
                        //    CcellHead5.Add(new Chunk("Bank NAME : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead5.Add(new Chunk(BankName, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead5);
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.PaddingTop = -3f;
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead6 = new Paragraph();
                        //    CcellHead6.Add(new Chunk("A/C No : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead6.Add(new Chunk(BankAcNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead6);
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    cell.PaddingTop = -3f;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead1 = new Paragraph();
                        //    CcellHead1.Add(new Chunk("Branch : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead1.Add(new Chunk(BranchName, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead1);
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    cell.PaddingTop = -3f;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead2 = new Paragraph();
                        //    CcellHead2.Add(new Chunk("IFSC Code : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead2.Add(new Chunk(IFSCCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead2);
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    cell.PaddingTop = -3f;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    Addterms.AddCell(cell);
                        //}
                        //else
                        //{
                        //    cell = new PdfPCell(new Phrase(BillDesc, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.HorizontalAlignment = 0;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.Colspan = 6;
                        //    cell.SetLeading(0, 1.3f);
                        //    cell.BorderColor = BaseColor.BLACK;
                        //    Addterms.AddCell(cell);
                        //}


                        PdfPTable Childterms = new PdfPTable(3);
                        Childterms.TotalWidth = 290f;
                        Childterms.LockedWidth = true;
                        float[] Celters = new float[] { 1.5f, 2f, 2f };
                        Childterms.SetWidths(Celters);


                        #region for payment terms


                        cell = new PdfPCell(new Phrase(companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        // cell.PaddingTop = 7;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        if (Bdt.Rows.Count > 0)
                        {


                            if (HSNNumber.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("HSN NUMBER", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);


                                cell = new PdfPCell(new Paragraph(": " + HSNNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }



                            if (SACCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("SAC CODE", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);

                                cell = new PdfPCell(new Paragraph(": " + SACCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }


                        if (PANNO.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PAN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PANNO, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }

                        if (Bdt.Rows.Count > 0)
                        {
                            if (OurGSTIN.Length > 0)
                            {


                                cell = new PdfPCell(new Phrase(OurGSTINAlias, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0f;
                                cell.BorderWidthLeft = .2f;
                                cell.Colspan = 1;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);


                                cell = new PdfPCell(new Phrase(": " + OurGSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }
                        if (Servicetax.Length > 0)
                        {


                            cell = new PdfPCell(new Phrase("SER. TAX REG.NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Servicetax, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Category.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("SC-CATEGORY", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Category, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }
                        if (PFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PFNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        else if (CmpPFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CmpPFNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Esino.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Esino, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }
                        else if (CmpEsino.Length > 0)
                        {


                            cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CmpEsino, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }

                        if (CINNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("CIN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CINNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (MSMENo.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("MSME NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + MSMENo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        cell = new PdfPCell(new Phrase("\n\n\nCustomer's seal and signature", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthLeft = .2f;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 5f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        // Childterms.AddCell(cell);




                        #endregion for payment terms


                        PdfPCell Chid3 = new PdfPCell(Childterms);
                        Chid3.Border = 0;
                        Chid3.Colspan = 3;
                        Chid3.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid3);



                        PdfPTable chilk = new PdfPTable(3);
                        chilk.TotalWidth = 210f;
                        chilk.LockedWidth = true;
                        float[] Celterss = new float[] { 2.2f, 2f, 2.7f };
                        chilk.SetWidths(Celterss);




                        cell = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0;
                        cell.PaddingTop = 10f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);

                        cell = new PdfPCell(new Phrase("\n\n\n\n Authorised Signatory", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);



                        cell = new PdfPCell(new Phrase("Computer Generated Invoice and Requires No Signature", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);


                        PdfPCell Chid4 = new PdfPCell(chilk);
                        Chid4.Border = 0;
                        Chid4.Colspan = 3;
                        Chid4.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid4);


                        cell = new PdfPCell(new Phrase("***We are with you for ur safe solutions thank you***", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 6;
                        Addterms.AddCell(cell);

                        document.Add(Addterms);

                        #endregion

                        #endregion

                        #endregion
                    }

                    document.Close();

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btnInvoicePdfDownload_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            MemoryStream ms = new MemoryStream();
            Document document = new Document();
            if (chkletterhead.Checked == true)
            {
                document = new Document(PageSize.A4, 0, 0, 100, 10);
            }
            else
            {
                document = new Document(PageSize.A4, 0, 0, 0, 0);
            }


            Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            string filename = "";
            string CopyName = "";
            document.Open();

            BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            string SelectBillNo = string.Empty;
            string DisplayBillNo = "";

            if (ddlType.SelectedIndex == 0)
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
            }
            else
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
            }
            DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;

            if (DtBilling.Rows.Count > 0)
            {
                DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
            }


            DownloadPdfBill(document, ms);

            filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
            Response.Buffer = true;
            Response.Clear();
            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
            Response.OutputStream.Flush();
            Response.End();
        }

        public void DownloadPdfBill(Document document, MemoryStream ms)
        {
            int month = 0;
            int font = Convert.ToInt32(ddlfont.SelectedValue);

            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    int m = 0;
                    int Copycount = 1;

                    if (chkcopy.Checked == true)
                    {
                        Copycount = 2;
                    }

                    //for (m = 0; m < Copycount; m++)
                    {
                        document.NewPage();
                        string CopyName = "";
                        if (chkcopy.Checked == true)
                        {
                            //if (m == 0)
                            //{
                            //    CopyName = "ORIGINAL FOR RECIPIENT";
                            //}
                            //if (m == 1)
                            //{
                            //    CopyName = "DUPLICATE FOR SUPPLIER";
                            //}
                        }
                        PdfPCell cell;

                        #region for PDf
                        Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                        PdfWriter writer = PdfWriter.GetInstance(document, ms);

                        document.Open();
                        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                        #region for CompanyInfo
                        string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";
                        DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        string companyName = "Your Company Name";
                        string companyAddress = "Your Company Address";
                        string companyaddressline = " ";
                        string emailid = "";
                        string website = "";
                        string phoneno = "";
                        string PANNO = "";
                        string PFNo = "";
                        string Esino = "";
                        string CmpPFNo = "";
                        string CmpEsino = "";
                        string Servicetax = "";
                        string notes = "";
                        string ServiceText = "";
                        string PSARARegNo = "";
                        string Category = "";
                        string HSNNumber = "";
                        string SACCode = "";
                        string BillDesc = "";
                        string BankName = "";
                        string BankAcNumber = "";
                        string IFSCCode = "";
                        string BranchName = "";
                        string CINNo = "";
                        string MSMENo = "";
                        if (compInfo.Rows.Count > 0)
                        {
                            companyName = compInfo.Rows[0]["CompanyName"].ToString();
                            companyAddress = compInfo.Rows[0]["Address"].ToString();
                            //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                            companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                            //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                            PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                            CmpPFNo = compInfo.Rows[0]["PFNo"].ToString();
                            Category = compInfo.Rows[0]["Category"].ToString();
                            CmpEsino = compInfo.Rows[0]["ESINo"].ToString();
                            Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                            emailid = compInfo.Rows[0]["Emailid"].ToString();
                            website = compInfo.Rows[0]["Website"].ToString();
                            phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                            notes = compInfo.Rows[0]["notes"].ToString();
                            HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                            SACCode = compInfo.Rows[0]["SACCode"].ToString();
                            BillDesc = compInfo.Rows[0]["BillDesc"].ToString();
                            BankName = compInfo.Rows[0]["Bankname"].ToString();
                            BranchName = compInfo.Rows[0]["BranchName"].ToString();
                            BankAcNumber = compInfo.Rows[0]["bankaccountno"].ToString();
                            IFSCCode = compInfo.Rows[0]["IfscCode"].ToString();
                            CINNo = compInfo.Rows[0]["CINNo"].ToString();
                            MSMENo = compInfo.Rows[0]["MSMENo"].ToString();
                        }

                        #endregion

                        DateTime DtLastDay = DateTime.Now;
                        if (Chk_Month.Checked == false)
                        {
                            DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                        }
                        if (Chk_Month.Checked == true)
                        {
                            DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        }
                        var ContractID = "";


                        #region  Begin Get Contract Id Based on The Last Day

                        Hashtable HtGetContractID = new Hashtable();
                        var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                        HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                        HtGetContractID.Add("@LastDay", DtLastDay);
                        DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                        if (DTContractID.Rows.Count > 0)
                        {
                            ContractID = DTContractID.Rows[0]["contractid"].ToString();

                        }
                        #endregion

                        #region
                        string SqlQuryForServiCharge = "select ContractId,servicecharge,PODate, isnull(EBD.ESiNO,'') EsiBranchname,isnull(PBD.PFNo,'') PFBranchname,convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,'' billnotes,isnull(ServiceChargeDesc,'') as ServiceChargeDesc,GSTLineitem from contracts  C left join EsiBranchDetails EBD on EBD.EsiBranchid=isnull(C.Esibranch,0) left join PFBranchDetails PBD on PBD.PFBranchid=isnull(C.PFbranch,0)   where " +
                            " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                        DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                        string Typeofwork = "";
                        string BillNotes = "";
                        string ServiceCharge = "0";
                        string strSCType = "";
                        string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                        bool bSCType = false;
                        bool GSTLineitem = false;
                        string strIncludeST = "";
                        string ContractStartDate = "";
                        string strST75 = "";
                        bool bIncludeST = false;
                        bool bST75 = false;
                        string POContent = "";
                        string PODate = "";
                        string CnPFNo = "";
                        string CnESINo = "";
                        string Location = "";
                        string ReversCharges = "";
                        string ServiceChargeDesc = "";


                        // string ServiceTaxCategory = "";
                        if (DtServicecharge.Rows.Count > 0)
                        {
                            PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                            {
                                ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                            }
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                            {
                                strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                            }
                            string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                            if (tempDescription.Trim().Length > 0)
                            {
                                strDescription = tempDescription;
                            }
                            if (strSCType.Length > 0)
                            {
                                bSCType = Convert.ToBoolean(strSCType);
                            }
                            GSTLineitem = Convert.ToBoolean(DtServicecharge.Rows[0]["GSTLineitem"].ToString());
                            PFNo = DtServicecharge.Rows[0]["PFBranchname"].ToString().Trim();
                            Esino = DtServicecharge.Rows[0]["EsiBranchname"].ToString().Trim();

                            strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                            strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                            ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                            if (strIncludeST == "True")
                            {
                                bIncludeST = true;
                            }
                            if (strST75 == "True")
                            {
                                bST75 = true;
                            }
                            POContent = DtServicecharge.Rows[0]["pono"].ToString();
                            Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                            BillNotes = DtServicecharge.Rows[0]["BillNotes"].ToString();
                            // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                            string tempServiceDesc = DtServicecharge.Rows[0]["ServiceChargeDesc"].ToString();
                            if (tempServiceDesc.Trim().Length > 0)
                            {
                                ServiceChargeDesc = tempServiceDesc;
                            }
                        }

                        #endregion

                        #region

                        string selectclientaddress = "select isnull(sg.segname,'') as segname,c.*, s.state as Statename,s.GSTStateCode,gst.gstno,gst.GSTAddress,s1.state as ShipState,s1.GSTStateCode as ShipToStateCode1 from clients c left join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin left join states s1 on s1.stateid=c.ShipToState where clientid= '" + ddlclientid.SelectedValue + "'";
                        DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
                        
                        string OurGSTIN = "";
                        string GSTIN = "";
                        string StateCode = "0";
                        string State = "";

                       
                        string ShipToGSTIN = "";
                        string ShipToStateCode = "0";
                        string ShipToState = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                            StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                            GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                            State = dtclientaddress.Rows[0]["Statename"].ToString();
                            Location = dtclientaddress.Rows[0]["Location"].ToString();

                            //companyAddress = dtclientaddress.Rows[0]["GSTAddress"].ToString();
                            ShipToStateCode = dtclientaddress.Rows[0]["ShipToStateCode1"].ToString();
                            ShipToGSTIN = dtclientaddress.Rows[0]["ShipToGSTIN"].ToString();
                            ShipToState = dtclientaddress.Rows[0]["ShipState"].ToString();
                        }

                        string SelectBillNo = string.Empty;
                        if (ddlType.SelectedIndex == 0)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                        }
                        else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                        }
                        DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                        string BillNo = "";
                        string DisplayBillNo = "";
                        string area = "";
                        string ExtraRemarks = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            area = dtclientaddress.Rows[0]["segname"].ToString();
                        }

                        DateTime BillDate;
                        DateTime DueDate;


                        #region Variables for data Fields as on 11/03/2014 by venkat


                        decimal servicecharge = 0;
                        decimal servicetax = 0;
                        decimal cess = 0;
                        decimal sbcess = 0;
                        decimal kkcess = 0;


                        #region for GST on 17-6-2017 by swathi

                        decimal CGST = 0;
                        decimal SGST = 0;
                        decimal IGST = 0;
                        decimal Cess1 = 0;
                        decimal Cess2 = 0;
                        decimal CGSTPrc = 0;
                        decimal SGSTPrc = 0;
                        decimal IGSTPrc = 0;
                        decimal Cess1Prc = 0;
                        decimal Cess2Prc = 0;

                        #endregion for GST on 17-6-2017 by swathi


                        decimal shecess = 0;
                        decimal totalamount = 0;
                        decimal TotalbeforeTax = 0;
                        decimal Grandtotal = 0;

                        decimal ServiceTax75 = 0;
                        decimal ServiceTax25 = 0;

                        decimal machinarycost = 0;
                        decimal materialcost = 0;
                        decimal maintenancecost = 0;
                        decimal extraonecost = 0;
                        decimal extratwocost = 0;
                        decimal discountone = 0;
                        decimal discounttwo = 0;

                        string machinarycosttitle = "";
                        string materialcosttitle = "";
                        string maintenancecosttitle = "";
                        string extraonecosttitle = "";
                        string extratwocosttitle = "";
                        string discountonetitle = "";
                        string discounttwotitle = "";

                        bool Extradatacheck = false;
                        bool ExtraDataSTcheck = false;

                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;

                        string strExtradatacheck = "";
                        string strExtrastcheck = "";

                        string strSTMachinary = "";
                        string strSTMaterial = "";
                        string strSTMaintenance = "";
                        string strSTExtraone = "";
                        string strSTExtratwo = "";

                        string strSCMachinary = "";
                        string strSCMaterial = "";
                        string strSCMaintenance = "";
                        string strSCExtraone = "";
                        string strSCExtratwo = "";

                        string strSTDiscountone = "";
                        string strSTDiscounttwo = "";

                        decimal staxamtonservicecharge = 0;
                        decimal RelChrgAmt = 0;
                        decimal PFAmt = 0;
                        decimal ESIAmt = 0;
                        decimal BpfPer = 0;
                        decimal BesiPer = 0;


                        #endregion

                        DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        // for both "1/1/2000" or "25/1/2000" formats
                        string billdt = dtn.ToString("MM/dd/yyyy");

                        string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate";
                        DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                        string CGSTAlias = "";
                        string SGSTAlias = "";
                        string IGSTAlias = "";
                        string Cess1Alias = "";
                        string Cess2Alias = "";
                        string GSTINAlias = "";
                        string OurGSTINAlias = "";

                        string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                        DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                        string SCPersent = "";
                        if (DtTaxes.Rows.Count > 0)
                        {
                            SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                            CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                            SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                            IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                            Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                            Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                            GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                            OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        }
                        else
                        {
                            lblResult.Text = "There Is No Tax Values For Generating Bills ";
                            return;
                        }


                        if (DtBilling.Rows.Count > 0)
                        {

                            ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                            BillNo = DtBilling.Rows[0]["billno"].ToString();
                            DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                            BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                            OurGSTIN = DtBilling.Rows[0]["OURGSTNo"].ToString();

                            StateCode = DtBilling.Rows[0]["BillToStateCode"].ToString();
                            GSTIN = DtBilling.Rows[0]["BillToGSTNo"].ToString();
                            State = DtBilling.Rows[0]["BillToState"].ToString();

                            ShipToStateCode = DtBilling.Rows[0]["ShipToStateCode"].ToString();
                            ShipToGSTIN = DtBilling.Rows[0]["ShipToGSTNo"].ToString();
                            ShipToState = DtBilling.Rows[0]["ShipToState"].ToString();

                            if (ddlType.SelectedIndex == 0)
                            {
                                DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                                {
                                    ServiceTax75 = decimal.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                                {
                                    ServiceTax25 = decimal.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                                {
                                    servicecharge = decimal.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                                {
                                    RelChrgAmt = decimal.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                                }

                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Bpfamt"].ToString()) == false)
                                {
                                    PFAmt = decimal.Parse(DtBilling.Rows[0]["Bpfamt"].ToString());
                                }


                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Besiamt"].ToString()) == false)
                                {
                                    ESIAmt = decimal.Parse(DtBilling.Rows[0]["Besiamt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BpfPer"].ToString()) == false)
                                {
                                    BpfPer = decimal.Parse(DtBilling.Rows[0]["BpfPer"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BesiPer"].ToString()) == false)
                                {
                                    BesiPer = decimal.Parse(DtBilling.Rows[0]["BesiPer"].ToString());
                                }

                            }

                            else
                            {
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                                {
                                    servicecharge = decimal.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrgPer"].ToString()) == false)
                                {
                                    ServiceCharge = DtBilling.Rows[0]["ServiceChrgPer"].ToString();
                                }
                            }



                            #region Begin New code for values taken from database as on 11/03/2014 by venkat

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                            {
                                totalamount = decimal.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalbeforeTax"].ToString()) == false)
                            {
                                TotalbeforeTax = decimal.Parse(DtBilling.Rows[0]["TotalbeforeTax"].ToString());
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                            {
                                servicetax = decimal.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                            {
                                sbcess = decimal.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                            {
                                kkcess = decimal.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                            }

                            #region for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                            {
                                CGST = decimal.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                            {
                                SGST = decimal.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                            {
                                IGST = decimal.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                            {
                                Cess1 = decimal.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                            {
                                Cess2 = decimal.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                            {
                                CGSTPrc = decimal.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                            {
                                SGSTPrc = decimal.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                            {
                                IGSTPrc = decimal.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                            {
                                Cess1Prc = decimal.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                            {
                                Cess2Prc = decimal.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                            }

                            #endregion for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                            {
                                cess = decimal.Parse(DtBilling.Rows[0]["CESS"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                            {
                                shecess = decimal.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                            {

                                Grandtotal = decimal.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                            {
                                machinarycost = decimal.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                            {
                                materialcost = decimal.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                            {
                                maintenancecost = decimal.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                            {
                                extraonecost = decimal.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                            {
                                extratwocost = decimal.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                            {
                                discountone = decimal.Parse(DtBilling.Rows[0]["Discount"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                            {
                                discounttwo = decimal.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                            }

                            machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                            materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                            maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                            extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                            extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                            discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                            discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                            {
                                strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                                if (strExtradatacheck == "True")
                                {
                                    Extradatacheck = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                            {
                                strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                                if (strExtrastcheck == "True")
                                {
                                    ExtraDataSTcheck = true;
                                }
                            }



                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                            {
                                strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                                if (strSTMachinary == "True")
                                {
                                    STMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                            {
                                strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                                if (strSTMaterial == "True")
                                {
                                    STMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                            {
                                strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                                if (strSTMaintenance == "True")
                                {
                                    STMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                            {
                                strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                                if (strSTExtraone == "True")
                                {
                                    STExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                            {
                                strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                                if (strSTExtratwo == "True")
                                {
                                    STExtratwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                            {
                                strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                                if (strSCMachinary == "True")
                                {
                                    SCMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                            {
                                strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                                if (strSCMaterial == "True")
                                {
                                    SCMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                            {
                                strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                                if (strSCMaintenance == "True")
                                {
                                    SCMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                            {
                                strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                                if (strSCExtraone == "True")
                                {
                                    SCExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                            {
                                strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                                if (strSCExtratwo == "True")
                                {
                                    SCExtratwo = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                            {
                                staxamtonservicecharge = decimal.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                            }

                            #endregion
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                            return;
                        }
                        string Year = DateTime.Now.Year.ToString();
                        #endregion

                        document.AddTitle(companyName);
                        document.AddAuthor("DIYOS");
                        document.AddSubject("Invoice");
                        document.AddKeywords("Keyword1, keyword2, …");
                        string imagepath = Server.MapPath("~/assets/" + CmpIDPrefix + "BillLogo.png");
                        //if (CmpIDPrefix == "STD")
                        //{

                        //}

                        //PdfContentByte content = writer.DirectContent;
                        PdfPTable tablelogo = new PdfPTable(2);
                        tablelogo.TotalWidth = 500f;
                        tablelogo.LockedWidth = true;
                        float[] widtlogo = new float[] { 0.4f, 2f };
                        tablelogo.SetWidths(widtlogo);
                        if (chkletterhead.Checked == true)
                        {
                            PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                            CCompName.HorizontalAlignment = 1;
                            CCompName.Border = 0;
                            CCompName.Colspan = 2;
                            // CCompName.PaddingTop =50;
                            tablelogo.AddCell(CCompName);

                            PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            CCompAddress.HorizontalAlignment = 1;
                            CCompAddress.Border = 0;
                            CCompAddress.Colspan = 2;
                            // space between lines
                            CCompAddress.SetLeading(0f, 1.3f);
                            tablelogo.AddCell(CCompAddress);

                            PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellline.Border = 0;
                            cellline.Colspan = 2;
                            tablelogo.AddCell(cellline);
                            //For Space

                            PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celll.Border = 0;
                            celll.Colspan = 2;
                            celll.PaddingTop = 25f;
                            tablelogo.AddCell(celll);
                            tablelogo.AddCell(celll);
                            document.Add(tablelogo);
                        }
                        else
                        {
                            if (File.Exists(imagepath))
                            {
                                iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);
                                gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                                gif2.ScalePercent(55f);
                                gif2.SetAbsolutePosition(5f, 753f);
                               // document.Add(gif2);
                            }


                            //tablelogo.AddCell(celll);

                            var FontColour = new BaseColor(178, 34, 34);
                            Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                            //if (CmpIDPrefix == "STD")
                            {
                                PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 15, Font.BOLD, BaseColor.BLACK)));
                                CCompName1.HorizontalAlignment = 1;
                                CCompName1.Colspan = 2;
                                CCompName1.PaddingTop = 25f;
                                CCompName1.Border = 0;
                                CCompName1.PaddingLeft = 80;
                                tablelogo.AddCell(CCompName1);

                                PdfPCell CCompName = new PdfPCell(new Paragraph("" + companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName.HorizontalAlignment = 1;
                                CCompName.Colspan = 2;
                                CCompName.Border = 0;
                                //CCompName.PaddingTop = 5f;
                                CCompName.PaddingLeft = 60;
                                CCompName.SetLeading(0, 1.2f);
                                tablelogo.AddCell(CCompName);
                            }


                            if (emailid.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 1;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                //CCompName2.PaddingTop = 4f;
                                CCompName2.PaddingLeft = 40;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (phoneno.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 1;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                CCompName2.PaddingBottom = 5;
                                //CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (GSTIN.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.Border = 0;
                                // clietnpin.PaddingTop = 4f;
                                //clietnpin.BorderWidthBottom = 0;
                                //clietnpin.BorderWidthTop = 0;
                                //clietnpin.BorderWidthLeft = .2f;
                                //clietnpin.BorderWidthRight = 0;
                                //clietnpin.BorderColor = BaseColor.BLACK;
                                // clietnpin.PaddingLeft = 120;
                                //tablelogo.AddCell(clietnpin);                      

                            }

                            var CelGSTaddr = new Paragraph();
                            CelGSTaddr.Add(new Chunk(CopyName, FontFactory.GetFont(FontStyle, 11 - 1, Font.BOLD, BaseColor.BLACK)));
                            CelGSTaddr.SetLeading(0, 1f);
                            PdfPCell CellGstaddress = new PdfPCell();
                            CellGstaddress.AddElement(CelGSTaddr);
                            CellGstaddress.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellGstaddress.Colspan = 2;
                            CellGstaddress.BorderWidthTop = 0;
                            CellGstaddress.BorderWidthBottom = 0;
                            CellGstaddress.BorderWidthLeft = 0;
                            CellGstaddress.BorderWidthRight = 0;
                            CellGstaddress.PaddingLeft = 430;
                            tablelogo.AddCell(CellGstaddress);

                           // document.Add(tablelogo);
                        }

                        #region PDF Code


                        PdfPTable MainTable1 = new PdfPTable(8);
                        MainTable1.TotalWidth = 500f;
                        MainTable1.LockedWidth = true;
                        float[] CellWidthh = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };
                        MainTable1.SetWidths(CellWidthh);

                        PdfPCell Cell;

                        if (chkletterhead.Checked == true)
                        {
                            
                        }
                        else
                        {
                            Cell = new PdfPCell(new Paragraph("\n\n\n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell.Colspan = 8;
                            Cell.Border = 0;
                            Cell.BorderColor = BaseColor.BLACK;
                            MainTable1.AddCell(Cell);


                            Cell = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell.Colspan = 8;
                            Cell.PaddingTop = 2;
                            Cell.FixedHeight = 20;
                            Cell.BorderWidthTop = .2f;
                            Cell.BorderWidthBottom = .2f;
                            Cell.BorderWidthLeft = .2f;
                            Cell.BorderWidthRight = .2f;
                            Cell.BorderColor = BaseColor.BLACK;
                            MainTable1.AddCell(Cell);
                        }

                        if (OurGSTIN.Trim().Length>0)
                        {

                        Cell = new PdfPCell(new Paragraph(" GSTIN", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell.Colspan = 1;
                        Cell.BorderWidthTop = .2f;
                        Cell.BorderWidthBottom = 0;
                        Cell.BorderWidthLeft = .2f;
                        Cell.BorderWidthRight = 0;
                        Cell.BorderColor = BaseColor.BLACK;
                        MainTable1.AddCell(Cell);

                        Cell = new PdfPCell(new Paragraph(": " + OurGSTIN, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell.Colspan = 7;
                        Cell.BorderWidthTop = .2f;
                        Cell.BorderWidthBottom = 0;
                        Cell.BorderWidthLeft = 0;
                        Cell.BorderWidthRight = .2f;
                        Cell.BorderColor = BaseColor.BLACK;
                        MainTable1.AddCell(Cell);

                        }

                        if (companyName.Trim().Length>0)
                        {

                        Cell = new PdfPCell(new Paragraph(" Name", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell.Colspan = 1;
                        Cell.BorderWidthTop = 0;
                        Cell.BorderWidthBottom = 0;
                        Cell.BorderWidthLeft = .2f;
                        Cell.BorderWidthRight = 0;
                        Cell.BorderColor = BaseColor.BLACK;
                        MainTable1.AddCell(Cell);

                        Cell = new PdfPCell(new Paragraph(": " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell.Colspan = 7;
                        Cell.BorderWidthTop = 0;
                        Cell.BorderWidthBottom = 0;
                        Cell.BorderWidthLeft = 0;
                        Cell.BorderWidthRight = .2f;
                        Cell.BorderColor = BaseColor.BLACK;
                        MainTable1.AddCell(Cell);

                        }


                        Cell = new PdfPCell(new Paragraph(" Address", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell.Colspan = 1;
                        Cell.BorderWidthTop = 0;
                        Cell.BorderWidthBottom = 0;
                        Cell.BorderWidthLeft = .2f;
                        Cell.BorderWidthRight = 0;
                        Cell.BorderColor = BaseColor.BLACK;
                        MainTable1.AddCell(Cell);

                        Cell = new PdfPCell(new Paragraph(": 1-11/A, Near Telephone Exchange,\n  Pragathi Enclave, Miyapur,\n  Hyderabad, Telangana - 5000 49", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell.Colspan = 7;
                        Cell.PaddingBottom = 5;
                        Cell.BorderWidthTop = 0;
                        Cell.BorderWidthBottom = .2f;
                        Cell.BorderWidthLeft = 0;
                        Cell.BorderWidthRight = .2f;
                        Cell.BorderColor = BaseColor.BLACK;
                        MainTable1.AddCell(Cell);

                        //Cell = new PdfPCell(new Paragraph(": " + companyAddress, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        //Cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //Cell.Colspan = 7;
                        //Cell.PaddingBottom = 2;
                        //Cell.BorderWidthTop = 0;
                        //Cell.BorderWidthBottom = .2f;
                        //Cell.BorderWidthLeft = 0;
                        //Cell.BorderWidthRight = .2f;
                        //Cell.BorderColor = BaseColor.BLACK;
                        //MainTable1.AddCell(Cell);

                        #region SubTable1


                        PdfPTable SubTable1 = new PdfPTable(4);
                        SubTable1.TotalWidth = 250f;
                        SubTable1.LockedWidth = true;
                        float[] CellWidth1 = new float[] { 2f, 2f, 2f, 2f };
                        SubTable1.SetWidths(CellWidth1);

                        PdfPCell Cell1;

                        if (BillNo.Trim().Length>0)
                        {

                        Cell1 = new PdfPCell(new Paragraph(" INVOICE NUMBER", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.PaddingTop = 2;
                        Cell1.BorderWidthTop = .2f;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = .2f;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" : " + BillNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.PaddingTop = 2;
                        Cell1.BorderWidthTop = .2f;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = 0;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        }

                        Cell1 = new PdfPCell(new Paragraph(" NATURE OF INVOICE", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = .2f;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" : Original for Recipient", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = 0;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" DATE OF INVOICE ", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = .2f;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" : " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                            BillDate.Year, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = 0;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        if (POContent.Trim().Length>0)
                        {

                        Cell1 = new PdfPCell(new Paragraph(" PO NO", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = .2f;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" : " + POContent, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = 0;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        }

                        if (PODate.Trim().Length>0)
                        {

                        Cell1 = new PdfPCell(new Paragraph(" PO DATE", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = .2f;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" : " + PODate, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = 0;
                        Cell1.BorderWidthLeft = 0;
                        Cell1.BorderWidthRight = 0;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        }

                        Cell1 = new PdfPCell(new Paragraph(" SO NO", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.PaddingBottom = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = .2f;
                        Cell1.BorderWidthLeft = .2f;
                        Cell1.BorderWidthRight = 0;
                        Cell1.PaddingBottom = 4;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);

                        Cell1 = new PdfPCell(new Paragraph(" : ", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell1.Colspan = 2;
                        Cell1.PaddingBottom = 2;
                        Cell1.BorderWidthTop = 0;
                        Cell1.BorderWidthBottom = .2f;
                        Cell1.BorderWidthLeft = 0;
                        Cell1.BorderWidthRight = 0;
                        Cell1.PaddingBottom = 4;
                        Cell1.BorderColor = BaseColor.BLACK;
                        SubTable1.AddCell(Cell1);


                        PdfPCell SubTableCell1 = new PdfPCell(SubTable1);
                        SubTableCell1.Border = 0;
                        SubTableCell1.Colspan = 4;
                        SubTable1.HorizontalAlignment = 0;
                        MainTable1.AddCell(SubTableCell1);

                        #endregion

                        #region SubTable2

                        PdfPTable SubTable2 = new PdfPTable(4);
                        SubTable2.TotalWidth = 250f;
                        SubTable2.LockedWidth = true;
                        float[] CellWidth2 = new float[] { 2f, 2f, 2f, 2f };
                        SubTable2.SetWidths(CellWidth2);

                        PdfPCell Cell2;

                        Cell2 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell2.Colspan = 4;
                        Cell2.BorderWidthTop = .2f;
                        Cell2.BorderWidthBottom = .2f;
                        Cell2.BorderWidthLeft = .2f;
                        Cell2.BorderWidthRight = .2f;
                        Cell2.BorderColor = BaseColor.BLACK;
                        SubTable2.AddCell(Cell2);

                        PdfPCell SubTableCell2 = new PdfPCell(SubTable2);
                        SubTableCell2.Border = 0;
                        SubTableCell2.Colspan = 4;
                        SubTable2.HorizontalAlignment = 0;
                        MainTable1.AddCell(SubTableCell2);

                        #endregion

                        #region SubTable3


                        PdfPTable SubTable3 = new PdfPTable(4);
                        SubTable3.TotalWidth = 250f;
                        SubTable3.LockedWidth = true;
                        float[] CellWidth3 = new float[] { 2f, 2f, 2f, 2f };
                        SubTable3.SetWidths(CellWidth3);

                        PdfPCell Cell3;

                        string addressData1 = "";
                        string addressData2 = "";
                        string addressData3 = "";
                        string addressData4 = "";
                        string addressData5 = "";
                        string addressData6 = "";
                        string addressData7 = "";

                        addressData1 = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();

                        Cell3 = new PdfPCell(new Paragraph(" DETAILS OF RECEIVER (Billed to)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 4;
                        Cell3.PaddingTop = 2;
                        Cell3.BorderWidthTop = .2f;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = .2f;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        Cell3 = new PdfPCell(new Paragraph(" Name", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 1;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = .2f;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        if (addressData1.Trim().Length > 0)
                        {

                            Cell3 = new PdfPCell(new Paragraph(" : "+ addressData1, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 3;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = 0;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        }
                        
                            Cell3 = new PdfPCell(new Paragraph(" Address", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 1;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = .2f;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        addressData2 = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                        addressData3 = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        addressData4 = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        addressData5 = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        addressData6 = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                        addressData7 = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();

                        if (addressData2.Trim().Length > 0 || addressData3.Trim().Length > 0 || addressData4.Trim().Length > 0 || addressData5.Trim().Length > 0 || addressData6.Trim().Length > 0 || addressData6.Trim().Length > 0 || addressData7.Trim().Length > 0)
                        {

                            Cell3 = new PdfPCell(new Paragraph(" : " +addressData2 +"  " + "\n   " + addressData3 + "  "  +addressData4 + "  " + "\n   " + addressData5 + "  " +  addressData6 + "  " + addressData7 ,FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell3.Colspan = 3;
                            Cell3.BorderWidthTop = 0;
                            Cell3.BorderWidthBottom = 0;
                            Cell3.BorderWidthLeft = 0;
                            Cell3.BorderWidthRight = .2f;
                            Cell3.BorderColor = BaseColor.BLACK;
                            SubTable3.AddCell(Cell3);

                        }

                        #region Commented Address Code

                        //addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        //if (addressData.Trim().Length > 0)
                        //{
                        //    Cell3 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 1;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = .2f;
                        //    Cell3.BorderWidthRight = 0;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //    Cell3 = new PdfPCell(new Paragraph("   " + addressData, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //Cell3.Colspan = 3;
                        //Cell3.BorderWidthTop = 0;
                        //Cell3.BorderWidthBottom = 0;
                        //Cell3.BorderWidthLeft = 0;
                        //Cell3.BorderWidthRight = .2f;
                        //Cell3.BorderColor = BaseColor.BLACK;
                        //SubTable3.AddCell(Cell3);

                        //}

                        //addressData4 = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        //if (addressData4.Trim().Length > 0)
                        //{
                        //    Cell3 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 1;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = .2f;
                        //    Cell3.BorderWidthRight = 0;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //    Cell3 = new PdfPCell(new Paragraph("   " + addressData4, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 3;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = 0;
                        //    Cell3.BorderWidthRight = .2f;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //}

                        //addressData5 = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        //if (addressData5.Trim().Length > 0)
                        //{

                        //    Cell3 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 1;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = .2f;
                        //    Cell3.BorderWidthRight = 0;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //    Cell3 = new PdfPCell(new Paragraph("   " + addressData5, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 3;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = 0;
                        //    Cell3.BorderWidthRight = .2f;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //}

                        //addressData6 = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();

                        //if (addressData6.Trim().Length > 0)
                        //{
                        //    Cell3 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 1;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = .2f;
                        //    Cell3.BorderWidthRight = 0;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //    Cell3 = new PdfPCell(new Paragraph("   " + addressData6, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 3;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = 0;
                        //    Cell3.BorderWidthRight = .2f;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //}

                        //addressData7 = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();

                        //if (addressData7.Trim().Length > 0)
                        //{
                        //    Cell3 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 1;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = .2f;
                        //    Cell3.BorderWidthRight = 0;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //    Cell3 = new PdfPCell(new Paragraph("   " + addressData7, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell3.Colspan = 3;
                        //    Cell3.BorderWidthTop = 0;
                        //    Cell3.BorderWidthBottom = 0;
                        //    Cell3.BorderWidthLeft = 0;
                        //    Cell3.BorderWidthRight = .2f;
                        //    Cell3.BorderColor = BaseColor.BLACK;
                        //    SubTable3.AddCell(Cell3);

                        //}


                        #endregion


                        if (State.Trim().Length>0)
                        {


                        Cell3 = new PdfPCell(new Paragraph(" State", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 1;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = .2f;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        Cell3 = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 3;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = 0;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        }

                        if (StateCode.Trim().Length>0)
                        {

                        Cell3 = new PdfPCell(new Paragraph(" State Code", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 1;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = .2f;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        Cell3 = new PdfPCell(new Paragraph(" : " + StateCode, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 3;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = 0;
                        Cell3.BorderWidthLeft = 0;
                        Cell3.BorderWidthRight = 0;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        }

                        if (GSTIN.Trim().Length>0)
                        {

                        Cell3 = new PdfPCell(new Paragraph(" GSTIN", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 1;
                        Cell3.PaddingBottom = 2;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = .2f;
                        Cell3.BorderWidthLeft = .2f;
                        Cell3.BorderWidthRight = 0;
                        Cell3.PaddingBottom = 4;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        Cell3 = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell3.Colspan = 3;
                        Cell3.PaddingBottom = 2;
                        Cell3.BorderWidthTop = 0;
                        Cell3.BorderWidthBottom = .2f;
                        Cell3.BorderWidthLeft = 0;
                        Cell3.BorderWidthRight = 0;
                        Cell3.PaddingBottom = 4;
                        Cell3.BorderColor = BaseColor.BLACK;
                        SubTable3.AddCell(Cell3);

                        }

                        PdfPCell SubTableCell3 = new PdfPCell(SubTable3);
                        SubTableCell3.Border = 0;
                        SubTableCell3.Colspan = 4;
                        SubTableCell3.HorizontalAlignment = 0;
                        MainTable1.AddCell(SubTableCell3);

                        #endregion

                        #region SubTable4

                        PdfPTable SubTable4 = new PdfPTable(4);
                        SubTable4.TotalWidth = 250f;
                        SubTable4.LockedWidth = true;
                        float[] CellWidth4 = new float[] { 2f, 2f, 2f, 2f };
                        SubTable4.SetWidths(CellWidth4);

                        PdfPCell Cell4;

                        string addressData21 = "";
                        string addressData22 = "";
                        string addressData23 = "";
                        string addressData24 = "";
                        string addressData25 = "";
                        string addressData26 = "";

                        addressData21 = dtclientaddress.Rows[0]["ShiptoLine1"].ToString();
                        addressData22 = dtclientaddress.Rows[0]["ShiptoLine2"].ToString();
                        addressData23 = dtclientaddress.Rows[0]["ShiptoLine3"].ToString();
                        addressData24 = dtclientaddress.Rows[0]["ShiptoLine4"].ToString();
                        addressData25 = dtclientaddress.Rows[0]["ShiptoLine5"].ToString();
                        addressData26 = dtclientaddress.Rows[0]["ShiptoLine6"].ToString();



                        Cell4 = new PdfPCell(new Paragraph(" DETAILS OF CONSIGNEE (Shipped to)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 4;
                        Cell4.PaddingTop = 2;
                        Cell4.BorderWidthTop = .2f;
                        Cell4.BorderWidthBottom = 0;
                        Cell4.BorderWidthLeft = .2f;
                        Cell4.BorderWidthRight = .2f;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        Cell4 = new PdfPCell(new Paragraph(" Name", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 1;
                        Cell4.BorderWidthTop = 0;
                        Cell4.BorderWidthBottom = 0;
                        Cell4.BorderWidthLeft = .2f;
                        Cell4.BorderWidthRight = 0;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        if (addressData21.Trim().Length > 0)
                        {

                            Cell4 = new PdfPCell(new Paragraph(" : " + addressData21, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell4.Colspan = 3;
                            Cell4.BorderWidthTop = 0;
                            Cell4.BorderWidthBottom = 0;
                            Cell4.BorderWidthLeft = 0;
                            Cell4.BorderWidthRight = .2f;
                            Cell4.BorderColor = BaseColor.BLACK;
                            SubTable4.AddCell(Cell4);
                        }

                        Cell4 = new PdfPCell(new Paragraph(" Address", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 1;
                        Cell4.BorderWidthTop = 0;
                        Cell4.BorderWidthBottom = 0;
                        Cell4.BorderWidthLeft = .2f;
                        Cell4.BorderWidthRight = 0;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        if (addressData22.Trim().Length > 0 || addressData23.Trim().Length > 0 || addressData24.Trim().Length > 0 || addressData25.Trim().Length > 0 || addressData26.Trim().Length > 0 )
                        {

                            Cell4 = new PdfPCell(new Paragraph(" : " + addressData22 + "  " + "\n   " + addressData23 + "  " + addressData24 + "  " + "\n   " + addressData25 + "  " + addressData26 , FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell4.Colspan = 3;
                            Cell4.BorderWidthTop = 0;
                            Cell4.BorderWidthBottom = 0;
                            Cell4.BorderWidthLeft = 0;
                            Cell4.BorderWidthRight = .2f;
                            Cell4.BorderColor = BaseColor.BLACK;
                            SubTable4.AddCell(Cell4);
                        }

                        #region Commented Code of Ship to Address

                        //addressData23 = dtclientaddress.Rows[0]["ShiptoLine3"].ToString();

                        //if (addressData23.Trim().Length > 0)
                        //{
                        //    Cell4 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 1;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = .2f;
                        //    Cell4.BorderWidthRight = 0;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);

                        //    Cell4 = new PdfPCell(new Paragraph("   " + addressData23, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 3;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = 0;
                        //    Cell4.BorderWidthRight = .2f;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);
                        //}

                        //addressData24 = dtclientaddress.Rows[0]["ShiptoLine4"].ToString();

                        //if (addressData24.Trim().Length > 0)
                        //{
                        //    Cell4 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 1;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = .2f;
                        //    Cell4.BorderWidthRight = 0;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);

                        //    Cell4 = new PdfPCell(new Paragraph("   " + addressData24, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 3;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = 0;
                        //    Cell4.BorderWidthRight = .2f;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);
                        //}

                        //addressData25 = dtclientaddress.Rows[0]["ShiptoLine5"].ToString();

                        //if (addressData25.Trim().Length > 0)
                        //{
                        //    Cell4 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 1;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = .2f;
                        //    Cell4.BorderWidthRight = 0;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);

                        //    Cell4 = new PdfPCell(new Paragraph("   " + addressData25, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 3;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = 0;
                        //    Cell4.BorderWidthRight = .2f;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);
                        //}

                        //addressData26 = dtclientaddress.Rows[0]["ShiptoLine6"].ToString();

                        //if (addressData26.Trim().Length > 0)
                        //{
                        //    Cell4 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 1;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = .2f;
                        //    Cell4.BorderWidthRight = 0;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);

                        //    Cell4 = new PdfPCell(new Paragraph("   " + addressData26, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        //    Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    Cell4.Colspan = 3;
                        //    Cell4.BorderWidthTop = 0;
                        //    Cell4.BorderWidthBottom = 0;
                        //    Cell4.BorderWidthLeft = 0;
                        //    Cell4.BorderWidthRight = .2f;
                        //    Cell4.BorderColor = BaseColor.BLACK;
                        //    SubTable4.AddCell(Cell4);
                        //}

                        #endregion


                        if (ShipToState.Trim().Length>0)
                        {

                        Cell4 = new PdfPCell(new Paragraph(" State", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 1;
                        Cell4.BorderWidthTop = 0;
                        Cell4.BorderWidthBottom = 0;
                        Cell4.BorderWidthLeft = .2f;
                        Cell4.BorderWidthRight = 0;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        Cell4 = new PdfPCell(new Paragraph(" : " + ShipToState, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 3;
                        Cell4.BorderWidthTop = 0;
                        Cell4.BorderWidthBottom = 0;
                        Cell4.BorderWidthLeft = 0;
                        Cell4.BorderWidthRight = .2f;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        }

                        if (ShipToStateCode.Trim().Length > 0)
                        {

                            Cell4 = new PdfPCell(new Paragraph(" State Code", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell4.Colspan = 1;
                            Cell4.BorderWidthTop = 0;
                            Cell4.BorderWidthBottom = 0;
                            Cell4.BorderWidthLeft = .2f;
                            Cell4.BorderWidthRight = 0;
                            Cell4.BorderColor = BaseColor.BLACK;
                            SubTable4.AddCell(Cell4);

                            Cell4 = new PdfPCell(new Paragraph(" : " + ShipToStateCode, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            Cell4.Colspan = 3;
                            Cell4.BorderWidthTop = 0;
                            Cell4.BorderWidthBottom = 0;
                            Cell4.BorderWidthLeft = 0;
                            Cell4.BorderWidthRight = .2f;
                            Cell4.BorderColor = BaseColor.BLACK;
                            SubTable4.AddCell(Cell4);
                        }

                        if (ShipToGSTIN.Trim().Length>0)
                        {

                        Cell4 = new PdfPCell(new Paragraph(" GSTIN", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 1;
                        Cell4.PaddingBottom = 2;
                        Cell4.BorderWidthTop = 0;
                        Cell4.BorderWidthBottom = .2f;
                        Cell4.BorderWidthLeft = .2f;
                        Cell4.BorderWidthRight = 0;
                        Cell4.PaddingBottom=4;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        Cell4 = new PdfPCell(new Paragraph(" : " + ShipToGSTIN, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell4.Colspan = 3;
                        Cell4.PaddingBottom = 2;
                        Cell4.BorderWidthTop = 0;
                        Cell4.BorderWidthBottom = .2f;
                        Cell4.BorderWidthLeft = 0;
                        Cell4.BorderWidthRight = .2f;
                        Cell4.PaddingBottom=4;
                        Cell4.BorderColor = BaseColor.BLACK;
                        SubTable4.AddCell(Cell4);

                        }

                        PdfPCell SubTableCell4 = new PdfPCell(SubTable4);
                        SubTableCell4.Border = 0;
                        SubTableCell4.Colspan = 4;
                        SubTable4.HorizontalAlignment = 0;
                        MainTable1.AddCell(SubTableCell4);

                        #endregion

                        #region SubTable5


                        PdfPTable SubTable5 = new PdfPTable(4);
                        SubTable5.TotalWidth = 250f;
                        SubTable5.LockedWidth = true;
                        float[] CellWidth5 = new float[] { 2f, 2f, 2f, 2f };
                        SubTable5.SetWidths(CellWidth5);

                        PdfPCell Cell5;

                        if (State.Trim().Length>0)
                        {

                        Cell5 = new PdfPCell(new Paragraph(" Place of supply (Name of state)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell5.Colspan = 2;
                        Cell5.PaddingTop = 2;
                        Cell5.BorderWidthTop = .2f;
                        Cell5.BorderWidthBottom = 0;
                        Cell5.BorderWidthLeft = .2f;
                        Cell5.BorderWidthRight = 0;
                        Cell5.BorderColor = BaseColor.BLACK;
                        SubTable5.AddCell(Cell5);

                        Cell5 = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell5.Colspan = 2;
                        Cell5.PaddingTop = 2;
                        Cell5.BorderWidthTop = 0;
                        Cell5.BorderWidthBottom = 0;
                        Cell5.BorderWidthLeft = 0;
                        Cell5.BorderWidthRight = 0;
                        Cell5.BorderColor = BaseColor.BLACK;
                        SubTable5.AddCell(Cell5);

                        }

                        if (State.Trim().Length>0)
                        {


                        Cell5 = new PdfPCell(new Paragraph(" Place of Delivery (Name of state)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell5.Colspan = 2;
                        Cell5.BorderWidthTop = 0;
                        Cell5.BorderWidthBottom = 0;
                        Cell5.BorderWidthLeft = .2f;
                        Cell5.BorderWidthRight = 0;
                        Cell5.BorderColor = BaseColor.BLACK;
                        SubTable5.AddCell(Cell5);

                        Cell5 = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell5.Colspan = 2;
                        Cell5.BorderWidthTop = 0;
                        Cell5.BorderWidthBottom = 0;
                        Cell5.BorderWidthLeft = 0;
                        Cell5.BorderWidthRight = 0;
                        Cell5.BorderColor = BaseColor.BLACK;
                        SubTable5.AddCell(Cell5);

                        }


                        Cell5 = new PdfPCell(new Paragraph(" Service Period", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell5.Colspan = 2;
                        Cell5.PaddingBottom = 4;
                        Cell5.BorderWidthTop = 0;
                        Cell5.BorderWidthBottom = 0;
                        Cell5.BorderWidthLeft = .2f;
                        Cell5.BorderWidthRight = 0;
                        Cell5.BorderColor = BaseColor.BLACK;
                        SubTable5.AddCell(Cell5);

                        string Fromdate = txtfromdate.Text;
                        string Todate = txttodate.Text;

                        Cell5 = new PdfPCell(new Paragraph(" : " + Fromdate + " to " + Todate, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell5.Colspan = 2;
                        Cell5.PaddingBottom = 4;
                        Cell5.BorderWidthTop = 0;
                        Cell5.BorderWidthBottom = 0;
                        Cell5.BorderWidthLeft = 0;
                        Cell5.BorderWidthRight = 0;
                        Cell5.BorderColor = BaseColor.BLACK;
                        SubTable5.AddCell(Cell5);


                        PdfPCell SubTableCell5 = new PdfPCell(SubTable5);
                        SubTableCell5.Border = 0;
                        SubTableCell5.Colspan = 4;
                        SubTable5.HorizontalAlignment = 0;
                        MainTable1.AddCell(SubTableCell5);

                        #endregion

                        #region SubTable6


                        PdfPTable SubTable6 = new PdfPTable(4);
                        SubTable6.TotalWidth = 250f;
                        SubTable6.LockedWidth = true;
                        float[] CellWidth6 = new float[] { 2f, 2f, 2f, 2f };
                        SubTable6.SetWidths(CellWidth6);

                        PdfPCell Cell6;

                        Cell6 = new PdfPCell(new Paragraph(" Customer Details", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell6.Colspan = 4;
                        Cell6.PaddingTop = 2;
                        Cell6.BorderWidthTop = .2f;
                        Cell6.BorderWidthBottom = 0;
                        Cell6.BorderWidthLeft = .2f;
                        Cell6.BorderWidthRight = .2f;
                        Cell6.BorderColor = BaseColor.BLACK;
                        SubTable6.AddCell(Cell6);

                        //Cell6 = new PdfPCell(new Paragraph(" : ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //Cell6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //Cell6.Colspan = 2;
                        //Cell6.PaddingTop = 2;
                        //Cell6.BorderWidthTop = .2f;
                        //Cell6.BorderWidthBottom = 0;
                        //Cell6.BorderWidthLeft = 0;
                        //Cell6.BorderWidthRight = 0;
                        //Cell6.BorderColor = BaseColor.BLACK;
                        //SubTable6.AddCell(Cell6);

                        if (PANNO.Trim().Length>0)
                        {

                        Cell6 = new PdfPCell(new Paragraph(" PAN NO", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell6.Colspan = 1;
                        Cell6.BorderWidthTop = 0;
                        Cell6.BorderWidthBottom = 0;
                        Cell6.BorderWidthLeft = .2f;
                        Cell6.BorderWidthRight = 0;
                        Cell6.BorderColor = BaseColor.BLACK;
                        SubTable6.AddCell(Cell6);

                        Cell6 = new PdfPCell(new Paragraph(" : " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell6.Colspan = 3;
                        Cell6.BorderWidthTop = 0;
                        Cell6.BorderWidthBottom = 0;
                        Cell6.BorderWidthLeft = 0;
                        Cell6.BorderWidthRight = .2f;
                        Cell6.BorderColor = BaseColor.BLACK;
                        SubTable6.AddCell(Cell6);

                        }

                        
                        Cell6 = new PdfPCell(new Paragraph(" TAN NO", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Cell6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell6.Colspan = 1;
                        Cell6.BorderWidthTop = 0;
                        Cell6.BorderWidthBottom = 0;
                        Cell6.BorderWidthLeft = .2f;
                        Cell6.BorderWidthRight = 0;
                        Cell6.PaddingBottom = 4;
                        Cell6.BorderColor = BaseColor.BLACK;
                        SubTable6.AddCell(Cell6);

                        Cell6 = new PdfPCell(new Paragraph(" : ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        Cell6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cell6.Colspan = 3;
                        Cell6.BorderWidthTop = 0;
                        Cell6.BorderWidthBottom = 0;
                        Cell6.BorderWidthLeft = 0;
                        Cell6.BorderWidthRight = .2f;
                        Cell6.PaddingBottom = 4;
                        Cell6.BorderColor = BaseColor.BLACK;
                        SubTable6.AddCell(Cell6);


                        PdfPCell SubTableCell6 = new PdfPCell(SubTable6);
                        SubTableCell6.Border = 0;
                        SubTableCell6.Colspan = 4;
                        SubTable6.HorizontalAlignment = 0;
                        MainTable1.AddCell(SubTableCell6);

                        #endregion



                        document.Add(MainTable1);

                        #endregion

                        #endregion

                        #region Grid Columns

                        PdfPTable MainTable2 = new PdfPTable(14);
                        MainTable2.TotalWidth = 500f;
                        MainTable2.LockedWidth = true;
                        float[] CellMidthM2 = new float[] { 1f, 4f, 2f, 1.5f,2f, 1.5f, 2.8f, 2f, 2.8f, 1.6f, 2.5f, 1.6f, 2.5f, 3f };
                        MainTable2.SetWidths(CellMidthM2);

                        PdfPCell CellM;

                        //01
                        CellM = new PdfPCell(new Paragraph("SR NO", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //02
                        CellM = new PdfPCell(new Paragraph("Service Description", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //03
                        CellM = new PdfPCell(new Paragraph("HSN /SAC", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //04
                        CellM = new PdfPCell(new Paragraph("QTY", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph("Duties", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //05
                        CellM = new PdfPCell(new Paragraph("OT HRS", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //06
                        CellM = new PdfPCell(new Paragraph("Rate (INR)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //07
                        CellM = new PdfPCell(new Paragraph("PER DAY COST", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //08
                        CellM = new PdfPCell(new Paragraph("TOTAL VALUE", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //09
                        CellM = new PdfPCell(new Paragraph("SGST", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 2;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //10
                        CellM = new PdfPCell(new Paragraph("CGST", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 2;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //11
                        CellM = new PdfPCell(new Paragraph("TOTAL", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        ///////////////////////////////////////

                        //01
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //02
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //03
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //04
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //05
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //06
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //07
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //08
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //09
                        CellM = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //10
                        CellM = new PdfPCell(new Paragraph("Rate%", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //11
                        CellM = new PdfPCell(new Paragraph("AMT (INR)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //12
                        CellM = new PdfPCell(new Paragraph("Rate%", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //13
                        CellM = new PdfPCell(new Paragraph("AMT (INR)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);
                        //14
                        CellM = new PdfPCell(new Paragraph("AMT (INR)", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);


                        ////export rows from GridView to table

                        int countGrid = gvClientBilling.Rows.Count;
                        string cellText;
                        float noofshifts = 0;
                        int GridLine = 1;
                        decimal SGSTRate = 0;
                        decimal CGSTRate = 0;

                        decimal TotalValue = 0;
                        decimal TotalSGST = 0;
                        decimal TotalCGST =0;
                        decimal GrandTotal = 0;

                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 14; j++)
                                        {
                                            //fetch the column value of the current row
                                       
                                            //S.No
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthTop = 0;
                                                if (gvClientBilling.Rows.Count >= 14)
                                                {
                                                    cell.MinimumHeight = 18;
                                                }
                                                else
                                                {
                                                    cell.MinimumHeight = 20;
                                                }
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                MainTable2.AddCell(cell);
                                            }

                                            //Designation
                                            if (j == 1)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                Label lbltype = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbltype"));

                                                string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                    "  where c.clientid='" + ddlclientid.SelectedValue + "' and c.Type='" + lbltype.Text + "' and d.designid='" + labldesig.Text + "'";


                                                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(summaryQry).Result;
                                                cellText = label1.Text;
                                                if (dt.Rows.Count > 0)
                                                {
                                                    if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                        cellText += "\n " + dt.Rows[0]["summary"].ToString() + " ";
                                                }

                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.HorizontalAlignment = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                MainTable2.AddCell(cell);
                                            }


                                            //HSN/SAC
                                            if (j == 2)
                                            {

                                                string HSNN = "";
                                                TextBox LblHSNNo = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));

                                                HSNN = LblHSNNo.Text;

                                                cell = new PdfPCell(new Phrase(HSNN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                MainTable2.AddCell(cell);
                                            }

                                            //Quantity
                                            if (j == 3)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                                if (label1.Text == "0")
                                                {
                                                    cellText = "";
                                                }
                                                else
                                                {
                                                    cellText = label1.Text;
                                                }
                                                //create a new cell with column value


                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                MainTable2.AddCell(cell);
                                            }

                                            //No Of Duties
                                            if (j == 4)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                                if (label1.Text == "0")
                                                {
                                                    cellText = "";
                                                }
                                                else
                                                {
                                                    cellText = label1.Text;
                                                }
                                                //create a new cell with column value


                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                MainTable2.AddCell(cell);
                                            }

                                            //OtHrs
                                            if (j == 5)
                                            {

                                                //TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));
                                                //if (label1.Text == "0")
                                                //{
                                                    cellText = " ";
                                                //}
                                                //else
                                                //{
                                                //    cellText = label1.Text;
                                                //}
                                                //create a new cell with column value


                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                MainTable2.AddCell(cell);
                                            }

                                            //Rate
                                            if (j == 6)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                TextBox label2 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                                   "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.designid='" + labldesig.Text + "'";

                                                //Duty Hrs removed for KL on 27/05/2015
                                                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(dutyhrsQry).Result;
                                                cellText = label1.Text;

                                                //create a new cell with column value
                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }

                                            }

                                            //Per Day Cost
                                            if (j == 7)
                                            {

                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                TextBox txtpayrate = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                string qry = "select noofdays  from unitbillbreakup where "+
                                                    " UnitId='"+ddlclientid.SelectedValue+"' and month='"+month+"'  "+
                                                    " and Designation='"+ labldesig.Text + "'";
                                                DataTable dtqry = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;

                                                decimal days = 1;
                                                decimal perday = 0;
                                                if(dtqry.Rows.Count>0)
                                                {
                                                    days = decimal.Parse(dtqry.Rows[0]["noofdays"].ToString());

                                                    if(txtpayrate.Text=="")
                                                    {
                                                        txtpayrate.Text = "0";
                                                    }

                                                    perday =Math.Round( decimal.Parse(txtpayrate.Text) / days,2);
                                                }

                                               


                                                cell = new PdfPCell(new Phrase(perday.ToString(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                MainTable2.AddCell(cell);
                                            }

                                            //TOTAL VALUE
                                            if (j == 8)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                cellText = label1.Text;
                                                //create a new cell with column value

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                TotalValue += decimal.Parse(cellText);

                                            }

                                            //SGST Rate
                                            if (j == 9)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblSGSTPrc"));
                                                cellText = label1.Text;
                                                //create a new cell with column value

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }

                                                SGSTRate = decimal.Parse(cellText);

                                            }

                                            //SGST Amount
                                            if (j == 10)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblSGSTAmount"));
                                                cellText = label1.Text;
                                                //create a new cell with column value

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }

                                                TotalSGST += decimal.Parse(cellText);
                                            }

                                            //CGST Rate
                                            if (j == 11)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblCGSTPrc"));
                                                cellText = label1.Text;
                                                //create a new cell with column value

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }

                                                CGSTRate = decimal.Parse(cellText);
                                            }

                                            //CGST Amount
                                            if (j == 12)
                                            {
                                                
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblCGSTAmount"));
                                                cellText = label1.Text;
                                                //create a new cell with column value

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }

                                                TotalCGST += decimal.Parse(cellText);

                                            }

                                            //Tatal Amount
                                            if (j == 13)
                                            {
                                                TextBox lblAmount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                TextBox lblSGSTAmount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblSGSTAmount"));
                                                TextBox lblCGSTAmount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblCGSTAmount"));

                                               if(lblSGSTAmount.Text=="")
                                                {
                                                    lblSGSTAmount.Text = "0";
                                                }
                                                if (lblCGSTAmount.Text == "")
                                                {
                                                    lblCGSTAmount.Text = "0";
                                                }
                                                if (lblAmount.Text == "")
                                                {
                                                    lblAmount.Text = "0";
                                                }

                                                cellText =( decimal.Parse( lblAmount.Text)+ decimal.Parse(lblSGSTAmount.Text)+ decimal.Parse(lblCGSTAmount.Text)).ToString();
                                               

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    MainTable2.AddCell(cell);
                                                }

                                                GrandTotal += decimal.Parse(cellText);
                                                
                                            }



                                        }
                                    }
                                }
                            }
                            GridLine++;
                        }



                        #region for space

                        PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty.HorizontalAlignment = 2;
                        Cellempty.Colspan = 1;
                        Cellempty.BorderWidthTop = 0;
                        Cellempty.BorderWidthRight = 0f;
                        Cellempty.BorderWidthLeft = .2f;
                        Cellempty.BorderWidthBottom = 0;
                        Cellempty.MinimumHeight = 3;
                        Cellempty.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty1.HorizontalAlignment = 2;
                        Cellempty1.Colspan = 1;
                        Cellempty1.BorderWidthTop = 0;
                        Cellempty1.BorderWidthRight = 0f;
                        Cellempty1.BorderWidthLeft = 0.2f;
                        Cellempty1.BorderWidthBottom = 0;
                        Cellempty1.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty2.HorizontalAlignment = 2;
                        Cellempty2.Colspan = 1;
                        Cellempty2.BorderWidthTop = 0;
                        Cellempty2.BorderWidthRight = 0f;
                        Cellempty2.BorderWidthLeft = 0.2f;
                        Cellempty2.BorderWidthBottom = 0;
                        Cellempty2.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty3.HorizontalAlignment = 2;
                        Cellempty3.Colspan = 1;
                        Cellempty3.BorderWidthTop = 0;
                        Cellempty3.BorderWidthRight = 0f;
                        Cellempty3.BorderWidthLeft = 0.2f;
                        Cellempty3.BorderWidthBottom = 0;
                        Cellempty3.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty4.HorizontalAlignment = 2;
                        Cellempty4.Colspan = 1;
                        Cellempty4.BorderWidthTop = 0;
                        Cellempty4.BorderWidthRight = 0f;
                        Cellempty4.BorderWidthLeft = 0.2f;
                        Cellempty4.BorderWidthBottom = 0;
                        Cellempty4.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty5.HorizontalAlignment = 2;
                        Cellempty5.Colspan = 1;
                        Cellempty5.BorderWidthTop = 0;
                        Cellempty5.BorderWidthRight = 0.2f;
                        Cellempty5.BorderWidthLeft = 0.2f;
                        Cellempty5.BorderWidthBottom = 0;
                        Cellempty5.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty6.HorizontalAlignment = 2;
                        Cellempty6.Colspan = 1;
                        Cellempty6.BorderWidthTop = 0;
                        Cellempty6.BorderWidthRight = 0.2f;
                        Cellempty6.BorderWidthLeft = 0.2f;
                        Cellempty6.BorderWidthBottom = 0;
                        Cellempty6.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty7.HorizontalAlignment = 2;
                        Cellempty7.Colspan = 1;
                        Cellempty7.BorderWidthTop = 0;
                        Cellempty7.BorderWidthRight = 0.2f;
                        Cellempty7.BorderWidthLeft = 0.2f;
                        Cellempty7.BorderWidthBottom = 0;
                        Cellempty7.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty8.HorizontalAlignment = 2;
                        Cellempty8.Colspan = 1;
                        Cellempty8.BorderWidthTop = 0;
                        Cellempty8.BorderWidthRight = 0.2f;
                        Cellempty8.BorderWidthLeft = 0.2f;
                        Cellempty8.BorderWidthBottom = 0;
                        Cellempty8.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty9 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty9.HorizontalAlignment = 2;
                        Cellempty9.Colspan = 1;
                        Cellempty9.BorderWidthTop = 0;
                        Cellempty9.BorderWidthRight = 0.2f;
                        Cellempty9.BorderWidthLeft = 0.2f;
                        Cellempty9.BorderWidthBottom = 0;
                        Cellempty9.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty10 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty10.HorizontalAlignment = 2;
                        Cellempty10.Colspan = 1;
                        Cellempty10.BorderWidthTop = 0;
                        Cellempty10.BorderWidthRight = 0.2f;
                        Cellempty10.BorderWidthLeft = 0.2f;
                        Cellempty10.BorderWidthBottom = 0;
                        Cellempty10.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty11.HorizontalAlignment = 2;
                        Cellempty11.Colspan = 1;
                        Cellempty11.BorderWidthTop = 0;
                        Cellempty11.BorderWidthRight = 0.2f;
                        Cellempty11.BorderWidthLeft = 0.2f;
                        Cellempty11.BorderWidthBottom = 0;
                        Cellempty11.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty12 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty12.HorizontalAlignment = 2;
                        Cellempty12.Colspan = 1;
                        Cellempty12.BorderWidthTop = 0;
                        Cellempty12.BorderWidthRight = 0.2f;
                        Cellempty12.BorderWidthLeft = 0.2f;
                        Cellempty12.BorderWidthBottom = 0;
                        Cellempty12.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty13 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty13.HorizontalAlignment = 2;
                        Cellempty13.Colspan = 1;
                        Cellempty13.BorderWidthTop = 0;
                        Cellempty13.BorderWidthRight = 0.2f;
                        Cellempty13.BorderWidthLeft = .2f;
                        Cellempty13.BorderWidthBottom = 0;
                        Cellempty13.MinimumHeight = 3;
                        Cellempty13.BorderColor = BaseColor.BLACK;


                        if (gvClientBilling.Rows.Count == 1)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 2)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);

                                }
                            }



                            #endregion

                        }
                        if (gvClientBilling.Rows.Count == 3)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);

                                }
                            }



                            #endregion

                        }
                        if (gvClientBilling.Rows.Count == 4)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }
                        if (gvClientBilling.Rows.Count == 5)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }
                        if (gvClientBilling.Rows.Count == 6)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 13; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }
                        if (gvClientBilling.Rows.Count == 7)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        if (gvClientBilling.Rows.Count == 8)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        if (gvClientBilling.Rows.Count == 9)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        if (gvClientBilling.Rows.Count == 10)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        if (gvClientBilling.Rows.Count == 11)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        if (gvClientBilling.Rows.Count == 12)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        if (gvClientBilling.Rows.Count == 13)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 13; i++)
                                {
                                    //1
                                    MainTable2.AddCell(Cellempty);

                                    MainTable2.AddCell(Cellempty1);

                                    MainTable2.AddCell(Cellempty2);

                                    MainTable2.AddCell(Cellempty3);

                                    MainTable2.AddCell(Cellempty4);

                                    MainTable2.AddCell(Cellempty5);

                                    MainTable2.AddCell(Cellempty6);

                                    MainTable2.AddCell(Cellempty7);

                                    MainTable2.AddCell(Cellempty8);

                                    MainTable2.AddCell(Cellempty9);

                                    MainTable2.AddCell(Cellempty10);

                                    MainTable2.AddCell(Cellempty11);

                                    MainTable2.AddCell(Cellempty12);
                                    MainTable2.AddCell(Cellempty13);
                                }
                            }



                            #endregion

                        }

                        #endregion

                        #region TOTALS                 

                        CellM = new PdfPCell(new Paragraph("Total Value", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 8;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(TotalValue.ToString("N0", CultureInfo.CreateSpecificCulture("hi-IN")), FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(TotalSGST.ToString("N0", CultureInfo.CreateSpecificCulture("hi-IN")), FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(TotalCGST.ToString("N0", CultureInfo.CreateSpecificCulture("hi-IN")), FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(GrandTotal.ToString("N0", CultureInfo.CreateSpecificCulture("hi-IN")), FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 1;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        #endregion
                        decimal GrandtotalwithServiceCharge = 0;
                        #region for ServiceCharge

                        if (servicecharge > 0)//bSCType == true)
                        {
                            decimal scharge = servicecharge;
                           
                            if (scharge > 0)
                            {
                                string SCharge = "";
                                if (bSCType == false)
                                {
                                    SCharge = ServiceCharge + "%";
                                }
                                else
                                {
                                    SCharge = ServiceCharge;
                                }


                                PdfPCell Cellservice = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellservice.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellservice.Colspan = 13;
                                Cellservice.BorderWidthBottom = 0;
                                Cellservice.BorderWidthLeft = .2f;
                                Cellservice.BorderWidthTop = 0;
                                Cellservice.BorderWidthRight = 0f;
                                Cellservice.BorderColor = BaseColor.BLACK;
                                MainTable2.AddCell(Cellservice);

                                Cellservice = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellservice.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellservice.BorderWidthBottom = 0;
                                Cellservice.BorderWidthLeft = 0.2f;
                                Cellservice.BorderWidthTop = 0;
                                Cellservice.BorderWidthRight = .2f;
                                Cellservice.BorderColor = BaseColor.BLACK;
                                MainTable2.AddCell(Cellservice);
                            }
                        }

                        #endregion for Service Charge

                        GrandtotalwithServiceCharge = GrandTotal + servicecharge;
                        #region for total with Service CHarge

                        PdfPCell Cellservice1 = new PdfPCell(new Phrase("Total Amount ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        Cellservice1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Cellservice1.Colspan = 13;
                        Cellservice1.BorderWidthBottom = 0;
                        Cellservice1.BorderWidthLeft = .2f;
                        Cellservice1.BorderWidthTop = 0;
                        Cellservice1.BorderWidthRight = 0f;
                        Cellservice1.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(Cellservice1);

                        Cellservice1 = new PdfPCell(new Phrase(GrandtotalwithServiceCharge.ToString("N0", CultureInfo.CreateSpecificCulture("hi-IN")), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        Cellservice1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Cellservice1.BorderWidthBottom = 0;
                        Cellservice1.BorderWidthLeft = 0.2f;
                        Cellservice1.BorderWidthTop = 0;
                        Cellservice1.BorderWidthRight = .2f;
                        Cellservice1.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(Cellservice1);

                        #endregion

                        #region

                        //if (RelChrgAmt > 0)
                        //{

                        //    PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    celldz5.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    celldz5.Colspan = 12;
                        //    celldz5.BorderWidthBottom = 0;
                        //    celldz5.BorderWidthLeft = .2f;
                        //    celldz5.BorderWidthTop = 0;
                        //    celldz5.BorderWidthRight = .2f;
                        //    celldz5.BorderColor = BaseColor.BLACK;
                        //    MainTable2.AddCell(celldz5);

                        //    PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    celldz6.BorderWidthBottom = 0;
                        //    celldz6.BorderWidthLeft = .2f;
                        //    celldz6.BorderWidthTop = 0;
                        //    celldz6.BorderWidthRight = .2f;
                        //    celldz6.BorderColor = BaseColor.BLACK;
                        //    MainTable2.AddCell(celldz6);
                        //}

                        //int ColCount = 12;                    


                        //if (PFAmt > 0)
                        //{

                        //    PdfPCell

                        //    CellCGST = new PdfPCell(new Phrase("EPF Employer Share @ " + BpfPer + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                        //    CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellCGST.Colspan = ColCount;
                        //    CellCGST.BorderWidthBottom = 0;
                        //    CellCGST.BorderWidthLeft = .2f;
                        //    CellCGST.BorderWidthTop = 0.2f;
                        //    CellCGST.BorderWidthRight = 0f;
                        //    // CellCGST.PaddingBottom = 5;
                        //    // CellCGST.PaddingTop = 5;
                        //    CellCGST.BorderColor = BaseColor.BLACK;
                        //    MainTable2.AddCell(CellCGST);

                        //    PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(PFAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellCGSTAmt.BorderWidthBottom = 0;
                        //    CellCGSTAmt.BorderWidthLeft = 0.2f;
                        //    CellCGSTAmt.BorderWidthTop = 0.2f;
                        //    CellCGSTAmt.BorderWidthRight = .2f;
                        //    CellCGSTAmt.BorderColor = BaseColor.BLACK;
                        //    //CellCGSTAmt.PaddingBottom = 5;
                        //    //CellCGSTAmt.PaddingTop = 5;
                        //    MainTable2.AddCell(CellCGSTAmt);

                        //}


                        //if (ESIAmt > 0)
                        //{

                        //    PdfPCell 

                        //    CellCGST = new PdfPCell(new Phrase("ESI Employer Share @ " + BesiPer + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                        //    CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellCGST.Colspan = ColCount;
                        //    CellCGST.BorderWidthBottom = 0;
                        //    CellCGST.BorderWidthLeft = .2f;
                        //    CellCGST.BorderWidthTop = 0.2f;
                        //    CellCGST.BorderWidthRight = 0f;
                        //    // CellCGST.PaddingBottom = 5;
                        //    // CellCGST.PaddingTop = 5;
                        //    CellCGST.BorderColor = BaseColor.BLACK;
                        //    MainTable2.AddCell(CellCGST);

                        //    PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(ESIAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellCGSTAmt.BorderWidthBottom = 0;
                        //    CellCGSTAmt.BorderWidthLeft = 0.2f;
                        //    CellCGSTAmt.BorderWidthTop = 0.2f;
                        //    CellCGSTAmt.BorderWidthRight = .2f;
                        //    CellCGSTAmt.BorderColor = BaseColor.BLACK;
                        //    //CellCGSTAmt.PaddingBottom = 5;
                        //    //CellCGSTAmt.PaddingTop = 5;
                        //    MainTable2.AddCell(CellCGSTAmt);
                        //}

                        //#region When Extradata check is false and STcheck is false

                        //if (Extradatacheck == true)
                        //{
                        //    if (machinarycost > 0)
                        //    {
                        //        if (STMachinary == true)
                        //        {
                        //            if (SCMachinary == true)
                        //            {                                       

                        //                PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst1.Colspan = ColCount;
                        //                celldcst1.BorderWidthBottom = 0;
                        //                celldcst1.BorderWidthLeft = .2f;
                        //                celldcst1.BorderWidthTop = 0;
                        //                celldcst1.BorderWidthRight = .2f;
                        //                celldcst1.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst1);


                        //                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst2.BorderWidthBottom = 0;
                        //                celldcst2.BorderWidthLeft = .2f;
                        //                celldcst2.BorderWidthTop = 0;
                        //                celldcst2.BorderWidthRight = .2f;
                        //                celldcst2.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst2);
                        //            }
                        //        }
                        //    }
                        //    if (materialcost > 0)
                        //    {
                        //        if (STMaterial == true)
                        //        {
                        //            if (SCMaterial == true)
                        //            {


                        //                PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst1.Colspan = ColCount;
                        //                celldcst1.BorderWidthBottom = 0;
                        //                celldcst1.BorderWidthLeft = .2f;
                        //                celldcst1.BorderWidthTop = 0;
                        //                celldcst1.BorderWidthRight = .2f;
                        //                celldcst1.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst1);

                        //                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst2.BorderWidthBottom = 0;
                        //                celldcst2.BorderWidthLeft = .2f;
                        //                celldcst2.BorderWidthTop = 0;
                        //                celldcst2.BorderWidthRight = .2f;
                        //                celldcst2.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst2);
                        //            }
                        //        }
                        //    }


                        //    if (maintenancecost > 0)
                        //    {
                        //        if (STMaintenance == true)
                        //        {
                        //            if (SCMaintenance == true)
                        //            {


                        //                PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst1.Colspan = ColCount;
                        //                celldcst1.BorderWidthBottom = 0;
                        //                celldcst1.BorderWidthLeft = .2f;
                        //                celldcst1.BorderWidthTop = 0;
                        //                celldcst1.BorderWidthRight = .2f;
                        //                celldcst1.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst1);

                        //                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst2.BorderWidthBottom = 0;
                        //                celldcst2.BorderWidthLeft = .2f;
                        //                celldcst2.BorderWidthTop = 0;
                        //                celldcst2.BorderWidthRight = .2f;
                        //                celldcst2.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst2);
                        //            }
                        //        }
                        //    }

                        //    if (extraonecost > 0)
                        //    {
                        //        if (STExtraone == true)
                        //        {
                        //            if (SCExtraone == true)
                        //            {

                        //                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst1.Colspan = ColCount;
                        //                celldcst1.BorderWidthBottom = 0;
                        //                celldcst1.BorderWidthLeft = .2f;
                        //                celldcst1.BorderWidthTop = 0;
                        //                celldcst1.BorderWidthRight = .2f;
                        //                celldcst1.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst1);

                        //                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst2.BorderWidthBottom = 0;
                        //                celldcst2.BorderWidthLeft = .2f;
                        //                celldcst2.BorderWidthTop = 0;
                        //                celldcst2.BorderWidthRight = .2f;
                        //                celldcst2.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst2);
                        //            }
                        //        }
                        //    }
                        //    if (extratwocost > 0)
                        //    {
                        //        if (STExtratwo == true)
                        //        {
                        //            if (SCExtratwo == true)
                        //            {                                      

                        //                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst1.Colspan = ColCount;
                        //                celldcst1.BorderWidthBottom = 0;
                        //                celldcst1.BorderWidthLeft = .2f;
                        //                celldcst1.BorderWidthTop = 0;
                        //                celldcst1.BorderWidthRight = .2f;
                        //                celldcst1.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst1);

                        //                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //                celldcst2.BorderWidthBottom = 0;
                        //                celldcst2.BorderWidthLeft = .2f;
                        //                celldcst2.BorderWidthTop = 0;
                        //                celldcst2.BorderWidthRight = .2f;
                        //                celldcst2.BorderColor = BaseColor.BLACK;
                        //                MainTable2.AddCell(celldcst2);
                        //            }
                        //        }
                        //    }

                        //}


                        //#endregion

                        #region When Extra data is checked and STcheck is true and SCcheck is false

                        //if (machinarycost > 0)
                        //{
                        //    if (STMachinary == true)
                        //    {
                        //        if (SCMachinary == false)
                        //        {                                

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = ColCount;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst2);
                        //        }
                        //    }

                        //    // bool SCMachinary = false;
                        //    //bool SCMaterial = false;
                        //    // bool SCMaintenance = false;
                        //    //bool SCExtraone = false;
                        //    //bool SCExtratwo = false;


                        //}
                        //if (materialcost > 0)
                        //{
                        //    if (STMaterial == true)
                        //    {
                        //        if (SCMaterial == false)
                        //        {

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = ColCount;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst2);
                        //        }
                        //    }
                        //}
                        //if (maintenancecost > 0)
                        //{
                        //    if (STMaintenance == true)
                        //    {
                        //        if (SCMaintenance == false)
                        //        {                                  

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = ColCount;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst2);
                        //        }
                        //    }
                        //}

                        //if (extraonecost > 0)
                        //{
                        //    if (STExtraone == true)
                        //    {
                        //        if (SCExtraone == false)
                        //        {

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = ColCount;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst2);
                        //        }
                        //    }
                        //}
                        //if (extratwocost > 0)
                        //{
                        //    if (STExtratwo == true)
                        //    {
                        //        if (SCExtratwo == false)
                        //        {                                  

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = ColCount;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            MainTable2.AddCell(celldcst2);
                        //        }
                        //    }
                        //}

                        #endregion

                        #endregion

                        //Fromdate = txtfromdate.Text;
                        //Todate = txttodate.Text;

                        //decimal GSTDiscounts = 0;

                        //if (STDiscountone == true)
                        //{
                        //    if (discountone > 0)
                        //    {

                        //        PdfPCell CellbbCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellbbCGST.Colspan = colCount - Noofcolumns;
                        //        CellbbCGST.BorderWidthBottom = 0;
                        //        CellbbCGST.BorderWidthLeft = .2f;
                        //        CellbbCGST.BorderWidthTop = 0f;
                        //        CellbbCGST.BorderWidthRight = 0.2f;
                        //        CellbbCGST.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellbbCGST);

                        //        CellbbCGST = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //        CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellbbCGST.Colspan = Noofcolumnsheading;
                        //        CellbbCGST.BorderWidthBottom = 0;
                        //        CellbbCGST.BorderWidthLeft = .2f;
                        //        CellbbCGST.BorderWidthTop = 0.2f;
                        //        CellbbCGST.BorderWidthRight = 0f;
                        //        CellbbCGST.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellbbCGST);

                        //        CellbbCGST = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //        CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellbbCGST.BorderWidthBottom = 0;
                        //        CellbbCGST.BorderWidthLeft = 0.2f;
                        //        CellbbCGST.BorderWidthTop = 0.2f;
                        //        CellbbCGST.BorderWidthRight = .2f;
                        //        CellbbCGST.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellbbCGST);
                        //        GSTDiscounts += discountone;



                        //    }
                        //}

                        //if (STDiscounttwo == true)
                        //{
                        //    if (discounttwo > 0)
                        //    {
                        //        PdfPCell CellbbCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellbbCGST.Colspan = colCount - Noofcolumns;
                        //        CellbbCGST.BorderWidthBottom = 0;
                        //        CellbbCGST.BorderWidthLeft = .2f;
                        //        CellbbCGST.BorderWidthTop = 0f;
                        //        CellbbCGST.BorderWidthRight = 0.2f;
                        //        CellbbCGST.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellbbCGST);

                        //        CellbbCGST = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //        CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellbbCGST.Colspan = Noofcolumnsheading;
                        //        CellbbCGST.BorderWidthBottom = 0;
                        //        CellbbCGST.BorderWidthLeft = .2f;
                        //        CellbbCGST.BorderWidthTop = 0.2f;
                        //        CellbbCGST.BorderWidthRight = 0f;
                        //        CellbbCGST.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellbbCGST);

                        //        CellbbCGST = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //        CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellbbCGST.BorderWidthBottom = 0;
                        //        CellbbCGST.BorderWidthLeft = 0.2f;
                        //        CellbbCGST.BorderWidthTop = 0.2f;
                        //        CellbbCGST.BorderWidthRight = .2f;
                        //        CellbbCGST.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellbbCGST);
                        //        GSTDiscounts += discounttwo;
                        //    }
                        //}

                        //if (TotalbeforeTax > 0)
                        //{
                        //    PdfPCell CellbbCGST = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellbbCGST.Colspan = colCount - Noofcolumns;
                        //    CellbbCGST.BorderWidthBottom = 0;
                        //    CellbbCGST.BorderWidthLeft = .2f;
                        //    CellbbCGST.BorderWidthTop = 0f;
                        //    CellbbCGST.BorderWidthRight = 0.2f;
                        //    CellbbCGST.BorderColor = BaseColor.BLACK;
                        //    tempTable22.AddCell(CellbbCGST);

                        //    CellbbCGST = new PdfPCell(new Phrase("Total Before Tax", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellbbCGST.Colspan = Noofcolumnsheading;
                        //    CellbbCGST.BorderWidthBottom = 0;
                        //    CellbbCGST.BorderWidthLeft = .2f;
                        //    CellbbCGST.BorderWidthTop = 0.2f;
                        //    CellbbCGST.BorderWidthRight = 0f;
                        //    CellbbCGST.BorderColor = BaseColor.BLACK;
                        //    tempTable22.AddCell(CellbbCGST);

                        //    CellbbCGST = new PdfPCell(new Phrase((TotalbeforeTax).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    CellbbCGST.BorderWidthBottom = 0;
                        //    CellbbCGST.BorderWidthLeft = 0.2f;
                        //    CellbbCGST.BorderWidthTop = 0.2f;
                        //    CellbbCGST.BorderWidthRight = .2f;
                        //    CellbbCGST.BorderColor = BaseColor.BLACK;
                        //    tempTable22.AddCell(CellbbCGST);
                        //}



                        #region for taxes

                        //if (!bIncludeST)
                        //{

                        //    string scpercent = "";
                        //    if (bST75 == true)
                        //    {
                        //        scpercent = "3";
                        //    }
                        //    else
                        //    {
                        //        scpercent = SCPersent;
                        //    }

                        //    if (servicetax > 0)
                        //    {
                        //        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellIGST2.Colspan = colCount - Noofcolumns;
                        //        CellIGST2.BorderWidthBottom = 0;
                        //        CellIGST2.BorderWidthLeft = .2f;
                        //        CellIGST2.BorderWidthTop = 0f;
                        //        CellIGST2.BorderWidthRight = 0.2f;
                        //        // CellCGST.PaddingBottom = 5;
                        //        // CellCGST.PaddingTop = 5;
                        //        CellIGST2.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellIGST2);

                        //        PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        celldd2.Colspan = Noofcolumnsheading;
                        //        celldd2.BorderWidthBottom = 0;
                        //        celldd2.BorderWidthLeft = .2f;
                        //        celldd2.BorderWidthTop = 0.2f;
                        //        celldd2.BorderWidthRight = 0f;
                        //        //celldd2.PaddingBottom = 5;
                        //        //celldd2.PaddingTop = 5;
                        //        celldd2.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(celldd2);


                        //        PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        celldd4.BorderWidthBottom = 0;
                        //        celldd4.BorderWidthLeft = 0.2f;
                        //        celldd4.BorderWidthTop = 0.2f;
                        //        celldd4.BorderWidthRight = .2f;
                        //        celldd4.BorderColor = BaseColor.BLACK;
                        //        //celldd4.PaddingBottom = 5;
                        //        //celldd4.PaddingTop = 5;
                        //        tempTable22.AddCell(celldd4);

                        //    }

                        //    if (sbcess > 0)
                        //    {
                        //        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellIGST2.Colspan = colCount - Noofcolumns;
                        //        CellIGST2.BorderWidthBottom = 0;
                        //        CellIGST2.BorderWidthLeft = .2f;
                        //        CellIGST2.BorderWidthTop = 0f;
                        //        CellIGST2.BorderWidthRight = 0.2f;
                        //        // CellCGST.PaddingBottom = 5;
                        //        // CellCGST.PaddingTop = 5;
                        //        CellIGST2.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellIGST2);

                        //        string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                        //        PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + SBCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        celldd2.Colspan = Noofcolumnsheading;
                        //        celldd2.BorderWidthBottom = 0;
                        //        celldd2.BorderWidthLeft = .2f;
                        //        celldd2.BorderWidthTop = 0.2f;
                        //        celldd2.BorderWidthRight = 0f;
                        //        celldd2.BorderColor = BaseColor.BLACK;
                        //        // celldd2.PaddingBottom = 5;
                        //        // celldd2.PaddingTop = 5;
                        //        tempTable22.AddCell(celldd2);


                        //        PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        celldd4.BorderWidthBottom = 0;
                        //        celldd4.BorderWidthLeft = 0.2f;
                        //        celldd4.BorderWidthTop = 0.2f;
                        //        celldd4.BorderWidthRight = .2f;
                        //        celldd4.BorderColor = BaseColor.BLACK;
                        //        //celldd4.PaddingBottom = 5;
                        //        //celldd4.PaddingTop = 5;
                        //        tempTable22.AddCell(celldd4);

                        //    }


                        //    if (kkcess > 0)
                        //    {

                        //        PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        CellIGST2.Colspan = colCount - Noofcolumns;
                        //        CellIGST2.BorderWidthBottom = 0;
                        //        CellIGST2.BorderWidthLeft = .2f;
                        //        CellIGST2.BorderWidthTop = 0f;
                        //        CellIGST2.BorderWidthRight = 0.2f;
                        //        // CellCGST.PaddingBottom = 5;
                        //        // CellCGST.PaddingTop = 5;
                        //        CellIGST2.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(CellIGST2);

                        //        string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                        //        PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + KKCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        Cellmtcesskk1.Colspan = Noofcolumnsheading;
                        //        Cellmtcesskk1.BorderWidthBottom = 0;
                        //        Cellmtcesskk1.BorderWidthLeft = .2f;
                        //        Cellmtcesskk1.BorderWidthTop = 0.2f;
                        //        Cellmtcesskk1.BorderWidthRight = 0f;
                        //        // celldd2.PaddingBottom = 5;
                        //        // celldd2.PaddingTop = 5;
                        //        Cellmtcesskk1.BorderColor = BaseColor.BLACK;
                        //        tempTable22.AddCell(Cellmtcesskk1);

                        //        PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //        Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //        Cellmtcesskk2.BorderWidthBottom = 0;
                        //        Cellmtcesskk2.BorderWidthLeft = 0.2f;
                        //        Cellmtcesskk2.BorderWidthTop = 0.2f;
                        //        Cellmtcesskk2.BorderWidthRight = .2f;
                        //        Cellmtcesskk2.BorderColor = BaseColor.BLACK;
                        //        //celldd4.PaddingBottom = 5;
                        //        //celldd4.PaddingTop = 5;
                        //        tempTable22.AddCell(Cellmtcesskk2);

                        //    }                         

                        #endregion for Taxes

                        #region When Extra data is checked and STcheck is false and SCcheck is true

                        //if (machinarycost > 0)
                        //{
                        //    if (STMachinary == false)
                        //    {
                        //        if (SCMachinary == true)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }

                        //    // bool SCMachinary = false;
                        //    //bool SCMaterial = false;
                        //    // bool SCMaintenance = false;
                        //    //bool SCExtraone = false;
                        //    //bool SCExtratwo = false;


                        //}
                        //if (materialcost > 0)
                        //{
                        //    if (STMaterial == false)
                        //    {
                        //        if (SCMaterial == true)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}
                        //if (maintenancecost > 0)
                        //{
                        //    if (STMaintenance == false)
                        //    {
                        //        if (SCMaintenance == true)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}

                        //if (extraonecost > 0)
                        //{
                        //    if (STExtraone == false)
                        //    {
                        //        if (SCExtraone == true)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}
                        //if (extratwocost > 0)
                        //{
                        //    if (STExtratwo == false)
                        //    {
                        //        if (SCExtratwo == true)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}

                        #endregion



                        #region When Extra data is checked and STcheck is false and SCcheck is true

                        //if (machinarycost > 0)
                        //{
                        //    if (STMachinary == false)
                        //    {
                        //        if (SCMachinary == false)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }

                        //    // bool SCMachinary = false;
                        //    //bool SCMaterial = false;
                        //    // bool SCMaintenance = false;
                        //    //bool SCExtraone = false;
                        //    //bool SCExtratwo = false;


                        //}
                        //if (materialcost > 0)
                        //{
                        //    if (STMaterial == false)
                        //    {
                        //        if (SCMaterial == false)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}
                        //if (maintenancecost > 0)
                        //{
                        //    if (STMaintenance == false)
                        //    {
                        //        if (SCMaintenance == false)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}

                        //if (extraonecost > 0)
                        //{
                        //    if (STExtraone == false)
                        //    {
                        //        if (SCExtraone == false)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}
                        //if (extratwocost > 0)
                        //{
                        //    if (STExtratwo == false)
                        //    {
                        //        if (SCExtratwo == false)
                        //        {
                        //            PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            CellIGST2.Colspan = colCount - Noofcolumns;
                        //            CellIGST2.BorderWidthBottom = 0;
                        //            CellIGST2.BorderWidthLeft = .2f;
                        //            CellIGST2.BorderWidthTop = 0f;
                        //            CellIGST2.BorderWidthRight = 0.2f;
                        //            // CellCGST.PaddingBottom = 5;
                        //            // CellCGST.PaddingTop = 5;
                        //            CellIGST2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(CellIGST2);

                        //            PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst1.Colspan = Noofcolumnsheading;
                        //            celldcst1.BorderWidthBottom = 0;
                        //            celldcst1.BorderWidthLeft = .2f;
                        //            celldcst1.BorderWidthTop = 0.2f;
                        //            celldcst1.BorderWidthRight = 0.2f;
                        //            celldcst1.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst1);

                        //            PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //            celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //            celldcst2.BorderWidthBottom = 0;
                        //            celldcst2.BorderWidthLeft = 0f;
                        //            celldcst2.BorderWidthTop = 0.2f;
                        //            celldcst2.BorderWidthRight = .2f;
                        //            celldcst2.BorderColor = BaseColor.BLACK;
                        //            tempTable22.AddCell(celldcst2);
                        //        }
                        //    }
                        //}

                        #endregion

                        #region Inwords

                        //In words
                        CellM = new PdfPCell(new Paragraph("Total Invoice value (in words)", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 4;
                        CellM.PaddingTop = 4;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = 0;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(" : "+ AmountInWords(GrandtotalwithServiceCharge) + " /-", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 10;
                        CellM.PaddingTop = 4;
                        CellM.FixedHeight = 20;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = 0;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        #endregion

                        #region Bank Details

                        //Bank Details

                        CellM = new PdfPCell(new Paragraph(" Bank Details : ", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 14;
                        CellM.BorderWidthTop = .2f;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.PaddingTop = 2;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        if (BankName.Trim().Length>0)
                        {

                        CellM = new PdfPCell(new Paragraph(" Bank Name", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 3;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = 0;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(": " + BankName, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 11;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = 0;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        }

                        if (BankAcNumber.Trim().Length>0)
                        {

                        CellM = new PdfPCell(new Paragraph(" A/C No.", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 3;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = 0;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(": " + BankAcNumber, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 11;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = 0;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        }

                        if (IFSCCode.Trim().Length>0)
                        {

                        CellM = new PdfPCell(new Paragraph(" IFSC CODE", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 3;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = 0;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(": " + IFSCCode + " (Fifth Letter Zero)", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 11;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = 0;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        }

                        if (BranchName.Trim().Length>0)
                        {

                        CellM = new PdfPCell(new Paragraph(" Branch Name", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 3;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = 0;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(": " + BranchName, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 11;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = 0;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        }

                        CellM = new PdfPCell(new Paragraph(" Or", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 14;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = 0;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        CellM = new PdfPCell(new Paragraph(" Bank Account Available as per Your Records", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        CellM.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        CellM.Colspan = 14;
                        CellM.BorderWidthTop = 0;
                        CellM.BorderWidthBottom = .2f;
                        CellM.BorderWidthLeft = .2f;
                        CellM.BorderWidthRight = .2f;
                        CellM.PaddingBottom = 5;
                        CellM.BorderColor = BaseColor.BLACK;
                        MainTable2.AddCell(CellM);

                        document.Add(MainTable2);

                        #endregion

                    }

                    #endregion

                    document.Close();

                }

                catch (Exception ex)
                {
                }
        }
}

        protected void btnMaterialInv_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    PageEventHelperPageNo pageEventHelper = new PageEventHelperPageNo();
                    writer.PageEvent = pageEventHelper;
                    int totalfonts = FontFactory.RegisterDirectory("c:\\WINDOWS\\fonts");
                    StringBuilder sa = new StringBuilder();
                    foreach (string fontname in FontFactory.RegisteredFonts)
                    {
                        sa.Append(fontname + "\n");
                    }


                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                    #region for CompanyInfo
                    string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";
                    DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    string emailid = "";
                    string website = "";
                    string phoneno = "";
                    string PANNO = "";
                    string PFNo = "";
                    string Esino = "";
                    string Servicetax = "";
                    string notes = "";
                    string faxno = "";
                    string Category = "";
                    string HSNNumber = "";
                    string SACCode = "";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyAddress = companyAddress.Replace("\r\n", string.Empty);
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                        //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Category = compInfo.Rows[0]["Category"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        emailid = compInfo.Rows[0]["Emailid"].ToString();
                        website = compInfo.Rows[0]["Website"].ToString();
                        phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                        notes = compInfo.Rows[0]["notes"].ToString();
                        HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                        SACCode = compInfo.Rows[0]["SACCode"].ToString();
                        faxno = compInfo.Rows[0]["Faxno"].ToString();

                        // PSARARegNo = compInfo.Rows[0]["PSARARegNo"].ToString();
                    }

                    #endregion

                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";


                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    #region
                    string SqlQuryForServiCharge = "select ContractId,servicecharge, convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,CGST,ServiceTax75,Pono,PODate,typeofwork from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                    string Typeofwork = "";
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strCGST = "";
                    string ContractStartDate = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    string POContent = "";
                    string PODate = "";

                    // string ServiceTaxCategory = "";
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strCGST = DtServicecharge.Rows[0]["CGST"].ToString();

                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                        POContent = DtServicecharge.Rows[0]["pono"].ToString();
                        PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                        Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                        // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                    }

                    #endregion

                    #region

                    string selectclientaddress = "select isnull(sg.segname,'') segname,c.*,s.state as Statename,s.GSTStateCode,gst.gstno from clients c left join Segments sg on c.ClientSegment = sg.SegId left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin  where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;

                    string OurGSTIN = "";
                    string GSTIN = "";
                    string StateCode = "0";
                    string State = "";

                    if (dtclientaddress.Rows.Count > 0)
                    {
                        OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                        StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                        GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                        State = dtclientaddress.Rows[0]["Statename"].ToString();
                    }

                    string SelectBillNo = string.Empty;
                    if (ddlType.SelectedIndex == 0)
                    {
                        SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    }
                    else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                    {
                        SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                    }
                    DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                    string BillNo = "";
                    string DisplayBillNo = "";
                    string area = "";
                    string ExtraRemarks = "";

                    if (dtclientaddress.Rows.Count > 0)
                    {
                        area = dtclientaddress.Rows[0]["segname"].ToString();
                    }

                    DateTime BillDate;
                    DateTime DueDate;


                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float sbcess = 0;
                    float kkcess = 0;


                    #region for GST on 17-6-2017 by swathi

                    float CGST = 0;
                    float SGST = 0;
                    float IGST = 0;
                    float Cess1 = 0;
                    float Cess2 = 0;
                    float CGSTPrc = 0;
                    float SGSTPrc = 0;
                    float IGSTPrc = 0;
                    float Cess1Prc = 0;
                    float Cess2Prc = 0;

                    #endregion for GST on 17-6-2017 by swathi


                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    // for both "1/1/2000" or "25/1/2000" formats
                    string billdt = dtn.ToString("MM/dd/yyyy");

                    string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                    DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                    string CGSTAlias = "";
                    string SGSTAlias = "";
                    string IGSTAlias = "";
                    string Cess1Alias = "";
                    string Cess2Alias = "";
                    string GSTINAlias = "";
                    string OurGSTINAlias = "";

                    string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                    DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                        CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                        SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                        IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                        Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                        Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                        GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                        OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }


                    if (DtBilling.Rows.Count > 0)
                    {

                        ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        if (ddlType.SelectedIndex == 0)
                        {
                            DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                            {
                                ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                            {
                                ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                            {
                                servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                            {
                                RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                            }
                        }

                        else
                        {
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                            {
                                servicecharge = float.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                            }
                        }



                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }




                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                        {
                            sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                        {
                            kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                        }

                        #region for GST as on 17-6-2017 by swathi

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                        {
                            CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                        {
                            SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                        {
                            IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                        {
                            Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                        {
                            Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                        {
                            CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                        {
                            SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                        {
                            IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                        {
                            Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                        {
                            Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                        }

                        #endregion for GST as on 17-6-2017 by swathi

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }




                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();
                    #endregion

                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/" + CmpIDPrefix + "Billlogo.png");
                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(40f);
                        gif2.SetAbsolutePosition(20f, 735f);
                        //document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }
                    PdfContentByte content = writer.DirectContent;

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 580f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 0.4f, 2f };
                    tablelogo.SetWidths(widtlogo);


                    //tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.Border = 0;
                    CInvoice.Colspan = 2;
                    CInvoice.PaddingTop = 50f;
                    CInvoice.BorderColor = BaseColor.BLACK;
                    // tablelogo.AddCell(CInvoice);

                    var FontColour = new BaseColor(178, 34, 34);
                    Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                    PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 20, Font.BOLD, BaseColor.BLACK)));
                    CCompName1.HorizontalAlignment = 0;
                    CCompName1.Colspan = 2;
                    CCompName1.Border = 0;
                    CCompName1.PaddingLeft = 120;
                    tablelogo.AddCell(CCompName1);


                    PdfPCell CCompName = new PdfPCell(new Paragraph("" + companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 0;
                    CCompName.Colspan = 2;
                    CCompName.Border = 0;
                    CCompName.PaddingLeft = 120;
                    CCompName.SetLeading(0, 1.2f);
                    tablelogo.AddCell(CCompName);

                    if (emailid.Length > 0)
                    {
                        PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CCompName2.HorizontalAlignment = 0;
                        CCompName2.Colspan = 2;
                        CCompName2.Border = 0;
                        CCompName2.PaddingLeft = 120;
                        tablelogo.AddCell(CCompName2);
                    }
                    if (phoneno.Length > 0)
                    {
                        PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CCompName2.HorizontalAlignment = 0;
                        CCompName2.Colspan = 2;
                        CCompName2.Border = 0;
                        CCompName2.PaddingLeft = 120;
                        tablelogo.AddCell(CCompName2);
                    }


                    PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.Border = 0;
                    CCompAddress.Colspan = 2;
                    // CCompAddress.FixedHeight = 0;
                    CCompAddress.SetLeading(0f, 1.3f);

                    tablelogo.AddCell(CCompAddress);

                    if (phoneno.Length > 0)
                    {
                        PdfPCell CCompName3 = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                        CCompName3.HorizontalAlignment = 1;
                        CCompName3.Colspan = 1;
                        CCompName3.Border = 0;
                        tablelogo.AddCell(CCompName3);

                        PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cellline.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        cellline.Border = 0;
                        cellline.Colspan = 2;
                        tablelogo.AddCell(cellline);
                    }

                    PdfPCell CCompName4 = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    CCompName4.HorizontalAlignment = 1;
                    CCompName4.Colspan = 1;
                    CCompName4.BorderWidthTop = 0;
                    CCompName4.BorderWidthBottom = .2f;
                    CCompName4.BorderWidthLeft = 0;
                    CCompName4.BorderWidthRight = 0;
                    CCompName4.BorderColor = BaseColor.BLACK;
                    tablelogo.AddCell(CCompName4);

                    PdfPCell Celemail = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Celemail.Colspan = 2;
                    //Celemail.FixedHeight = 20;
                    Celemail.BorderWidthTop = 0;
                    Celemail.BorderWidthBottom = .2f;
                    Celemail.BorderWidthLeft = 0;
                    Celemail.BorderWidthRight = 0;
                    Celemail.BorderColor = BaseColor.BLACK;
                    tablelogo.AddCell(Celemail);
                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph("\n", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;

                    document.Add(tablelogo);
                    PdfPTable address = new PdfPTable(5);
                    address.TotalWidth = 580f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                    address.SetWidths(addreslogo);


                    Celemail = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Celemail.Colspan = 5;
                    Celemail.FixedHeight = 20;
                    Celemail.BorderWidthTop = .2f;
                    Celemail.BorderWidthBottom = .2f;
                    Celemail.BorderWidthLeft = .2f;
                    Celemail.BorderWidthRight = .2f;
                    Celemail.BorderColor = BaseColor.BLACK;
                    address.AddCell(Celemail);

                    PdfPTable tempTable1 = new PdfPTable(3);
                    tempTable1.TotalWidth = 348f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 0.8f, 2f, 2f };
                    tempTable1.SetWidths(tempWidth1);

                    string addressData = "";

                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    PdfPCell clientaddrhno1 = new PdfPCell(new Paragraph("Billing Address ", FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    clientaddrhno1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientaddrhno1.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                    clientaddrhno1.BorderWidthBottom = 0;
                    clientaddrhno1.BorderWidthTop = 0;
                    clientaddrhno1.BorderWidthLeft = .2f;
                    clientaddrhno1.BorderWidthRight = 0.2f;
                    clientaddrhno1.BorderColor = BaseColor.BLACK;
                    //clientaddrhno.clientaddrhno = 20;
                    tempTable1.AddCell(clientaddrhno1);
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno.BorderWidthBottom = 0;
                        clientaddrhno.BorderWidthTop = 0;
                        clientaddrhno.BorderWidthLeft = .2f;
                        clientaddrhno.BorderWidthRight = 0.2f;
                        clientaddrhno.BorderColor = BaseColor.BLACK;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.Colspan = 3;
                        clientstreet.BorderWidthLeft = .2f;
                        clientstreet.BorderWidthRight = 0.2f;
                        clientstreet.BorderColor = BaseColor.BLACK;
                        //clientstreet.PaddingLeft = 20;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.Colspan = 3;
                        clientstreet.BorderColor = BaseColor.BLACK;
                        clientstreet.BorderWidthLeft = .2f;
                        clientstreet.BorderWidthRight = 0.2f;
                        // clientstreet.PaddingLeft = 20;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 3;
                        clientcolony.BorderWidthBottom = 0;
                        clientcolony.BorderWidthTop = 0;
                        clientcolony.BorderWidthLeft = .2f;
                        clientcolony.BorderWidthRight = 0.2f;
                        clientcolony.BorderColor = BaseColor.BLACK;
                        //clientcolony.PaddingLeft = 20;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 3;
                        clientcity.BorderWidthBottom = 0;
                        clientcity.BorderWidthTop = 0;
                        clientcity.BorderWidthLeft = .2f;
                        clientcity.BorderWidthRight = 0.2f;
                        clientcity.BorderColor = BaseColor.BLACK;
                        //  clientcity.PaddingLeft = 20;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 3;
                        clientstate.BorderWidthBottom = 0;
                        clientstate.BorderWidthTop = 0;
                        clientstate.BorderWidthLeft = .2f;
                        clientstate.BorderWidthRight = 0.2f;
                        clientstate.BorderColor = BaseColor.BLACK;
                        // clientstate.PaddingLeft = 20;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 3;
                        clietnpin.BorderWidthBottom = 0;
                        clietnpin.BorderWidthTop = 0;
                        clietnpin.BorderWidthLeft = .2f;
                        clietnpin.BorderWidthRight = 0.2f;
                        clietnpin.BorderColor = BaseColor.BLACK;
                        //  clietnpin.PaddingLeft = 20;
                        tempTable1.AddCell(clietnpin);
                    }

                    if (Bdt.Rows.Count > 0)
                    {

                        if (State.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }


                        if (StateCode.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);


                            clietnpin = new PdfPCell(new Paragraph(" : " + StateCode, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                        }

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(GSTINAlias, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                        }
                    }




                    PdfPCell cellemp1 = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellemp1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellemp1.Colspan = 3;
                    cellemp1.BorderWidthTop = 0;
                    cellemp1.BorderWidthBottom = 0;
                    cellemp1.BorderWidthLeft = .2f;
                    cellemp1.BorderWidthRight = 0.2f;
                    cellemp1.BorderColor = BaseColor.BLACK;
                    cellemp1.PaddingBottom = 15;
                    tempTable1.AddCell(cellemp1);

                    #region copy
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.Colspan = 3;
                    // childTable1.FixedHeight = 100;
                    childTable1.HorizontalAlignment = 0;

                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(2);
                    tempTable2.TotalWidth = 232f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f, 1f };
                    tempTable2.SetWidths(tempWidth2);



                    var phrase = new Phrase();
                    phrase.Add(new Chunk("Invoice No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell13 = new PdfPCell();
                    cell13.AddElement(phrase);
                    cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13.BorderWidthBottom = 0;
                    cell13.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13.Colspan = 1;
                    cell13.BorderWidthLeft = 0f;
                    cell13.BorderWidthRight = 0f;
                    cell13.PaddingTop = -5;
                    cell13.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell13);

                    var phrase10 = new Phrase();
                    phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell13v = new PdfPCell();
                    cell13v.AddElement(phrase10);
                    cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13v.BorderWidthBottom = 0;
                    cell13v.PaddingLeft = -50;
                    cell13v.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13v.Colspan = 1;
                    cell13v.BorderWidthLeft = 0;
                    cell13v.BorderWidthRight = .2f;
                    cell13v.PaddingTop = -5;
                    cell13v.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell13v);

                    var phrase11 = new Phrase();
                    phrase11.Add(new Chunk("Invoice Date", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell131 = new PdfPCell();
                    cell131.AddElement(phrase11);
                    cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell131.BorderWidthBottom = 0;
                    cell131.BorderWidthTop = 0;
                    // cell131.FixedHeight = 35;
                    cell131.Colspan = 1;
                    cell131.BorderWidthLeft = 0f;
                    cell131.BorderWidthRight = 0f;
                    cell131.PaddingTop = -5;
                    cell131.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell131);

                    var phrase11v = new Phrase();
                    phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell131v = new PdfPCell();
                    cell131v.AddElement(phrase11v);
                    cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell131v.BorderWidthBottom = 0;
                    cell131v.BorderWidthTop = 0;
                    // cell131.FixedHeight = 35;
                    cell131v.PaddingLeft = -50;
                    cell131v.Colspan = 1;
                    cell131v.BorderWidthLeft = 0;
                    cell131v.BorderWidthRight = .2f;
                    cell131v.PaddingTop = -5;
                    cell131v.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell131v);


                    var phraseim = new Phrase();
                    phraseim.Add(new Chunk("Month", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell13 = new PdfPCell();
                    cell13.AddElement(phraseim);
                    cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13.BorderWidthBottom = 0;
                    cell13.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13.Colspan = 1;
                    cell13.BorderWidthLeft = 0f;
                    cell13.BorderWidthRight = 0f;
                    cell13.PaddingTop = -5;
                    cell13.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell13);

                    var phrase10im = new Phrase();
                    phrase10im.Add(new Chunk(": " + GetMonthName() + "  " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell13v = new PdfPCell();
                    cell13v.AddElement(phrase10im);
                    cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13v.BorderWidthBottom = 0;
                    cell13v.PaddingLeft = -50;
                    cell13v.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13v.Colspan = 1;
                    cell13v.BorderWidthLeft = 0;
                    cell13v.BorderWidthRight = .2f;
                    cell13v.PaddingTop = -5;
                    cell13v.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell13v);


                    var phraseperiod = new Phrase();
                    phraseperiod.Add(new Chunk("Period", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell13 = new PdfPCell();
                    cell13.AddElement(phraseperiod);
                    cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13.BorderWidthBottom = 0;
                    cell13.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13.Colspan = 1;
                    cell13.BorderWidthLeft = 0f;
                    cell13.BorderWidthRight = 0f;
                    cell13.PaddingTop = -5;
                    cell13.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell13);

                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;


                    var phrase10p = new Phrase();
                    phrase10p.Add(new Chunk(": " + Fromdate + " to " + Todate, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell13v = new PdfPCell();
                    cell13v.AddElement(phrase10p);
                    cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13v.BorderWidthBottom = 0;
                    cell13v.PaddingLeft = -50;
                    cell13v.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13v.Colspan = 1;
                    cell13v.BorderWidthLeft = 0;
                    cell13v.BorderWidthRight = .2f;
                    cell13v.PaddingTop = -5;
                    cell13v.BorderColor = BaseColor.BLACK;
                    tempTable2.AddCell(cell13v);

                    if (POContent.Length > 0)
                    {



                        var phrasew = new Paragraph();
                        phrasew.Add(new Chunk("PO No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phrasew);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        //cell13.PaddingTop = 5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10w = new Paragraph();
                        phrase10w.Add(new Chunk(" : " + POContent, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        phrase10w.SetLeading(0f, 1.2f);
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10w);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.PaddingLeft = -53;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        // cell13v.PaddingTop = 5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                    }

                    if (PODate.Length > 0)
                    {



                        var phrasew = new Phrase();
                        phrasew.Add(new Chunk("PO Date", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phrasew);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10w = new Phrase();
                        phrase10w.Add(new Chunk(" : " + PODate, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10w);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.PaddingLeft = -53;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                    }

                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.Colspan = 2;
                    //childTable2.FixedHeight = 100;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    // address.AddCell(celll);
                    document.Add(address);




                    PdfPTable address1 = new PdfPTable(2);
                    address1.TotalWidth = 580f;
                    address1.LockedWidth = true;
                    float[] addreslogo1 = new float[] { 0.6f, 2f };
                    address1.SetWidths(addreslogo1);


                    PdfPCell cellser = new PdfPCell(new Phrase(" Dear Sir/Madam,\n\n", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                    cellser.HorizontalAlignment = 0;
                    cellser.BorderWidthBottom = 0.2f;
                    cellser.BorderWidthLeft = .2f;
                    cellser.BorderWidthTop = 0.2f;
                    cellser.Colspan = 1;
                    cellser.PaddingLeft = 20f;
                    cellser.BorderWidthRight = 0;
                    cellser.FixedHeight = 45;
                    cellser.BorderColor = BaseColor.BLACK;
                    address1.AddCell(cellser);

                    PdfPCell cellserVal = new PdfPCell();
                    var cellserValvar = new Phrase();
                    cellserValvar.Add(new Chunk("We are presenting our bill for the month of ", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                    cellserValvar.Add(new Chunk(GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 12, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellserValvar.Add(new Chunk(" towards services provided to you. The details of the bill are given below.", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                    cellserVal.AddElement(cellserValvar);
                    cellserVal.HorizontalAlignment = 0;
                    cellserVal.BorderWidthBottom = 0.2f;
                    cellserVal.BorderWidthLeft = 0;
                    cellserVal.Colspan = 1;
                    cellserVal.PaddingTop = 10;
                    cellserVal.BorderWidthTop = 0.2f;
                    cellserVal.BorderWidthRight = .2f;
                    cellserVal.FixedHeight = 45;
                    cellserVal.BorderColor = BaseColor.BLACK;
                    address1.AddCell(cellserVal);

                    document.Add(address1);
                    #endregion


                    #region


                    DataTable dtheadings = null;
                    var SPNameD = "GetInvHeadings";
                    Hashtable htheadings = new Hashtable();
                    htheadings.Add("@clientid", ddlclientid.SelectedValue);
                    // htheadings.Add("@LastDay", DtLastDay);
                    dtheadings = config.ExecuteAdaptorAsyncWithParams(SPNameD, htheadings).Result;

                    string InvDescription = "";
                    string InvNoOfEmps = "";
                    string InvNoofDuties = "";
                    string InvPayrate = "";
                    string InvAmount = "";
                    string InvDescriptionVisible = "N";
                    string InvNoOfEmpsVisible = "N";
                    string InvNoofDutiesVisible = "N";
                    string InvPayrateVisible = "N";
                    string InvAmountVisible = "N";


                    if (dtheadings.Rows.Count > 0)
                    {
                        InvDescription = dtheadings.Rows[0]["InvDescription"].ToString();
                        InvNoOfEmps = dtheadings.Rows[0]["InvNoOfEmps"].ToString();
                        InvNoofDuties = dtheadings.Rows[0]["InvNoofDuties"].ToString();
                        InvPayrate = dtheadings.Rows[0]["InvPayrate"].ToString();
                        InvAmount = dtheadings.Rows[0]["InvAmount"].ToString();
                        InvDescriptionVisible = dtheadings.Rows[0]["InvDescriptionVisible"].ToString();
                        InvNoOfEmpsVisible = dtheadings.Rows[0]["InvNoOfEmpsVisible"].ToString();
                        InvNoofDutiesVisible = dtheadings.Rows[0]["InvNoofDutiesVisible"].ToString();
                        InvPayrateVisible = dtheadings.Rows[0]["InvPayrateVisible"].ToString();
                        InvAmountVisible = dtheadings.Rows[0]["InvAmountVisible"].ToString();
                    }

                    int colCount = 12;
                    float[] colWidths;
                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 580f;
                    table.LockedWidth = true;
                    table.HeaderRows = 2;
                    table.HorizontalAlignment = 1;
                    if (strCGST == "False")
                    {
                        colWidths = new float[] { 1.5f, 6f, 2f, 1.7f, 2f, 2f, 2.5f, 2f, 0.5f, 2f, 0.5f, 2.5f };
                    }
                    else
                    {
                        colWidths = new float[] { 1.5f, 6f, 2f, 1.7f, 2f, 2f, 2.5f, 2f, 2.5f, 2f, 2.5f, 2.5f };
                    }
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;

                    if (strCGST == "False")
                    {
                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 7;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("IGST", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0;
                        cell.Colspan = 4;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);




                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0.2f;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);





                        cell = new PdfPCell(new Phrase("S.NO", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Particulars", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);




                        cell = new PdfPCell(new Phrase("HSN Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //set the background color for the header cell
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("UOM", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("Qty", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //set the background color for the header cell
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Rate/\nUnit", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        //cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Total Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        float GTotalTaxamt = 0;
                        float GTotalCGSTamt = 0;
                        float GTotalSGSTamt = 0;
                        float GTotalamt = 0;



                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 12; j++)
                                        {
                                            //fetch the column value of the current row
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthBottom = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.MinimumHeight = 20;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }
                                            if (j == 1)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.Colspan = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }



                                            if (j == 2)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (j == 3)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtUOM"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.Colspan = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }


                                            if (j == 4)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (j == 5)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);


                                            }

                                            if (j == 6)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                //cell.Border = 0;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = .2f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                                GTotalTaxamt += float.Parse(cellText);


                                            }


                                            if (j == 7)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblIGSTPrc"));
                                                cellText = label1.Text + "%";

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 2;
                                                table.AddCell(cell);
                                            }


                                            if (j == 8)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblIGSTAmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 2;
                                                table.AddCell(cell);
                                                GTotalCGSTamt += float.Parse(cellText);

                                            }


                                            if (j == 11)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblTotalTaxmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0.2f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                                GTotalamt += float.Parse(cellText);

                                            }

                                        }
                                    }
                                }
                            }
                        }



                        cell = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 6;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase(GTotalTaxamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 2;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase(GTotalCGSTamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase(GTotalamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                    }
                    else
                    {
                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 7;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("CGST", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("SGST", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0.2f;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);





                        cell = new PdfPCell(new Phrase("S.NO", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Particulars", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);




                        cell = new PdfPCell(new Phrase("HSN Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //set the background color for the header cell
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("UOM", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("Qty", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //set the background color for the header cell
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Rate/\nUnit", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        //cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Total Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        float GTotalTaxamt = 0;
                        float GTotalCGSTamt = 0;
                        float GTotalSGSTamt = 0;
                        float GTotalamt = 0;



                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 12; j++)
                                        {
                                            //fetch the column value of the current row
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthBottom = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.MinimumHeight = 20;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }
                                            if (j == 1)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.Colspan = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }



                                            if (j == 2)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (j == 3)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtUOM"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.Colspan = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }


                                            if (j == 4)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (j == 5)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                cellText = label1.Text;
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);


                                            }

                                            if (j == 6)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                //cell.Border = 0;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = .2f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                                GTotalTaxamt += float.Parse(cellText);


                                            }


                                            if (j == 7)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblCGSTPrc"));
                                                cellText = label1.Text + "%";

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }


                                            if (j == 8)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblCGSTAmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                                GTotalCGSTamt += float.Parse(cellText);

                                            }


                                            if (j == 9)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblSGSTPrc"));
                                                cellText = label1.Text + "%";

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }


                                            if (j == 10)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblSGSTAmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                                GTotalSGSTamt += float.Parse(cellText);

                                            }


                                            if (j == 11)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblTotalTaxmount"));
                                                cellText = label1.Text;

                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderWidthBottom = .2f;
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0.2f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                                GTotalamt += float.Parse(cellText);

                                            }

                                        }
                                    }
                                }
                            }
                        }



                        cell = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 6;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase(GTotalTaxamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase(GTotalCGSTamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase(GTotalSGSTamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                        cell = new PdfPCell(new Phrase(GTotalamt.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 1;
                        table.AddCell(cell);
                    }



                    document.Add(table);

                    colCount = 11;
                    #region footer
                    PdfPTable addrssf = new PdfPTable(colCount);
                    addrssf.TotalWidth = 580f;
                    addrssf.LockedWidth = true;
                    float[] addr = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.5f, 2.5f, 2.5f, 2.5f, 2.5f, 2.5f };
                    addrssf.SetWidths(addr);



                    cell = new PdfPCell(new Phrase(" Amount In Words: " + lblamtinwords.Text.Trim(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.2f;
                    cell.BorderWidthRight = 0.2f;
                    cell.BorderWidthLeft = .2f;
                    cell.PaddingTop = 10;
                    cell.PaddingBottom = 10;
                    cell.BorderColor = BaseColor.BLACK;
                    cell.Colspan = 11;
                    addrssf.AddCell(cell);

                    document.Add(addrssf);

                    PdfPTable Addterms = new PdfPTable(6);
                    Addterms.TotalWidth = 580f;
                    Addterms.LockedWidth = true;
                    float[] widthrerms = new float[] { 1.2f, 5.2f, 2f, 2.2f, 3f, 2.7f };
                    Addterms.SetWidths(widthrerms);


                    PdfPTable Childterms = new PdfPTable(3);
                    Childterms.TotalWidth = 299f;
                    Childterms.LockedWidth = true;
                    float[] Celters = new float[] { 1.5f, 1f, 2f };
                    Childterms.SetWidths(Celters);


                    #region for payment terms

                    cell = new PdfPCell(new Phrase(" \n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.2f;
                    cell.BorderWidthRight = 0f;
                    cell.BorderWidthLeft = .2f;
                    cell.PaddingTop = 7;
                    cell.Colspan = 3;
                    cell.BorderColor = BaseColor.BLACK;
                    Childterms.AddCell(cell);

                    if (Bdt.Rows.Count > 0)
                    {
                        if (OurGSTIN.Length > 0)
                        {
                            Phrase phrase2 = new Phrase();


                            cell = new PdfPCell(new Phrase(OurGSTINAlias, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(" : " + OurGSTIN, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (HSNNumber.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("HSN NUMBER", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.HorizontalAlignment = 0;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthRight = 0f;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.Colspan = 1;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(clietnpin);


                            clietnpin = new PdfPCell(new Paragraph(" : " + HSNNumber, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.HorizontalAlignment = 0;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthRight = 0f;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.Colspan = 2;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(clietnpin);

                        }



                        if (SACCode.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("SAC NUMBER", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthRight = 0f;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.Colspan = 1;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + SACCode, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthRight = 0f;
                            clietnpin.BorderWidthLeft = 0f;
                            clietnpin.Colspan = 2;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(clietnpin);

                        }
                    }

                    if (PANNO.Length > 0)
                    {

                        cell = new PdfPCell(new Phrase("PAN NO", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase(" : " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = 0f;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);
                    }
                    if (Servicetax.Length > 0)
                    {


                        cell = new PdfPCell(new Phrase("SER. TAX REG.NO", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        cell = new PdfPCell(new Phrase(" : " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);
                    }
                    if (Category.Length > 0)
                    {
                        cell = new PdfPCell(new Phrase("SC-CATEGORY", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        cell = new PdfPCell(new Phrase(" : " + Category, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                    }
                    if (PFNo.Length > 0)
                    {

                        cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase(" : " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);
                    }
                    if (Esino.Length > 0)
                    {

                        cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        cell = new PdfPCell(new Phrase(" : " + Esino, FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 2;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                    }


                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = .2f;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0f;
                    cell.BorderWidthLeft = .2f;
                    cell.Colspan = 3;
                    cell.BorderColor = BaseColor.BLACK;
                    Childterms.AddCell(cell);




                    #endregion for payment terms


                    PdfPCell Chid3 = new PdfPCell(Childterms);
                    Chid3.Border = 0;
                    Chid3.Colspan = 3;
                    Chid3.HorizontalAlignment = 0;
                    Addterms.AddCell(Chid3);



                    PdfPTable chilk = new PdfPTable(3);
                    chilk.TotalWidth = 281f;
                    chilk.LockedWidth = true;
                    float[] Celterss = new float[] { 2.2f, 3f, 2.7f };
                    chilk.SetWidths(Celterss);

                    PdfPCell cellHead4 = new PdfPCell();
                    var celldescription = new Phrase();
                    celldescription.Add(new Chunk("\nFor ", FontFactory.GetFont(FontStyle, 8, Font.NORMAL, BaseColor.BLACK)));
                    celldescription.Add(new Chunk(companyName, FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    cellHead4.AddElement(celldescription);
                    cellHead4.HorizontalAlignment = 2;
                    cellHead4.BorderWidthBottom = 0;
                    cellHead4.PaddingLeft = 205;
                    cellHead4.BorderWidthTop = 0.2f;
                    cellHead4.BorderWidthRight = .2f;
                    cellHead4.BorderWidthLeft = 0.2f;
                    cellHead4.Colspan = 3;
                    cellHead4.BorderColor = BaseColor.BLACK;
                    chilk.AddCell(cellHead4);

                    cell = new PdfPCell(new Phrase("\n\n\n\n\nAuthorised Signatory", FontFactory.GetFont(FontStyle, 9, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = .2f;
                    cell.BorderWidthLeft = 0.2f;
                    cell.Colspan = 3;
                    cell.BorderColor = BaseColor.BLACK;
                    chilk.AddCell(cell);

                    cellemp1 = new PdfPCell(new Paragraph("Computer Generated Invoice and Requires No Signature", FontFactory.GetFont(FontStyle, 10, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellemp1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellemp1.BorderWidthBottom = .2f;
                    cellemp1.BorderWidthTop = 0;
                    cellemp1.BorderWidthRight = .2f;
                    cellemp1.BorderWidthLeft = 0.2f;
                    cellemp1.Colspan = 3;
                    cellemp1.PaddingTop = 5;
                    cellemp1.BorderColor = BaseColor.BLACK;
                    //chilk.AddCell(cellemp1);

                    PdfPCell Chid4 = new PdfPCell(chilk);
                    Chid4.Border = 0;
                    Chid4.Colspan = 3;
                    Chid4.HorizontalAlignment = 0;
                    Addterms.AddCell(Chid4);



                    document.Add(Addterms);


                    #endregion
                    #endregion


                    PdfPTable Remarkscell = new PdfPTable(2);
                    Remarkscell.TotalWidth = 255f;
                    Remarkscell.LockedWidth = true;
                    float[] widtlogoCI = new float[] { 2f, 2f };
                    Remarkscell.SetWidths(widtlogoCI);

                    cellemp1 = new PdfPCell(new Paragraph(ExtraRemarks, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellemp1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellemp1.Colspan = 2;
                    cellemp1.BorderWidthTop = 0;
                    cellemp1.BorderWidthBottom = 0;
                    cellemp1.BorderWidthLeft = 0;
                    cellemp1.BorderWidthRight = 0;
                    cellemp1.BorderColor = BaseColor.BLACK;
                    cellemp1.PaddingBottom = 15;
                    Remarkscell.AddCell(cellemp1);

                    Remarkscell.WriteSelectedRows(0, -1, document.RightMargin + 15, document.BottomMargin + 280, content);

                    Rectangle rectangle = new Rectangle(document.PageSize);


                    string filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";


                    // document.Add(tablecon);

                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }

                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void DisplayDataForNotGeneratingBill()
        {
            if (ddlclientid.SelectedIndex > 0)
            {
                panelRemarks.Visible = true;

                DateTime DtLastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }
                var ContractID = "";


                #region  Begin Get Contract Id Based on The Last Day

                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                HtGetContractID.Add("@LastDay", DtLastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();

                }
                #endregion

                string MaterialCostPerMonth = "";
                string MachinaryCostPerMonth = "";
                string SqlQuryForMaterialcost = "select MaterialCostPerMonth,MachinaryCostPerMonth from contracts where " +
                    " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                DataTable DtMaterialcost = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForMaterialcost).Result;
                if (DtMaterialcost.Rows.Count > 0)
                {
                    if (String.IsNullOrEmpty(DtMaterialcost.Rows[0]["MachinaryCostPerMonth"].ToString()) == false)
                    {
                        MachinaryCostPerMonth = DtMaterialcost.Rows[0]["MachinaryCostPerMonth"].ToString();
                    }
                    if (String.IsNullOrEmpty(DtMaterialcost.Rows[0]["MaterialCostPerMonth"].ToString()) == false)
                    {
                        MaterialCostPerMonth = DtMaterialcost.Rows[0]["MaterialCostPerMonth"].ToString();
                    }
                }

                txtmachinarycost.Text = "Machinery Cost : ";
                txtMaterialcost.Text = "Material Cost : ";
                txtMaintanancecost.Text = "Maintenance Work :";
                txtextraonetitle.Text = "Extra Amount one :";
                txtextratwotitle.Text = "Extra Amount Two :";
                txtdiscount.Text = "Discounts :";
                txtdiscounttwotitle.Text = "Discount Two :";
                txtMachinery.Text = MachinaryCostPerMonth;
                txtMaterial.Text = MaterialCostPerMonth;
                if (MachinaryCostPerMonth != "0")
                {
                    chkSCYesMachinary.Checked = true;
                    chkSTYesMachinary.Checked = true;
                    checkExtraData.Checked = true;
                }
                else
                {
                    chkSCYesMachinary.Checked = false;
                    chkSTYesMachinary.Checked = false;
                }
                if (MaterialCostPerMonth != "0")
                {
                    chkSTYesMaterial.Checked = true;
                    chkSCYesMaterial.Checked = true;
                    checkExtraData.Checked = true;
                }
                else
                {
                    chkSTYesMaterial.Checked = false;
                    chkSCYesMaterial.Checked = false;
                }

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Select Client details and month ');", true);
                checkExtraData.Checked = false;
            }
        }

        public class PageEventHelperPageNo : PdfPageEventHelper
        {
            PdfContentByte cb;
            PdfTemplate template;

            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            public override void OnOpenDocument(PdfWriter writer, Document document)
            {
                cb = writer.DirectContent;
                template = cb.CreateTemplate(50, 50);
            }
            public override void OnEndPage(PdfWriter writer, Document document)
            {
                base.OnEndPage(writer, document);

                int pageN = writer.PageNumber;
                String text = "Page " + pageN.ToString() + " of ";
                float len = bf.GetWidthPoint(text, 8);


                iTextSharp.text.Rectangle pageSize = document.PageSize;

                cb.SetRGBColorFill(100, 100, 100);

                cb.BeginText();
                cb.SetFontAndSize(bf, 8);

                cb.SetTextMatrix(document.LeftMargin + 25, pageSize.GetBottom(document.BottomMargin - 10));
                cb.ShowText(text);

                cb.EndText();

                cb.AddTemplate(template, document.LeftMargin + len, pageSize.GetBottom(document.BottomMargin - 10));
                // cb.WriteSelectedRows(0, -1, 150, document.Bottom, writer.DirectContent);
            }

            int totalpgcount = 0;
            public override void OnCloseDocument(PdfWriter writer, Document document)
            {

                base.OnCloseDocument(writer, document);
                template.BeginText();
                template.SetFontAndSize(bf, 8);
                template.SetTextMatrix(25, 0);
                template.SetGrayStroke(11);
                totalpgcount = writer.PageNumber;
                totalpgcount = totalpgcount - 1;
                template.ShowText("" + totalpgcount);
                template.EndText();

            }
        }

        protected void btninvoiceemp_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            MemoryStream ms = new MemoryStream();

            Document document = new Document();


            Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            string filename = "";
            string CopyName = "";
            document.Open();

            BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            string SelectBillNo = string.Empty;
            string DisplayBillNo = "";

            if (ddlType.SelectedIndex == 0)
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
            }
            else
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
            }
            DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;

            if (DtBilling.Rows.Count > 0)
            {
                DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
            }


            DownloadBillEmp(document, ms);

            filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
            Response.Buffer = true;
            Response.Clear();
            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
            Response.OutputStream.Flush();
            Response.End();
        }

        public void DownloadBillEmp(Document document, MemoryStream ms)
        {
            int month = 0;
            int font = Convert.ToInt32(ddlfont.SelectedValue);

            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    int m = 0;
                    int Copycount = 1;

                    if (chkcopy.Checked == true)
                    {
                        Copycount = 2;
                    }

                    for (m = 0; m < Copycount; m++)
                    {
                        document.NewPage();
                        string CopyName = "";
                        if (chkcopy.Checked == true)
                        {
                            if (m == 0)
                            {
                                CopyName = "ORIGINAL FOR RECIPIENT";
                            }
                            if (m == 1)
                            {
                                CopyName = "DUPLICATE FOR SUPPLIER";
                            }
                        }
                        PdfPCell cell;
                        #region for PDf
                        Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                        PdfWriter writer = PdfWriter.GetInstance(document, ms);

                        document.Open();
                        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                        #region for CompanyInfo
                        string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";

                        DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        string companyName = "Your Company Name";
                        string companyAddress = "Your Company Address";
                        string companyaddressline = " ";
                        string emailid = "";
                        string website = "";
                        string phoneno = "";
                        string PANNO = "";
                        string PFNo = "";
                        string Esino = "";
                        string Servicetax = "";
                        string notes = "";
                        string ServiceText = "";
                        string PSARARegNo = "";
                        string Category = "";
                        string HSNNumber = "";
                        string SACCode = "";
                        string BillDesc = "";
                        string BankName = "";
                        string BankAcNumber = "";
                        string IFSCCode = "";
                        string BranchName = "";
                        string CINNo = "";
                        string MSMENO = "";

                        if (compInfo.Rows.Count > 0)
                        {
                            companyName = compInfo.Rows[0]["CompanyName"].ToString();
                            companyAddress = compInfo.Rows[0]["Address"].ToString();
                            //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                            companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                            MSMENO = compInfo.Rows[0]["MSMENO"].ToString();
                            PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                            PFNo = compInfo.Rows[0]["PFNo"].ToString();
                            Category = compInfo.Rows[0]["Category"].ToString();
                            Esino = compInfo.Rows[0]["ESINo"].ToString();
                            Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                            emailid = compInfo.Rows[0]["Emailid"].ToString();
                            website = compInfo.Rows[0]["Website"].ToString();
                            phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                            notes = compInfo.Rows[0]["notes"].ToString();
                            HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                            SACCode = compInfo.Rows[0]["SACCode"].ToString();
                            BillDesc = compInfo.Rows[0]["BillDesc"].ToString();
                            BankName = compInfo.Rows[0]["Bankname"].ToString();
                            BranchName = compInfo.Rows[0]["BranchName"].ToString();
                            BankAcNumber = compInfo.Rows[0]["bankaccountno"].ToString();
                            IFSCCode = compInfo.Rows[0]["IfscCode"].ToString();
                            CINNo = compInfo.Rows[0]["CINNo"].ToString();
                            // PSARARegNo = compInfo.Rows[0]["PSARARegNo"].ToString();
                        }

                        #endregion

                        DateTime DtLastDay = DateTime.Now;
                        if (Chk_Month.Checked == false)
                        {
                            DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                        }
                        if (Chk_Month.Checked == true)
                        {
                            DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        }
                        var ContractID = "";


                        #region  Begin Get Contract Id Based on The Last Day

                        Hashtable HtGetContractID = new Hashtable();
                        var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                        HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                        HtGetContractID.Add("@LastDay", DtLastDay);
                        DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                        if (DTContractID.Rows.Count > 0)
                        {
                            ContractID = DTContractID.Rows[0]["contractid"].ToString();

                        }
                        #endregion

                        #region
                        string SqlQuryForServiCharge = "select ContractId,servicecharge,PODate, convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,'' billnotes from contracts  where " +
                            " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                        DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                        string Typeofwork = "";
                        string BillNotes = "";
                        string ServiceCharge = "0";
                        string strSCType = "";
                        string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                        bool bSCType = false;
                        string strIncludeST = "";
                        string ContractStartDate = "";
                        string strST75 = "";
                        bool bIncludeST = false;
                        bool bST75 = false;
                        string POContent = "";
                        string PODate = "";
                        string CnPFNo = "";
                        string CnESINo = "";
                        string Location = "";
                        string ReversCharges = "";
                        // string ServiceTaxCategory = "";
                        if (DtServicecharge.Rows.Count > 0)
                        {
                            PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                            {
                                ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                            }
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                            {
                                strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                            }
                            string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                            if (tempDescription.Trim().Length > 0)
                            {
                                strDescription = tempDescription;
                            }
                            if (strSCType.Length > 0)
                            {
                                bSCType = Convert.ToBoolean(strSCType);
                            }
                            strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                            strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                            ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                            if (strIncludeST == "True")
                            {
                                bIncludeST = true;
                            }
                            if (strST75 == "True")
                            {
                                bST75 = true;
                            }
                            POContent = DtServicecharge.Rows[0]["pono"].ToString();
                            Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                            BillNotes = DtServicecharge.Rows[0]["BillNotes"].ToString();
                            // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                        }

                        #endregion

                        #region

                        string selectclientaddress = "select isnull(sg.segname,'') as segname,c.*, s.state as Statename,s.GSTStateCode,gst.gstno,gst.GSTAddress,s1.state as ShipState,s1.GSTStateCode as ShipToStateCode1 from clients c left join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin left join states s1 on s1.stateid=c.ShipToState where clientid= '" + ddlclientid.SelectedValue + "'";
                        DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
                        string OurGSTIN = "";
                        string GSTIN = "";
                        string StateCode = "0";
                        string State = "";
                        string ShipToGSTIN = "";
                        string ShipToStateCode = "0";
                        string ShipToState = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                            StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                            GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                            State = dtclientaddress.Rows[0]["Statename"].ToString();
                            Location = dtclientaddress.Rows[0]["Location"].ToString();


                            ShipToStateCode = dtclientaddress.Rows[0]["ShipToStateCode1"].ToString();
                            ShipToGSTIN = dtclientaddress.Rows[0]["ShipToGSTIN"].ToString();
                            ShipToState = dtclientaddress.Rows[0]["ShipState"].ToString();
                        }

                        string SelectBillNo = string.Empty;
                        if (ddlType.SelectedIndex == 0)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                        }
                        else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                        }
                        DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                        string BillNo = "";
                        string DisplayBillNo = "";
                        string area = "";
                        string ExtraRemarks = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            area = dtclientaddress.Rows[0]["segname"].ToString();
                        }

                        DateTime BillDate;
                        DateTime DueDate;


                        #region Variables for data Fields as on 11/03/2014 by venkat


                        float servicecharge = 0;
                        float servicetax = 0;
                        float cess = 0;
                        float sbcess = 0;
                        float kkcess = 0;


                        #region for GST on 17-6-2017 by swathi

                        float CGST = 0;
                        float SGST = 0;
                        float IGST = 0;
                        float Cess1 = 0;
                        float Cess2 = 0;
                        float CGSTPrc = 0;
                        float SGSTPrc = 0;
                        float IGSTPrc = 0;
                        float Cess1Prc = 0;
                        float Cess2Prc = 0;

                        #endregion for GST on 17-6-2017 by swathi


                        float shecess = 0;
                        float totalamount = 0;
                        float Grandtotal = 0;

                        float ServiceTax75 = 0;
                        float ServiceTax25 = 0;

                        float machinarycost = 0;
                        float materialcost = 0;
                        float maintenancecost = 0;
                        float extraonecost = 0;
                        float extratwocost = 0;
                        float discountone = 0;
                        float discounttwo = 0;

                        string machinarycosttitle = "";
                        string materialcosttitle = "";
                        string maintenancecosttitle = "";
                        string extraonecosttitle = "";
                        string extratwocosttitle = "";
                        string discountonetitle = "";
                        string discounttwotitle = "";

                        bool Extradatacheck = false;
                        bool ExtraDataSTcheck = false;

                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;

                        string strExtradatacheck = "";
                        string strExtrastcheck = "";

                        string strSTMachinary = "";
                        string strSTMaterial = "";
                        string strSTMaintenance = "";
                        string strSTExtraone = "";
                        string strSTExtratwo = "";

                        string strSCMachinary = "";
                        string strSCMaterial = "";
                        string strSCMaintenance = "";
                        string strSCExtraone = "";
                        string strSCExtratwo = "";

                        string strSTDiscountone = "";
                        string strSTDiscounttwo = "";

                        float staxamtonservicecharge = 0;
                        float RelChrgAmt = 0;


                        #endregion

                        DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        // for both "1/1/2000" or "25/1/2000" formats
                        string billdt = dtn.ToString("MM/dd/yyyy");

                        string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                        DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                        string CGSTAlias = "";
                        string SGSTAlias = "";
                        string IGSTAlias = "";
                        string Cess1Alias = "";
                        string Cess2Alias = "";
                        string GSTINAlias = "";
                        string OurGSTINAlias = "";

                        string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                        DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                        string SCPersent = "";
                        if (DtTaxes.Rows.Count > 0)
                        {
                            SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                            CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                            SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                            IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                            Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                            Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                            GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                            OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        }
                        else
                        {
                            lblResult.Text = "There Is No Tax Values For Generating Bills ";
                            return;
                        }


                        if (DtBilling.Rows.Count > 0)
                        {

                            ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                            BillNo = DtBilling.Rows[0]["billno"].ToString();
                            DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                            BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                            if (ddlType.SelectedIndex == 0)
                            {
                                DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                                {
                                    ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                                {
                                    ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                                {
                                    servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                                {
                                    RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                                }
                            }

                            else
                            {
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                                {
                                    servicecharge = float.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                                }
                            }



                            #region Begin New code for values taken from database as on 11/03/2014 by venkat

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                            {
                                totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                            {
                                servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                            {
                                sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                            {
                                kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                            }

                            #region for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                            {
                                CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                            {
                                SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                            {
                                IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                            {
                                Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                            {
                                Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                            {
                                CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                            {
                                SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                            {
                                IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                            {
                                Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                            {
                                Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                            }

                            #endregion for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                            {
                                cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                            {
                                shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                            {
                                Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                            {
                                machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                            {
                                materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                            {
                                maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                            {
                                extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                            {
                                extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                            {
                                discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                            {
                                discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                            }

                            machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                            materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                            maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                            extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                            extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                            discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                            discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                            {
                                strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                                if (strExtradatacheck == "True")
                                {
                                    Extradatacheck = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                            {
                                strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                                if (strExtrastcheck == "True")
                                {
                                    ExtraDataSTcheck = true;
                                }
                            }



                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                            {
                                strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                                if (strSTMachinary == "True")
                                {
                                    STMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                            {
                                strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                                if (strSTMaterial == "True")
                                {
                                    STMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                            {
                                strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                                if (strSTMaintenance == "True")
                                {
                                    STMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                            {
                                strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                                if (strSTExtraone == "True")
                                {
                                    STExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                            {
                                strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                                if (strSTExtratwo == "True")
                                {
                                    STExtratwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                            {
                                strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                                if (strSCMachinary == "True")
                                {
                                    SCMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                            {
                                strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                                if (strSCMaterial == "True")
                                {
                                    SCMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                            {
                                strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                                if (strSCMaintenance == "True")
                                {
                                    SCMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                            {
                                strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                                if (strSCExtraone == "True")
                                {
                                    SCExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                            {
                                strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                                if (strSCExtratwo == "True")
                                {
                                    SCExtratwo = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                            {
                                staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                            }

                            #endregion
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                            return;
                        }
                        string Year = DateTime.Now.Year.ToString();
                        #endregion

                        document.AddTitle(companyName);
                        document.AddAuthor("DIYOS");
                        document.AddSubject("Invoice");
                        document.AddKeywords("Keyword1, keyword2, …");

                        string imagepath = Server.MapPath("~/assets/ExcetraLogo.jpg");
                        if (File.Exists(imagepath))
                        {
                            iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);
                            // gif2.Alignment = (iTextSharp.text.Image.ALIGN_CENTER | iTextSharp.text.Image.UNDERLYING);
                            gif2.Alignment = 1;
                            gif2.ScalePercent(80f);
                            gif2.SetAbsolutePosition(250f, 770f);
                            document.Add(gif2);
                        }
                        PdfContentByte content = writer.DirectContent;

                        PdfPTable tablelogo = new PdfPTable(2);
                        tablelogo.TotalWidth = 580f;
                        tablelogo.LockedWidth = true;
                        float[] widtlogo = new float[] { 0.4f, 2f };
                        tablelogo.SetWidths(widtlogo);


                        //tablelogo.AddCell(celll);


                        var FontColour = new BaseColor(178, 34, 34);
                        Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                        PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 15, Font.BOLD, BaseColor.BLACK)));
                        CCompName1.HorizontalAlignment = 0;
                        CCompName1.Colspan = 2;
                        CCompName1.PaddingTop = 25f;
                        CCompName1.Border = 0;
                        //CCompName1.PaddingLeft = 120;
                        tablelogo.AddCell(CCompName1);


                        PdfPCell CCompName = new PdfPCell(new Paragraph("" + companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        CCompName.HorizontalAlignment = 0;
                        CCompName.Colspan = 2;
                        CCompName.Border = 0;
                        //CCompName.PaddingTop = 5f;
                        // CCompName.PaddingLeft = 120;
                        CCompName.SetLeading(0, 1.2f);
                        tablelogo.AddCell(CCompName);

                        if (emailid.Length > 0)
                        {
                            PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CCompName2.HorizontalAlignment = 0;
                            CCompName2.Colspan = 2;
                            CCompName2.Border = 0;
                            //CCompName2.PaddingTop = 4f;
                            //CCompName2.PaddingLeft = 120;
                            tablelogo.AddCell(CCompName2);
                        }
                        if (phoneno.Length > 0)
                        {
                            PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CCompName2.HorizontalAlignment = 0;
                            CCompName2.Colspan = 2;
                            CCompName2.Border = 0;
                            //CCompName2.PaddingTop = 4f;
                            //CCompName2.PaddingLeft = 120;
                            tablelogo.AddCell(CCompName2);
                        }
                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.Border = 0;
                            // clietnpin.PaddingTop = 4f;
                            //clietnpin.BorderWidthBottom = 0;
                            //clietnpin.BorderWidthTop = 0;
                            //clietnpin.BorderWidthLeft = .2f;
                            //clietnpin.BorderWidthRight = 0;
                            //clietnpin.BorderColor = BaseColor.BLACK;
                            // clietnpin.PaddingLeft = 120;
                            //tablelogo.AddCell(clietnpin);                      

                        }

                        var CelGSTaddr = new Paragraph();
                        CelGSTaddr.Add(new Chunk(CopyName, FontFactory.GetFont(FontStyle, 11 - 1, Font.BOLD, BaseColor.BLACK)));
                        CelGSTaddr.SetLeading(0, 1f);
                        PdfPCell CellGstaddress = new PdfPCell();
                        CellGstaddress.AddElement(CelGSTaddr);
                        CellGstaddress.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        CellGstaddress.Colspan = 2;
                        CellGstaddress.BorderWidthTop = 0;
                        CellGstaddress.BorderWidthBottom = 0;
                        CellGstaddress.BorderWidthLeft = 0;
                        CellGstaddress.BorderWidthRight = 0;
                        CellGstaddress.PaddingLeft = 430;
                        tablelogo.AddCell(CellGstaddress);

                        document.Add(tablelogo);


                        PdfPTable address = new PdfPTable(5);
                        address.TotalWidth = 580f;
                        address.LockedWidth = true;
                        float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                        address.SetWidths(addreslogo);

                        PdfPCell Celemail = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
                        Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Celemail.Colspan = 5;
                        Celemail.FixedHeight = 20;
                        Celemail.BorderWidthTop = .2f;
                        Celemail.BorderWidthBottom = .2f;
                        Celemail.BorderWidthLeft = .2f;
                        Celemail.BorderWidthRight = .2f;
                        Celemail.BorderColor = BaseColor.BLACK;
                        address.AddCell(Celemail);

                        PdfPTable tempTable1 = new PdfPTable(3);
                        tempTable1.TotalWidth = 348f;
                        tempTable1.LockedWidth = true;
                        float[] tempWidth1 = new float[] { 0.8f, 2f, 2f };
                        tempTable1.SetWidths(tempWidth1);

                        #region Bill To Address

                        string addressData = "";

                        addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();

                        PdfPCell clientaddrhno1 = new PdfPCell(new Paragraph("Billing Address", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno1.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno1.BorderWidthBottom = 0;
                        clientaddrhno1.BorderWidthTop = 0;
                        clientaddrhno1.BorderWidthLeft = .2f;
                        clientaddrhno1.BorderWidthRight = 0.2f;
                        clientaddrhno1.BorderColor = BaseColor.BLACK;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable1.AddCell(clientaddrhno1);
                        if (addressData.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable1.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcolony.Colspan = 3;
                            clientcolony.BorderWidthBottom = 0;
                            clientcolony.BorderWidthTop = 0;
                            clientcolony.BorderWidthLeft = .2f;
                            clientcolony.BorderWidthRight = 0.2f;
                            clientcolony.BorderColor = BaseColor.BLACK;
                            //clientcolony.PaddingLeft = 20;
                            tempTable1.AddCell(clientcolony);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcity.Colspan = 3;
                            clientcity.BorderWidthBottom = 0;
                            clientcity.BorderWidthTop = 0;
                            clientcity.BorderWidthLeft = .2f;
                            clientcity.BorderWidthRight = 0.2f;
                            clientcity.BorderColor = BaseColor.BLACK;
                            //  clientcity.PaddingLeft = 20;
                            tempTable1.AddCell(clientcity);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstate.Colspan = 3;
                            clientstate.BorderWidthBottom = 0;
                            clientstate.BorderWidthTop = 0;
                            clientstate.BorderWidthLeft = .2f;
                            clientstate.BorderWidthRight = 0.2f;
                            clientstate.BorderColor = BaseColor.BLACK;
                            // clientstate.PaddingLeft = 20;
                            tempTable1.AddCell(clientstate);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                        if (Bdt.Rows.Count > 0)
                        {

                            if (State.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.BorderWidthRight = 0;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);

                                clietnpin = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = 0;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);
                            }


                            if (StateCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.BorderWidthRight = 0;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);


                                clietnpin = new PdfPCell(new Paragraph(" : " + StateCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = 0;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);

                            }


                        }

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.Border = 0;
                            clietnpin.PaddingTop = 4f;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            //clietnpin.BorderColor = BaseColor.BLACK;
                            // clietnpin.PaddingLeft = 120;
                            tempTable1.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                        }

                        PdfPCell cellemp1 = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellemp1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellemp1.Colspan = 3;
                        cellemp1.BorderWidthTop = 0;
                        cellemp1.BorderWidthBottom = 0;
                        cellemp1.BorderWidthLeft = .2f;
                        cellemp1.BorderWidthRight = 0.2f;
                        cellemp1.BorderColor = BaseColor.BLACK;
                        cellemp1.PaddingBottom = 15;
                        //tempTable1.AddCell(cellemp1);

                        #endregion


                        #region copy
                        PdfPCell childTable1 = new PdfPCell(tempTable1);
                        childTable1.Border = 0;
                        childTable1.Colspan = 3;
                        // childTable1.FixedHeight = 100;
                        childTable1.HorizontalAlignment = 0;

                        address.AddCell(childTable1);

                        PdfPTable tempTable2 = new PdfPTable(2);
                        tempTable2.TotalWidth = 232f;
                        tempTable2.LockedWidth = true;
                        float[] tempWidth2 = new float[] { 0.8f, 1.2f };
                        tempTable2.SetWidths(tempWidth2);



                        var phrase = new Phrase();
                        phrase.Add(new Chunk("Invoice No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell13 = new PdfPCell();
                        cell13.AddElement(phrase);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10 = new Phrase();
                        phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phrase11 = new Phrase();
                        phrase11.Add(new Chunk("Invoice Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell131 = new PdfPCell();
                        cell131.AddElement(phrase11);
                        cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131.BorderWidthBottom = 0;
                        cell131.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131.Colspan = 1;
                        cell131.BorderWidthLeft = 0f;
                        cell131.BorderWidthRight = 0f;
                        cell131.PaddingTop = -5;
                        cell131.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131);

                        var phrase11v = new Phrase();
                        phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                            BillDate.Year, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell131v = new PdfPCell();
                        cell131v.AddElement(phrase11v);
                        cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131v.BorderWidthBottom = 0;
                        cell131v.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131v.Colspan = 1;
                        cell131v.BorderWidthLeft = 0;
                        cell131v.BorderWidthRight = .2f;
                        cell131v.PaddingTop = -5;
                        cell131v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131v);


                        var phraseim = new Phrase();
                        phraseim.Add(new Chunk("Invoice Month", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseim);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10im = new Phrase();
                        phrase10im.Add(new Chunk(": " + GetMonthName() + "'" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10im);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);


                        var phraseperiod = new Phrase();
                        phraseperiod.Add(new Chunk("Invoice Period", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseperiod);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        string Fromdate = txtfromdate.Text;
                        string Todate = txttodate.Text;


                        var phrase10p = new Phrase();
                        phrase10p.Add(new Chunk(": " + Fromdate + " to " + Todate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10p);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);





                        if (POContent.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Work Order No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + POContent, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (PODate.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Work Order Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + PODate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (Location.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Site At", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + Location, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (ReversCharges.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Revers Charges", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);
                            if (ReversCharges == "True")
                            {
                                ReversCharges = "Yes";
                            }
                            else
                            {
                                ReversCharges = "No";
                            }

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + ReversCharges, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        addressData = dtclientaddress.Rows[0]["ShiptoLine1"].ToString();

                        {
                            PdfPCell clientaddrhno2 = new PdfPCell(new Paragraph("Shipping Address", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno2.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno2.BorderWidthBottom = 0;
                            clientaddrhno2.BorderWidthTop = 1;
                            clientaddrhno2.BorderWidthLeft = .2f;
                            clientaddrhno2.BorderWidthRight = 0.2f;
                            clientaddrhno2.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable2.AddCell(clientaddrhno2);
                        }
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable2.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ShiptoLine2"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable2.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ShiptoLine3"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable2.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ShiptoLine4"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcolony.Colspan = 3;
                            clientcolony.BorderWidthBottom = 0;
                            clientcolony.BorderWidthTop = 0;
                            clientcolony.BorderWidthLeft = .2f;
                            clientcolony.BorderWidthRight = 0.2f;
                            clientcolony.BorderColor = BaseColor.BLACK;
                            //clientcolony.PaddingLeft = 20;
                            tempTable2.AddCell(clientcolony);
                        }
                        addressData = dtclientaddress.Rows[0]["ShiptoLine5"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcity.Colspan = 3;
                            clientcity.BorderWidthBottom = 0;
                            clientcity.BorderWidthTop = 0;
                            clientcity.BorderWidthLeft = .2f;
                            clientcity.BorderWidthRight = 0.2f;
                            clientcity.BorderColor = BaseColor.BLACK;
                            //  clientcity.PaddingLeft = 20;
                            tempTable2.AddCell(clientcity);
                        }
                        addressData = dtclientaddress.Rows[0]["ShiptoLine6"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstate.Colspan = 3;
                            clientstate.BorderWidthBottom = 0;
                            clientstate.BorderWidthTop = 0;
                            clientstate.BorderWidthLeft = .2f;
                            clientstate.BorderWidthRight = 0.2f;
                            clientstate.BorderColor = BaseColor.BLACK;
                            // clientstate.PaddingLeft = 20;
                            tempTable2.AddCell(clientstate);
                        }
                        if (ShipToState.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + ShipToState, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);
                        }


                        if (ShipToStateCode.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);


                            clietnpin = new PdfPCell(new Paragraph(" : " + ShipToStateCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);

                        }

                        if (GSTIN.Length > 0)
                        {
                            // PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + ShipToGSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            // clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            // clietnpin.Colspan = 2;
                            // clietnpin.Border = 0;
                            // //clietnpin.PaddingTop = 0;
                            // clietnpin.BorderWidthBottom = 0;
                            //clietnpin.BorderWidthTop = 0;
                            // clietnpin.BorderWidthLeft = 0;
                            // clietnpin.BorderWidthRight = 0.2f;
                            // //clietnpin.BorderColor = BaseColor.BLACK;
                            // // clietnpin.PaddingLeft = 120;
                            // tempTable2.AddCell(clietnpin);        

                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);


                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);

                        }
                        PdfPCell childTable2 = new PdfPCell(tempTable2);
                        childTable2.Border = 0;
                        childTable2.Colspan = 2;
                        //childTable2.FixedHeight = 100;
                        childTable2.HorizontalAlignment = 0;
                        address.AddCell(childTable2);
                        // address.AddCell(celll);
                        document.Add(address);




                        PdfPTable address1 = new PdfPTable(2);
                        address1.TotalWidth = 580f;
                        address1.LockedWidth = true;
                        float[] addreslogo1 = new float[] { 0.6f, 2f };
                        address1.SetWidths(addreslogo1);


                        PdfPCell cellser = new PdfPCell(new Phrase(" Dear Sir/Madam,\n\n", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cellser.HorizontalAlignment = 0;
                        cellser.BorderWidthBottom = 0;
                        cellser.BorderWidthLeft = .2f;
                        cellser.BorderWidthTop = 0.2f;
                        cellser.Colspan = 2;
                        cellser.BorderWidthRight = 0.2f;
                        cellser.BorderColor = BaseColor.BLACK;
                        address1.AddCell(cellser);

                        PdfPCell cellserVal = new PdfPCell();
                        var cellserValvar = new Phrase();
                        cellserValvar.Add(new Chunk("We are presenting our bill for the month of ", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                        cellserValvar.Add(new Chunk(GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 12, Font.BOLDITALIC, BaseColor.BLACK)));
                        cellserValvar.Add(new Chunk(" towards services provided.The details of the bill are given below", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                        cellserVal.AddElement(cellserValvar);
                        cellserVal.HorizontalAlignment = 0;
                        cellserVal.BorderWidthBottom = 0;
                        cellserVal.BorderWidthLeft = 0.2f;
                        cellserVal.Colspan = 2;
                        cellserVal.PaddingTop = -12;
                        cellserVal.BorderWidthTop = 0;
                        cellserVal.BorderWidthRight = .2f;
                        cellserVal.BorderColor = BaseColor.BLACK;
                        address1.AddCell(cellserVal);

                        cellser = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cellser.HorizontalAlignment = 0;
                        cellser.BorderWidthBottom = 0.2f;
                        cellser.BorderWidthLeft = .2f;
                        cellser.BorderWidthTop = 0;
                        cellser.Colspan = 2;
                        cellser.FixedHeight = 8;
                        cellser.BorderWidthRight = 0.2f;
                        cellser.BorderColor = BaseColor.BLACK;
                        address1.AddCell(cellser);
                        document.Add(address1);
                        #endregion


                        #region
                        int countGrid = gvClientBilling.Rows.Count;

                        DataTable dtheadings = null;
                        var SPNameD = "GetInvHeadings";
                        Hashtable htheadings = new Hashtable();
                        htheadings.Add("@clientid", ddlclientid.SelectedValue);
                        // htheadings.Add("@LastDay", DtLastDay);
                        dtheadings = config.ExecuteAdaptorAsyncWithParams(SPNameD, htheadings).Result;

                        string InvDescription = "";
                        string InvNoOfEmps = "";
                        string InvNoofDuties = "";
                        string InvPayrate = "";
                        string InvAmount = "";
                        string InvDescriptionVisible = "N";
                        string InvNoOfEmpsVisible = "N";
                        string InvNoofDutiesVisible = "N";
                        string InvPayrateVisible = "N";
                        string InvAmountVisible = "N";
                        string HSNNo = "";

                        if (dtheadings.Rows.Count > 0)
                        {
                            InvDescription = dtheadings.Rows[0]["InvDescription"].ToString();
                            InvNoOfEmps = dtheadings.Rows[0]["InvNoOfEmps"].ToString();
                            InvNoofDuties = dtheadings.Rows[0]["InvNoofDuties"].ToString();
                            InvPayrate = dtheadings.Rows[0]["InvPayrate"].ToString();
                            InvAmount = dtheadings.Rows[0]["InvAmount"].ToString();
                            InvDescriptionVisible = dtheadings.Rows[0]["InvDescriptionVisible"].ToString();
                            InvNoOfEmpsVisible = dtheadings.Rows[0]["InvNoOfEmpsVisible"].ToString();
                            InvNoofDutiesVisible = dtheadings.Rows[0]["InvNoofDutiesVisible"].ToString();
                            InvPayrateVisible = dtheadings.Rows[0]["InvPayrateVisible"].ToString();
                            InvAmountVisible = dtheadings.Rows[0]["InvAmountVisible"].ToString();
                        }




                        int colCount = 4;

                        if (InvDescriptionVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoOfEmpsVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvAmountVisible == "Y")
                        {
                            colCount += 1;
                        }


                        PdfPTable table = new PdfPTable(colCount);
                        table.TotalWidth = 580f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = 1;
                        //float[] colWidths = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.7f };



                        float[] colWidths = new float[] { };

                        if (colCount == 9)
                        {
                            colWidths = new float[] { 1f, 4f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 8)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 7)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 6)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            colWidths = new float[] { 1f, 6f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            colWidths = new float[] { 1f, 6f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            colWidths = new float[] { 1f, 6f, 2.7f };
                        }


                        table.SetWidths(colWidths);

                        string cellText;


                        cell = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        if (InvDescriptionVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvDescription, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }
                        cell = new PdfPCell(new Phrase("HSN/SAC Code", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("No Of Days in a Month", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        if (InvNoOfEmpsVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvNoOfEmps, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvNoofDuties, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvAmountVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvAmount, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        ////export rows from GridView to table
                        float noofshifts = 0;
                        int GridLine = 1;

                        ////export rows from GridView to table
                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 9; j++)
                                        {
                                            //fetch the column value of the current row
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthTop = 0;
                                                cell.MinimumHeight = 20;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (InvDescriptionVisible == "Y")
                                            {
                                                if (j == 1)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtempname"));

                                                    // Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));

                                                    cellText = label1.Text;

                                                    //create a new cell with column value
                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }

                                            }

                                            if (InvDescriptionVisible == "Y")
                                            {
                                                if (j == 2)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                                    Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));

                                                    string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                        "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.designid='" + labldesig.Text + "'";


                                                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(summaryQry).Result;
                                                    cellText = label1.Text;
                                                    if (dt.Rows.Count > 0)
                                                    {
                                                        if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                            cellText += "\n " + dt.Rows[0]["summary"].ToString() + " ";
                                                    }

                                                    //create a new cell with column value
                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }

                                            }

                                            if (j == 3)
                                            {
                                                string HSNN = "";
                                                TextBox LblHSNNo = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));

                                                HSNN = LblHSNNo.Text;

                                                cell = new PdfPCell(new Phrase(HSNN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }

                                            if (j == 4)
                                            {
                                                string Noofdaysinamonth = "";
                                                DropDownList LblHSNNo = (DropDownList)(gvClientBilling.Rows[rowIndex].FindControl("ddlnod"));

                                                Noofdaysinamonth = LblHSNNo.SelectedValue;

                                                cell = new PdfPCell(new Phrase(Noofdaysinamonth, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }

                                            if (InvNoOfEmpsVisible == "Y")
                                            {
                                                if (j == 5)
                                                {

                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                                    if (label1.Text == "0")
                                                    {
                                                        cellText = "";
                                                    }
                                                    else
                                                    {
                                                        cellText = label1.Text;
                                                    }
                                                    //create a new cell with column value


                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                            }


                                            if (InvPayrateVisible == "Y")
                                            {

                                                if (j == 6)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                    TextBox label2 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                    Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                    string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                                       "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.designid='" + labldesig.Text + "'";

                                                    //Duty Hrs removed for KL on 27/05/2015
                                                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(dutyhrsQry).Result;
                                                    cellText = label1.Text;

                                                    //create a new cell with column value
                                                    if (cellText == "0")
                                                    {
                                                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 1;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = 0f;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                    else
                                                    {
                                                        cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 1;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderWidthRight = 0f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }

                                                }

                                            }


                                            if (InvNoofDutiesVisible == "Y")
                                            {
                                                if (j == 7)
                                                {

                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                                    if (label1.Text == "0")
                                                    {
                                                        cellText = "";
                                                    }
                                                    else
                                                    {
                                                        cellText = label1.Text;
                                                    }
                                                    //create a new cell with column value


                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                            }

                                            if (InvAmountVisible == "Y")
                                            {
                                                if (j == 8)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                    cellText = label1.Text;
                                                    //create a new cell with column value

                                                    if (cellText == "0")
                                                    {
                                                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 2;
                                                        //cell.Border = 0;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = .2f;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                    else
                                                    {
                                                        cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 2;
                                                        //cell.Border = 0;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = .2f;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            GridLine++;
                        }

                        #region for space
                        PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty.HorizontalAlignment = 2;
                        Cellempty.Colspan = 1;
                        Cellempty.BorderWidthTop = 0;
                        Cellempty.BorderWidthRight = 0f;
                        Cellempty.BorderWidthLeft = .2f;
                        Cellempty.BorderWidthBottom = 0;
                        // Cellempty.MinimumHeight = 5;
                        Cellempty.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty1.HorizontalAlignment = 2;
                        Cellempty1.Colspan = 1;
                        Cellempty1.BorderWidthTop = 0;
                        Cellempty1.BorderWidthRight = 0f;
                        Cellempty1.BorderWidthLeft = 0.2f;
                        Cellempty1.BorderWidthBottom = 0;
                        Cellempty1.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty6.HorizontalAlignment = 2;
                        Cellempty6.Colspan = 1;
                        Cellempty6.BorderWidthTop = 0;
                        Cellempty6.BorderWidthRight = 0f;
                        Cellempty6.BorderWidthLeft = .2f;
                        Cellempty6.BorderWidthBottom = 0;

                        Cellempty6.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty7.HorizontalAlignment = 2;
                        Cellempty7.Colspan = 1;
                        Cellempty7.BorderWidthTop = 0;
                        Cellempty7.BorderWidthRight = 0.2f;
                        Cellempty7.BorderWidthLeft = 0.2f;
                        Cellempty7.BorderWidthBottom = 0;
                        Cellempty7.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty2.HorizontalAlignment = 2;
                        Cellempty2.Colspan = 1;
                        Cellempty2.BorderWidthTop = 0;
                        Cellempty2.BorderWidthRight = 0f;
                        Cellempty2.BorderWidthLeft = 0.2f;
                        Cellempty2.BorderWidthBottom = 0;
                        Cellempty2.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty3.HorizontalAlignment = 2;
                        Cellempty3.Colspan = 1;
                        Cellempty3.BorderWidthTop = 0;
                        Cellempty3.BorderWidthRight = 0f;
                        Cellempty3.BorderWidthLeft = 0.2f;
                        Cellempty3.BorderWidthBottom = 0;
                        Cellempty3.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty4.HorizontalAlignment = 2;
                        Cellempty4.Colspan = 1;
                        Cellempty4.BorderWidthTop = 0;
                        Cellempty4.BorderWidthRight = 0f;
                        Cellempty4.BorderWidthLeft = 0.2f;
                        Cellempty4.BorderWidthBottom = 0;
                        Cellempty4.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty5.HorizontalAlignment = 2;
                        Cellempty5.Colspan = 1;
                        Cellempty5.BorderWidthTop = 0;
                        Cellempty5.BorderWidthRight = 0.2f;
                        Cellempty5.BorderWidthLeft = 0.2f;
                        Cellempty5.BorderWidthBottom = 0;
                        Cellempty5.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty8 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty8.HorizontalAlignment = 2;
                        Cellempty8.Colspan = 1;
                        Cellempty8.BorderWidthTop = 0;
                        Cellempty8.BorderWidthRight = 0.2f;
                        Cellempty8.BorderWidthLeft = 0.2f;
                        Cellempty8.BorderWidthBottom = 0;
                        Cellempty8.BorderColor = BaseColor.BLACK;



                        if (gvClientBilling.Rows.Count == 1)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 14; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                    //table.AddCell(Cellempty4);
                                    //table.AddCell(Cellempty5);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 11; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 2)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 13; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 11; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 3)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 12; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }

                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 4)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 11; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 9; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 5)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 6)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 9; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 7)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }

                        if (gvClientBilling.Rows.Count == 8)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }


                        if (gvClientBilling.Rows.Count == 9)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 4; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty8);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }

                            #endregion
                        }

                        #endregion

                        document.Add(table);

                        // tablelogo.AddCell(celll);


                        PdfPTable tempTable22 = new PdfPTable(colCount);
                        tempTable22.TotalWidth = 580f;
                        tempTable22.LockedWidth = true;
                        // float[] tempWidth22 = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.7f };//2.9f, 1.83f
                        float[] tempWidth22 = new float[] { };
                        if (colCount == 9)
                        {
                            tempWidth22 = new float[] { 1f, 4f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 8)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 7)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 6)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2.7f };
                        }
                        tempTable22.SetWidths(tempWidth22);

                        #region
                        if (RelChrgAmt > 0)
                        {

                            PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldz5.Colspan = colCount - 1;
                            celldz5.BorderWidthBottom = 0;
                            celldz5.BorderWidthLeft = .2f;
                            celldz5.BorderWidthTop = 0;
                            celldz5.BorderWidthRight = .2f;
                            celldz5.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz5);

                            PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldz6.BorderWidthBottom = 0;
                            celldz6.BorderWidthLeft = .2f;
                            celldz6.BorderWidthTop = 0;
                            celldz6.BorderWidthRight = .2f;
                            celldz6.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz6);
                        }

                        PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz1.Colspan = colCount - 1;
                        celldz1.BorderWidthBottom = 0;
                        celldz1.BorderWidthLeft = .2f;
                        celldz1.BorderWidthTop = .2f;
                        celldz1.BorderWidthRight = 0;
                        celldz1.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz1);

                        PdfPCell celldz4 = new PdfPCell(new Phrase(" " + totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz4.BorderWidthBottom = 0;
                        celldz4.BorderWidthLeft = 0.2f;
                        celldz4.BorderWidthTop = .2f;
                        celldz4.BorderWidthRight = .2f;
                        celldz4.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz4);

                        #region When Extradata check is false and STcheck is false

                        if (Extradatacheck == true)
                        {
                            if (machinarycost > 0)
                            {
                                if (STMachinary == false)
                                {
                                    if (SCMachinary == false)
                                    {
                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == false)
                                {
                                    if (SCMaterial == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == false)
                                {
                                    if (SCMaintenance == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == false)
                                {
                                    if (SCExtraone == false)
                                    {
                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == false)
                                {
                                    if (SCExtratwo == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                        }
                        #endregion
                        #endregion

                        Fromdate = txtfromdate.Text;
                        Todate = txttodate.Text;

                        #region



                        #region
                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2;
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == true)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);


                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        #endregion

                        #region When Extra data is checked and STcheck is false and SCcheck is true

                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        #endregion
                        if (servicecharge > 0)//bSCType == true)
                        {
                            float scharge = servicecharge;
                            if (scharge > 0)
                            {
                                string SCharge = "";
                                if (bSCType == false)
                                {
                                    SCharge = ServiceCharge + "%";
                                }
                                else
                                {
                                    SCharge = ServiceCharge;
                                }


                                PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldc2.Colspan = colCount - 1;
                                celldc2.BorderWidthBottom = 0;
                                celldc2.BorderWidthLeft = .2f;
                                celldc2.BorderWidthTop = 0;
                                celldc2.BorderWidthRight = 0.2f;
                                celldc2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldc2);


                                PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldc4.BorderWidthBottom = 0;
                                celldc4.BorderWidthLeft = .2f;
                                celldc4.BorderWidthTop = 0;
                                celldc4.BorderWidthRight = .2f;
                                celldc4.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldc4);
                            }


                            if (STDiscountone == true)
                            {
                                if (discountone > 0)
                                {

                                    PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldMt1.Colspan = colCount - 1;
                                    celldMt1.BorderWidthBottom = 0;
                                    celldMt1.BorderWidthLeft = .2f;
                                    celldMt1.BorderWidthTop = 0;
                                    celldMt1.BorderWidthRight = .2f;
                                    celldMt1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt1);


                                    PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt3.BorderWidthBottom = 0;
                                    celldMt3.BorderWidthLeft = .2f;
                                    celldMt3.BorderWidthTop = 0;
                                    celldMt3.BorderWidthRight = .2f;
                                    celldMt3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt3);
                                }
                            }

                            if (STDiscounttwo == true)
                            {
                                if (discounttwo > 0)
                                {

                                    PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldMt1.BorderWidthBottom = 0;
                                    celldMt1.BorderWidthLeft = .2f;
                                    celldMt1.BorderWidthTop = 0;
                                    celldMt1.BorderWidthRight = .2f;
                                    celldMt1.BorderColor = BaseColor.BLACK;
                                    celldMt1.Colspan = colCount - 1;
                                    tempTable22.AddCell(celldMt1);

                                    PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt3.BorderWidthBottom = 0;
                                    celldMt3.BorderWidthLeft = .2f;
                                    celldMt3.BorderWidthTop = 0;
                                    celldMt3.BorderWidthRight = .2f;
                                    celldMt3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt3);
                                }
                            }



                            PdfPCell Cellb4tax = new PdfPCell(new Phrase("Total Before Tax", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            Cellb4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellb4tax.Colspan = colCount - 1;
                            Cellb4tax.BorderWidthBottom = 0;
                            Cellb4tax.BorderWidthLeft = .2f;
                            Cellb4tax.BorderWidthTop = 0;
                            Cellb4tax.BorderWidthRight = 0.2f;
                            Cellb4tax.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(Cellb4tax);


                            PdfPCell Cellb4tax1 = new PdfPCell(new Phrase(((servicecharge + totalamount) - (discountone + discounttwo)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            Cellb4tax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellb4tax1.BorderWidthBottom = 0;
                            Cellb4tax1.BorderWidthLeft = .2f;
                            Cellb4tax1.BorderWidthTop = 0;
                            Cellb4tax1.BorderWidthRight = .2f;
                            Cellb4tax1.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(Cellb4tax1);




                        }

                        if (STDiscountone == false)
                        {
                            if (discountone > 0)
                            {

                                PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = colCount - 1;
                                celldMt1.BorderWidthBottom = 0;
                                celldMt1.BorderWidthLeft = .2f;
                                celldMt1.BorderWidthTop = 0;
                                celldMt1.BorderWidthRight = .2f;
                                celldMt1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt1);


                                PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt3.BorderWidthBottom = 0;
                                celldMt3.BorderWidthLeft = .2f;
                                celldMt3.BorderWidthTop = 0;
                                celldMt3.BorderWidthRight = .2f;
                                celldMt3.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt3);
                            }
                        }
                        if (STDiscounttwo == false)
                        {
                            if (discounttwo > 0)
                            {

                                PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldMt1.BorderWidthBottom = 0;
                                celldMt1.BorderWidthLeft = .2f;
                                celldMt1.BorderWidthTop = 0;
                                celldMt1.BorderWidthRight = .2f;
                                celldMt1.BorderColor = BaseColor.BLACK;
                                celldMt1.Colspan = colCount - 1;
                                tempTable22.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt3.BorderWidthBottom = 0;
                                celldMt3.BorderWidthLeft = .2f;
                                celldMt3.BorderWidthTop = 0;
                                celldMt3.BorderWidthRight = .2f;
                                celldMt3.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt3);
                            }
                        }
                        //if (servicecharge > 0 && (discountone > 0 || discounttwo > 0)) 
                        //{
                        //    PdfPCell celldMt1 = new PdfPCell(new Phrase("Net Service Charge Claimed ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    celldMt1.BorderWidthBottom = 0;
                        //    celldMt1.BorderWidthLeft = .2f;
                        //    celldMt1.BorderWidthTop = 0;
                        //    celldMt1.BorderWidthRight = .2f;
                        //    celldMt1.BorderColor = BaseColor.BLACK;
                        //    celldMt1.Colspan = colCount - 1;
                        //    tempTable22.AddCell(celldMt1);

                        //    PdfPCell celldMt3 = new PdfPCell(new Phrase((servicecharge - (discounttwo + discountone)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    celldMt3.BorderWidthBottom = 0;
                        //    celldMt3.BorderWidthLeft = .2f;
                        //    celldMt3.BorderWidthTop = 0;
                        //    celldMt3.BorderWidthRight = .2f;
                        //    celldMt3.BorderColor = BaseColor.BLACK;
                        //    tempTable22.AddCell(celldMt3);
                        //}

                        #endregion

                        #region When Extra data is checked and STcheck is true
                        if (Extradatacheck == true)
                        {
                            //float machineryCostwithst = 0;
                            //if (lblMachinerywithst.Text.Length > 0)
                            //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                            if (machinarycost > 0)
                            {
                                if (STMachinary == true)
                                {
                                    if (SCMachinary == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;

                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            //float materialcostwithst = 0;
                            //if (lblMaterialwithst.Text.Length > 0)
                            //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                            if (materialcost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    if (SCMaterial == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            //float electricalcostwithst = 0;
                            //if (lblElectricalwithst.Text.Length > 0)
                            //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    if (SCMaintenance == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            //float extraamtwithst = 0;
                            //if (lblextraonewithst.Text.Length > 0)
                            //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                            if (extraonecost > 0)
                            {
                                if (STExtraone == true)
                                {
                                    if (SCExtraone == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            //float Extraamtwithst1 = 0;
                            //if (lblextratwowithst.Text.Length > 0)
                            //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    if (SCExtratwo == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                        }

                        #endregion

                        #region for taxes

                        if (!bIncludeST)
                        {

                            string scpercent = "";
                            if (bST75 == true)
                            {
                                scpercent = "3";
                            }
                            else
                            {
                                scpercent = SCPersent;
                            }

                            if (servicetax > 0)
                            {


                                PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0;
                                celldd2.BorderWidthRight = 0f;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                celldd2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (sbcess > 0)
                            {

                                string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + SBCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }


                            if (kkcess > 0)
                            {

                                string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                                PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + KKCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk1.Colspan = colCount - 1;
                                Cellmtcesskk1.BorderWidthBottom = 0;
                                Cellmtcesskk1.BorderWidthLeft = .2f;
                                Cellmtcesskk1.BorderWidthTop = 0;
                                Cellmtcesskk1.BorderWidthRight = 0f;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                Cellmtcesskk1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellmtcesskk1);

                                PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk2.BorderWidthBottom = 0;
                                Cellmtcesskk2.BorderWidthLeft = 0.2f;
                                Cellmtcesskk2.BorderWidthTop = 0;
                                Cellmtcesskk2.BorderWidthRight = .2f;
                                Cellmtcesskk2.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(Cellmtcesskk2);

                            }

                            #region for GST as on 17-6-2017

                            if (CGST > 0)
                            {
                                PdfPCell CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGST.Colspan = colCount - 1;
                                CellCGST.BorderWidthBottom = 0;
                                CellCGST.BorderWidthLeft = .2f;
                                CellCGST.BorderWidthTop = 0;
                                CellCGST.BorderWidthRight = 0f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCGST);

                                PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGSTAmt.BorderWidthBottom = 0;
                                CellCGSTAmt.BorderWidthLeft = 0.2f;
                                CellCGSTAmt.BorderWidthTop = 0;
                                CellCGSTAmt.BorderWidthRight = .2f;
                                CellCGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellCGSTAmt.PaddingBottom = 5;
                                //CellCGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellCGSTAmt);

                            }


                            if (SGST > 0)
                            {
                                PdfPCell CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGST.Colspan = colCount - 1;
                                CellSGST.BorderWidthBottom = 0;
                                CellSGST.BorderWidthLeft = .2f;
                                CellSGST.BorderWidthTop = 0;
                                CellSGST.BorderWidthRight = 0f;
                                // CellSGST.PaddingBottom = 5;
                                // CellSGST.PaddingTop = 5;
                                CellSGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellSGST);

                                PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGSTAmt.BorderWidthBottom = 0;
                                CellSGSTAmt.BorderWidthLeft = 0.2f;
                                CellSGSTAmt.BorderWidthTop = 0;
                                CellSGSTAmt.BorderWidthRight = .2f;
                                CellSGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellSGSTAmt.PaddingBottom = 5;
                                //CellSGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellSGSTAmt);


                            }

                            if (IGST > 0)
                            {
                                PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST.Colspan = colCount - 1;
                                CellIGST.BorderWidthBottom = 0;
                                CellIGST.BorderWidthLeft = .2f;
                                CellIGST.BorderWidthTop = 0;
                                CellIGST.BorderWidthRight = 0f;
                                // CellIGST.PaddingBottom = 5;
                                // CellIGST.PaddingTop = 5;
                                CellIGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST);

                                PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGSTAmt.BorderWidthBottom = 0;
                                CellIGSTAmt.BorderWidthLeft = 0.2f;
                                CellIGSTAmt.BorderWidthTop = 0;
                                CellIGSTAmt.BorderWidthRight = .2f;
                                CellIGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellIGSTAmt.PaddingBottom = 5;
                                //CellIGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellIGSTAmt);


                            }

                            if (Cess1 > 0)
                            {
                                PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1.Colspan = colCount - 1;
                                CellCess1.BorderWidthBottom = 0;
                                CellCess1.BorderWidthLeft = .2f;
                                CellCess1.BorderWidthTop = 0;
                                CellCess1.BorderWidthRight = 0f;
                                // CellCess1.PaddingBottom = 5;
                                // CellCess1.PaddingTop = 5;
                                CellCess1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess1);

                                PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1Amt.BorderWidthBottom = 0;
                                CellCess1Amt.BorderWidthLeft = 0.2f;
                                CellCess1Amt.BorderWidthTop = 0;
                                CellCess1Amt.BorderWidthRight = .2f;
                                CellCess1Amt.BorderColor = BaseColor.BLACK;
                                //CellCess1Amt.PaddingBottom = 5;
                                //CellCess1Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess1Amt);

                            }


                            if (Cess2 > 0)
                            {
                                PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2.Colspan = colCount - 1;
                                CellCess2.BorderWidthBottom = 0;
                                CellCess2.BorderWidthLeft = .2f;
                                CellCess2.BorderWidthTop = 0;
                                CellCess2.BorderWidthRight = 0f;
                                // CellCess2.PaddingBottom = 5;
                                // CellCess2.PaddingTop = 5;
                                CellCess2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess2);

                                PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2Amt.BorderWidthBottom = 0;
                                CellCess2Amt.BorderWidthLeft = 0.2f;
                                CellCess2Amt.BorderWidthTop = 0;
                                CellCess2Amt.BorderWidthRight = .2f;
                                CellCess2Amt.BorderColor = BaseColor.BLACK;
                                //CellCess2Amt.PaddingBottom = 5;
                                //CellCess2Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess2Amt);

                            }

                            #endregion for GST

                            if (cess > 0)
                            {

                                string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + CESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (shecess > 0)
                            {


                                string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                                PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + SHECESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf2.Colspan = colCount - 1;
                                celldf2.BorderWidthBottom = 0;
                                celldf2.BorderWidthLeft = .2f;
                                celldf2.BorderWidthTop = 0;
                                celldf2.BorderWidthRight = 0f;
                                celldf2.BorderColor = BaseColor.BLACK;
                                //celldf2.PaddingBottom = 5;
                                //celldf2.PaddingTop = 5;
                                tempTable22.AddCell(celldf2);


                                PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4.BorderWidthBottom = 0;
                                celldf4.BorderWidthLeft = 0.2f;
                                celldf4.BorderWidthTop = 0;
                                celldf4.BorderWidthRight = .2f;
                                celldf4.BorderColor = BaseColor.BLACK;
                                ////celldf4.PaddingBottom = 5;
                                //celldf4.PaddingTop = 5;
                                //celldf4.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldf4);
                            }
                            float totaltaxamt = 0;
                            totaltaxamt = CGST + SGST + IGST;
                            if (totaltaxamt > 0)
                            {
                                PdfPCell celldfTax2 = new PdfPCell(new Phrase("Total Tax Amount", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldfTax2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldfTax2.Colspan = colCount - 1;
                                celldfTax2.BorderWidthBottom = 0;
                                celldfTax2.BorderWidthLeft = .2f;
                                celldfTax2.BorderWidthTop = 0;
                                celldfTax2.BorderWidthRight = 0f;
                                celldfTax2.BorderColor = BaseColor.BLACK;
                                //celldfTax2.PaddingBottom = 5;
                                //celldfTax2.PaddingTop = 5;
                                //tempTable22.AddCell(celldfTax2);

                                PdfPCell celldf4tax = new PdfPCell(new Phrase(totaltaxamt.ToString("#,##0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldf4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4tax.BorderWidthBottom = 0;
                                celldf4tax.BorderWidthLeft = 0.2f;
                                celldf4tax.BorderWidthTop = 0;
                                celldf4tax.BorderWidthRight = .2f;
                                celldf4tax.BorderColor = BaseColor.BLACK;
                                ////celldf4tax.PaddingBottom = 5;
                                //celldf4tax.PaddingTop = 5;
                                //celldf4tax.BorderColor = BaseColor.BLACK;
                                //tempTable22.AddCell(celldf4tax);
                            }
                        }


                        #endregion for taxes


                        PdfPCell Cellgrandamount = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellgrandamount.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Cellgrandamount.Colspan = colCount - 1;
                        Cellgrandamount.BorderWidthBottom = 0;
                        Cellgrandamount.BorderWidthLeft = .2f;
                        Cellgrandamount.BorderWidthTop = 0;
                        Cellgrandamount.BorderWidthRight = 0f;
                        // CellSGST.PaddingBottom = 5;
                        // CellSGST.PaddingTop = 5;
                        Cellgrandamount.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(Cellgrandamount);

                        PdfPCell Cellgrandamountv = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellgrandamountv.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Cellgrandamountv.BorderWidthBottom = 0;
                        Cellgrandamountv.BorderWidthLeft = 0.2f;
                        Cellgrandamountv.BorderWidthTop = 0.2f;
                        Cellgrandamountv.BorderWidthRight = .2f;
                        Cellgrandamountv.BorderColor = BaseColor.BLACK;
                        //CellSGSTAmt.PaddingBottom = 5;
                        //CellSGSTAmt.PaddingTop = 5;
                        tempTable22.AddCell(Cellgrandamountv);



                        cell = new PdfPCell(new Phrase(" Amount In Words: ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderColor = BaseColor.BLACK;
                        cell.Colspan = colCount;
                        tempTable22.AddCell(cell);

                        string Amountinwords = NumberToEnglish.Instance.changeNumericToWords(Grandtotal.ToString());

                        cell = new PdfPCell(new Phrase(" " + lblamtinwords.Text.Trim() + "", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = colCount;
                        cell.BorderColor = BaseColor.BLACK;
                        cell.MinimumHeight = 23;
                        tempTable22.AddCell(cell);

                        document.Add(tempTable22);

                        #region footer

                        PdfPTable Addterms = new PdfPTable(6);
                        Addterms.TotalWidth = 580f;
                        Addterms.LockedWidth = true;
                        float[] widthrerms = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                        Addterms.SetWidths(widthrerms);

                        //if (notes.Length > 0)
                        //{
                        //    cell = new PdfPCell(new Phrase(notes, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    cell.HorizontalAlignment = 0;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.Colspan = 6;
                        //    cell.SetLeading(0, 1.3f);
                        //    cell.BorderColor = BaseColor.BLACK;
                        //    Addterms.AddCell(cell);
                        //}

                        if (BankAcNumber.Length > 0 || BankName.Length > 0 || IFSCCode.Length > 0 || BranchName.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("Bank Details", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 6;
                            // cell.SetLeading(0, 1.3f);
                            cell.BorderColor = BaseColor.BLACK;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead5 = new Paragraph();
                            CcellHead5.Add(new Chunk("Bank NAME : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead5.Add(new Chunk(BankName, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead5);
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.PaddingTop = -3f;
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead6 = new Paragraph();
                            CcellHead6.Add(new Chunk("A/C No : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead6.Add(new Chunk(BankAcNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead6);
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            cell.PaddingTop = -3f;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead1 = new Paragraph();
                            CcellHead1.Add(new Chunk("Branch : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead1.Add(new Chunk(BranchName, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead1);
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            cell.PaddingTop = -3f;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead2 = new Paragraph();
                            CcellHead2.Add(new Chunk("IFSC Code : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead2.Add(new Chunk(IFSCCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead2);
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            cell.PaddingTop = -3f;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            Addterms.AddCell(cell);
                        }
                        else
                        {
                            cell = new PdfPCell(new Phrase(BillDesc, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 6;
                            cell.SetLeading(0, 1.3f);
                            cell.BorderColor = BaseColor.BLACK;
                            Addterms.AddCell(cell);
                        }


                        PdfPTable Childterms = new PdfPTable(3);
                        Childterms.TotalWidth = 335f;
                        Childterms.LockedWidth = true;
                        float[] Celters = new float[] { 1.5f, 2f, 2f };
                        Childterms.SetWidths(Celters);


                        #region for payment terms


                        cell = new PdfPCell(new Phrase(companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        // cell.PaddingTop = 7;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        if (Bdt.Rows.Count > 0)
                        {


                            if (HSNNumber.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("HSN NUMBER", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);


                                cell = new PdfPCell(new Paragraph(": " + HSNNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }



                            if (SACCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("SAC CODE", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);

                                cell = new PdfPCell(new Paragraph(": " + SACCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }


                        if (PANNO.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PAN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PANNO, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }

                        if (Bdt.Rows.Count > 0)
                        {
                            if (OurGSTIN.Length > 0)
                            {


                                cell = new PdfPCell(new Phrase(OurGSTINAlias, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0f;
                                cell.BorderWidthLeft = .2f;
                                cell.Colspan = 1;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);


                                cell = new PdfPCell(new Phrase(": " + OurGSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }
                        if (Servicetax.Length > 0)
                        {


                            cell = new PdfPCell(new Phrase("SER. TAX REG.NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Servicetax, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Category.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("SC-CATEGORY", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Category, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }
                        if (PFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PFNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Esino.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Esino, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (CINNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("CIN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CINNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (MSMENO.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("MSME NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + MSMENO, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        cell = new PdfPCell(new Phrase("\n\n\nCustomer's seal and signature", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthLeft = .2f;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 5f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        // Childterms.AddCell(cell);




                        #endregion for payment terms


                        PdfPCell Chid3 = new PdfPCell(Childterms);
                        Chid3.Border = 0;
                        Chid3.Colspan = 3;
                        Chid3.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid3);



                        PdfPTable chilk = new PdfPTable(3);
                        chilk.TotalWidth = 245f;
                        chilk.LockedWidth = true;
                        float[] Celterss = new float[] { 2.2f, 2f, 2.7f };
                        chilk.SetWidths(Celterss);




                        cell = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0;
                        cell.PaddingTop = 10f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);

                        cell = new PdfPCell(new Phrase("\n\n\n Authorised Signatory", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);



                        cell = new PdfPCell(new Phrase("Computer Generated Invoice and Requires No Signature", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        //chilk.AddCell(cell);


                        PdfPCell Chid4 = new PdfPCell(chilk);
                        Chid4.Border = 0;
                        Chid4.Colspan = 3;
                        Chid4.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid4);


                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 6;
                        // Addterms.AddCell(cell);

                        document.Add(Addterms);


                        #endregion
                        #endregion


                        PdfPTable Remarkscell = new PdfPTable(2);
                        Remarkscell.TotalWidth = 255f;
                        Remarkscell.LockedWidth = true;
                        float[] widtlogoCI = new float[] { 2f, 2f };
                        Remarkscell.SetWidths(widtlogoCI);

                        cellemp1 = new PdfPCell(new Paragraph(ExtraRemarks, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellemp1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellemp1.Colspan = 2;
                        cellemp1.BorderWidthTop = 0;
                        cellemp1.BorderWidthBottom = 0;
                        cellemp1.BorderWidthLeft = 0;
                        cellemp1.BorderWidthRight = 0;
                        cellemp1.BorderColor = BaseColor.BLACK;
                        cellemp1.PaddingBottom = 15;
                        Remarkscell.AddCell(cellemp1);

                        Remarkscell.WriteSelectedRows(0, -1, document.RightMargin + 15, document.BottomMargin + 280, content);

                        Rectangle rectangle = new Rectangle(document.PageSize);
                        #endregion
                    }

                    document.Close();

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        public void Downloadannexure(Document document, MemoryStream ms)
        {
            int month = 0;
            int font = Convert.ToInt32(ddlfont.SelectedValue);

            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    int m = 0;
                    int Copycount = 1;

                    if (chkcopy.Checked == true)
                    {
                        Copycount = 2;
                    }

                    for (m = 0; m < Copycount; m++)
                    {
                        document.NewPage();
                        string CopyName = "";
                        if (chkcopy.Checked == true)
                        {
                            if (m == 0)
                            {
                                CopyName = "ORIGINAL FOR RECIPIENT";
                            }
                            if (m == 1)
                            {
                                CopyName = "DUPLICATE FOR SUPPLIER";
                            }
                        }
                        PdfPCell cell;
                        #region for PDf
                        Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                        PdfWriter writer = PdfWriter.GetInstance(document, ms);

                        document.Open();
                        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                        #region for CompanyInfo
                        string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";

                        DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        string companyName = "Your Company Name";
                        string companyAddress = "Your Company Address";
                        string companyaddressline = " ";
                        string emailid = "";
                        string website = "";
                        string phoneno = "";
                        string PANNO = "";
                        string PFNo = "";
                        string Esino = "";
                        string Servicetax = "";
                        string notes = "";
                        string ServiceText = "";
                        string PSARARegNo = "";
                        string Category = "";
                        string HSNNumber = "";
                        string SACCode = "";
                        string BillDesc = "";
                        string BankName = "";
                        string BankAcNumber = "";
                        string IFSCCode = "";
                        string BranchName = "";
                        string CINNo = "";
                        string MSMENo = "";

                        if (compInfo.Rows.Count > 0)
                        {
                            companyName = compInfo.Rows[0]["CompanyName"].ToString();
                            companyAddress = compInfo.Rows[0]["Address"].ToString();
                            //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                            companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                            MSMENo = compInfo.Rows[0]["MSMENo"].ToString();
                            PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                            PFNo = compInfo.Rows[0]["PFNo"].ToString();
                            Category = compInfo.Rows[0]["Category"].ToString();
                            Esino = compInfo.Rows[0]["ESINo"].ToString();
                            Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                            emailid = compInfo.Rows[0]["Emailid"].ToString();
                            website = compInfo.Rows[0]["Website"].ToString();
                            phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                            notes = compInfo.Rows[0]["notes"].ToString();
                            HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                            SACCode = compInfo.Rows[0]["SACCode"].ToString();
                            BillDesc = compInfo.Rows[0]["BillDesc"].ToString();
                            BankName = compInfo.Rows[0]["Bankname"].ToString();
                            BranchName = compInfo.Rows[0]["BranchName"].ToString();
                            BankAcNumber = compInfo.Rows[0]["bankaccountno"].ToString();
                            IFSCCode = compInfo.Rows[0]["IfscCode"].ToString();
                            CINNo = compInfo.Rows[0]["CINNo"].ToString();
                            // PSARARegNo = compInfo.Rows[0]["PSARARegNo"].ToString();
                        }

                        #endregion

                        DateTime DtLastDay = DateTime.Now;
                        if (Chk_Month.Checked == false)
                        {
                            DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                        }
                        if (Chk_Month.Checked == true)
                        {
                            DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        }
                        var ContractID = "";


                        #region  Begin Get Contract Id Based on The Last Day

                        Hashtable HtGetContractID = new Hashtable();
                        var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                        HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                        HtGetContractID.Add("@LastDay", DtLastDay);
                        DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                        if (DTContractID.Rows.Count > 0)
                        {
                            ContractID = DTContractID.Rows[0]["contractid"].ToString();

                        }
                        #endregion

                        #region
                        string SqlQuryForServiCharge = "select ContractId,servicecharge,PODate, convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,'' billnotes,isnull(ServiceChargeDesc,'') as ServiceChargeDesc from contracts  where " +
                            " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                        DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                        string Typeofwork = "";
                        string BillNotes = "";
                        string ServiceCharge = "0";
                        string strSCType = "";
                        string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                        bool bSCType = false;
                        string strIncludeST = "";
                        string ContractStartDate = "";
                        string strST75 = "";
                        bool bIncludeST = false;
                        bool bST75 = false;
                        string POContent = "";
                        string PODate = "";
                        string CnPFNo = "";
                        string CnESINo = "";
                        string Location = "";
                        string ReversCharges = "";
                        string ServiceChargeDesc = "";
                        // string ServiceTaxCategory = "";
                        if (DtServicecharge.Rows.Count > 0)
                        {
                            PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                            {
                                ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                            }
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                            {
                                strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                            }
                            string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                            if (tempDescription.Trim().Length > 0)
                            {
                                strDescription = tempDescription;
                            }
                            if (strSCType.Length > 0)
                            {
                                bSCType = Convert.ToBoolean(strSCType);
                            }
                            strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                            strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                            ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                            if (strIncludeST == "True")
                            {
                                bIncludeST = true;
                            }
                            if (strST75 == "True")
                            {
                                bST75 = true;
                            }
                            POContent = DtServicecharge.Rows[0]["pono"].ToString();
                            Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                            BillNotes = DtServicecharge.Rows[0]["BillNotes"].ToString();
                            // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                            string tempServiceDesc = DtServicecharge.Rows[0]["ServiceChargeDesc"].ToString();
                            if (tempServiceDesc.Trim().Length > 0)
                            {
                                ServiceChargeDesc = tempServiceDesc;
                            }
                        }

                        #endregion

                        #region

                        string selectclientaddress = "select isnull(sg.segname,'') as segname,c.*, s.state as Statename,s.GSTStateCode,gst.gstno,gst.GSTAddress,s1.state as ShipState,s1.GSTStateCode as ShipToStateCode1 from clients c left join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin left join states s1 on s1.stateid=c.ShipToState where clientid= '" + ddlclientid.SelectedValue + "'";
                        DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
                        string OurGSTIN = "";
                        string GSTIN = "";
                        string StateCode = "0";
                        string State = "";
                        string ShipToGSTIN = "";
                        string ShipToStateCode = "0";
                        string ShipToState = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                            StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                            GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                            State = dtclientaddress.Rows[0]["Statename"].ToString();
                            Location = dtclientaddress.Rows[0]["Location"].ToString();


                            ShipToStateCode = dtclientaddress.Rows[0]["ShipToStateCode1"].ToString();
                            ShipToGSTIN = dtclientaddress.Rows[0]["ShipToGSTIN"].ToString();
                            ShipToState = dtclientaddress.Rows[0]["ShipState"].ToString();
                        }

                        string SelectBillNo = string.Empty;
                        if (ddlType.SelectedIndex == 0)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                        }
                        else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                        }
                        DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                        string BillNo = "";
                        string DisplayBillNo = "";
                        string area = "";
                        string ExtraRemarks = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            area = dtclientaddress.Rows[0]["segname"].ToString();
                        }

                        DateTime BillDate;
                        DateTime DueDate;


                        #region Variables for data Fields as on 11/03/2014 by venkat


                        float servicecharge = 0;
                        float servicetax = 0;
                        float cess = 0;
                        float sbcess = 0;
                        float kkcess = 0;


                        #region for GST on 17-6-2017 by swathi

                        float CGST = 0;
                        float SGST = 0;
                        float IGST = 0;
                        float Cess1 = 0;
                        float Cess2 = 0;
                        float CGSTPrc = 0;
                        float SGSTPrc = 0;
                        float IGSTPrc = 0;
                        float Cess1Prc = 0;
                        float Cess2Prc = 0;

                        #endregion for GST on 17-6-2017 by swathi


                        float shecess = 0;
                        float totalamount = 0;
                        float Grandtotal = 0;

                        float ServiceTax75 = 0;
                        float ServiceTax25 = 0;

                        float machinarycost = 0;
                        float materialcost = 0;
                        float maintenancecost = 0;
                        float extraonecost = 0;
                        float extratwocost = 0;
                        float discountone = 0;
                        float discounttwo = 0;

                        string machinarycosttitle = "";
                        string materialcosttitle = "";
                        string maintenancecosttitle = "";
                        string extraonecosttitle = "";
                        string extratwocosttitle = "";
                        string discountonetitle = "";
                        string discounttwotitle = "";

                        bool Extradatacheck = false;
                        bool ExtraDataSTcheck = false;

                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;

                        string strExtradatacheck = "";
                        string strExtrastcheck = "";

                        string strSTMachinary = "";
                        string strSTMaterial = "";
                        string strSTMaintenance = "";
                        string strSTExtraone = "";
                        string strSTExtratwo = "";

                        string strSCMachinary = "";
                        string strSCMaterial = "";
                        string strSCMaintenance = "";
                        string strSCExtraone = "";
                        string strSCExtratwo = "";

                        string strSTDiscountone = "";
                        string strSTDiscounttwo = "";

                        float staxamtonservicecharge = 0;
                        float RelChrgAmt = 0;


                        #endregion

                        DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        // for both "1/1/2000" or "25/1/2000" formats
                        string billdt = dtn.ToString("MM/dd/yyyy");

                        string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                        DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                        string CGSTAlias = "";
                        string SGSTAlias = "";
                        string IGSTAlias = "";
                        string Cess1Alias = "";
                        string Cess2Alias = "";
                        string GSTINAlias = "";
                        string OurGSTINAlias = "";

                        string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                        DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                        string SCPersent = "";
                        if (DtTaxes.Rows.Count > 0)
                        {
                            SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                            CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                            SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                            IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                            Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                            Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                            GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                            OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        }
                        else
                        {
                            lblResult.Text = "There Is No Tax Values For Generating Bills ";
                            return;
                        }


                        if (DtBilling.Rows.Count > 0)
                        {

                            ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                            BillNo = DtBilling.Rows[0]["billno"].ToString();
                            DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                            BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                            if (ddlType.SelectedIndex == 0)
                            {
                                DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                                {
                                    ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                                {
                                    ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                                {
                                    servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                                {
                                    RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                                }
                            }

                            else
                            {
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                                {
                                    servicecharge = float.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                                }
                            }



                            #region Begin New code for values taken from database as on 11/03/2014 by venkat

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                            {
                                totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                            {
                                servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                            {
                                sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                            {
                                kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                            }

                            #region for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                            {
                                CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                            {
                                SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                            {
                                IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                            {
                                Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                            {
                                Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                            {
                                CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                            {
                                SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                            {
                                IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                            {
                                Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                            {
                                Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                            }

                            #endregion for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                            {
                                cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                            {
                                shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                            {
                                Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                            {
                                machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                            {
                                materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                            {
                                maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                            {
                                extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                            {
                                extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                            {
                                discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                            {
                                discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                            }

                            machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                            materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                            maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                            extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                            extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                            discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                            discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                            {
                                strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                                if (strExtradatacheck == "True")
                                {
                                    Extradatacheck = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                            {
                                strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                                if (strExtrastcheck == "True")
                                {
                                    ExtraDataSTcheck = true;
                                }
                            }



                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                            {
                                strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                                if (strSTMachinary == "True")
                                {
                                    STMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                            {
                                strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                                if (strSTMaterial == "True")
                                {
                                    STMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                            {
                                strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                                if (strSTMaintenance == "True")
                                {
                                    STMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                            {
                                strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                                if (strSTExtraone == "True")
                                {
                                    STExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                            {
                                strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                                if (strSTExtratwo == "True")
                                {
                                    STExtratwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                            {
                                strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                                if (strSCMachinary == "True")
                                {
                                    SCMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                            {
                                strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                                if (strSCMaterial == "True")
                                {
                                    SCMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                            {
                                strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                                if (strSCMaintenance == "True")
                                {
                                    SCMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                            {
                                strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                                if (strSCExtraone == "True")
                                {
                                    SCExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                            {
                                strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                                if (strSCExtratwo == "True")
                                {
                                    SCExtratwo = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                            {
                                staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                            }

                            #endregion
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                            return;
                        }
                        string Year = DateTime.Now.Year.ToString();
                        #endregion

                        document.AddTitle(companyName);
                        document.AddAuthor("DIYOS");
                        document.AddSubject("Invoice");
                        document.AddKeywords("Keyword1, keyword2, …");
                        PdfContentByte content = writer.DirectContent;
                        PdfPTable tablelogo = new PdfPTable(2);
                        tablelogo.TotalWidth = 580f;
                        tablelogo.LockedWidth = true;
                        float[] widtlogo = new float[] { 0.4f, 2f };
                        tablelogo.SetWidths(widtlogo);
                        if (chkletterhead.Checked == true)
                        {
                            PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                            CCompName.HorizontalAlignment = 1;
                            CCompName.Border = 0;
                            CCompName.Colspan = 2;
                            // CCompName.PaddingTop =50;
                            tablelogo.AddCell(CCompName);

                            PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            CCompAddress.HorizontalAlignment = 1;
                            CCompAddress.Border = 0;
                            CCompAddress.Colspan = 2;
                            // space between lines
                            CCompAddress.SetLeading(0f, 1.3f);
                            tablelogo.AddCell(CCompAddress);

                            PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellline.Border = 0;
                            cellline.Colspan = 2;
                            tablelogo.AddCell(cellline);
                            //For Space

                            PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celll.Border = 0;
                            celll.Colspan = 2;
                            celll.PaddingTop = 30f;
                            tablelogo.AddCell(celll);
                            tablelogo.AddCell(celll);
                            document.Add(tablelogo);
                        }
                        else
                        {
                            string imagepath = Server.MapPath("~/assets/ExcetraLogo.jpg");
                            if (File.Exists(imagepath))
                            {
                                iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);
                                // gif2.Alignment = (iTextSharp.text.Image.ALIGN_CENTER | iTextSharp.text.Image.UNDERLYING);
                                gif2.Alignment = 1;
                                gif2.ScalePercent(80f);
                                gif2.SetAbsolutePosition(250f, 770f);
                                document.Add(gif2);
                            }





                            //tablelogo.AddCell(celll);


                            var FontColour = new BaseColor(178, 34, 34);
                            Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                            PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 15, Font.BOLD, BaseColor.BLACK)));
                            CCompName1.HorizontalAlignment = 0;
                            CCompName1.Colspan = 2;
                            CCompName1.PaddingTop = 25f;
                            CCompName1.Border = 0;
                            //CCompName1.PaddingLeft = 120;
                            tablelogo.AddCell(CCompName1);


                            PdfPCell CCompName = new PdfPCell(new Paragraph("" + companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CCompName.HorizontalAlignment = 0;
                            CCompName.Colspan = 2;
                            CCompName.Border = 0;
                            //CCompName.PaddingTop = 5f;
                            // CCompName.PaddingLeft = 120;
                            CCompName.SetLeading(0, 1.2f);
                            tablelogo.AddCell(CCompName);

                            if (emailid.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 0;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                //CCompName2.PaddingTop = 4f;
                                //CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (phoneno.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 0;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                //CCompName2.PaddingTop = 4f;
                                //CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (GSTIN.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.Border = 0;
                                // clietnpin.PaddingTop = 4f;
                                //clietnpin.BorderWidthBottom = 0;
                                //clietnpin.BorderWidthTop = 0;
                                //clietnpin.BorderWidthLeft = .2f;
                                //clietnpin.BorderWidthRight = 0;
                                //clietnpin.BorderColor = BaseColor.BLACK;
                                // clietnpin.PaddingLeft = 120;
                                //tablelogo.AddCell(clietnpin);                      

                            }

                            var CelGSTaddr = new Paragraph();
                            CelGSTaddr.Add(new Chunk(CopyName, FontFactory.GetFont(FontStyle, 11 - 1, Font.BOLD, BaseColor.BLACK)));
                            CelGSTaddr.SetLeading(0, 1f);
                            PdfPCell CellGstaddress = new PdfPCell();
                            CellGstaddress.AddElement(CelGSTaddr);
                            CellGstaddress.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellGstaddress.Colspan = 2;
                            CellGstaddress.BorderWidthTop = 0;
                            CellGstaddress.BorderWidthBottom = 0;
                            CellGstaddress.BorderWidthLeft = 0;
                            CellGstaddress.BorderWidthRight = 0;
                            CellGstaddress.PaddingLeft = 430;
                            tablelogo.AddCell(CellGstaddress);

                            document.Add(tablelogo);
                        }

                        PdfPTable address = new PdfPTable(5);
                        address.TotalWidth = 580f;
                        address.LockedWidth = true;
                        float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                        address.SetWidths(addreslogo);

                        PdfPCell Celemail = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
                        Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Celemail.Colspan = 5;
                        Celemail.FixedHeight = 20;
                        Celemail.BorderWidthTop = .2f;
                        Celemail.BorderWidthBottom = .2f;
                        Celemail.BorderWidthLeft = .2f;
                        Celemail.BorderWidthRight = .2f;
                        Celemail.BorderColor = BaseColor.BLACK;
                        address.AddCell(Celemail);

                        PdfPTable tempTable1 = new PdfPTable(3);
                        tempTable1.TotalWidth = 348f;
                        tempTable1.LockedWidth = true;
                        float[] tempWidth1 = new float[] { 0.8f, 2f, 2f };
                        tempTable1.SetWidths(tempWidth1);

                        string addressData = "";

                        addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();

                        PdfPCell clientaddrhno1 = new PdfPCell(new Paragraph("Billing Address", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno1.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno1.BorderWidthBottom = 0;
                        clientaddrhno1.BorderWidthTop = 0;
                        clientaddrhno1.BorderWidthLeft = .2f;
                        clientaddrhno1.BorderWidthRight = 0.2f;
                        clientaddrhno1.BorderColor = BaseColor.BLACK;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable1.AddCell(clientaddrhno1);
                        if (addressData.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable1.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcolony.Colspan = 3;
                            clientcolony.BorderWidthBottom = 0;
                            clientcolony.BorderWidthTop = 0;
                            clientcolony.BorderWidthLeft = .2f;
                            clientcolony.BorderWidthRight = 0.2f;
                            clientcolony.BorderColor = BaseColor.BLACK;
                            //clientcolony.PaddingLeft = 20;
                            tempTable1.AddCell(clientcolony);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcity.Colspan = 3;
                            clientcity.BorderWidthBottom = 0;
                            clientcity.BorderWidthTop = 0;
                            clientcity.BorderWidthLeft = .2f;
                            clientcity.BorderWidthRight = 0.2f;
                            clientcity.BorderColor = BaseColor.BLACK;
                            //  clientcity.PaddingLeft = 20;
                            tempTable1.AddCell(clientcity);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstate.Colspan = 3;
                            clientstate.BorderWidthBottom = 0;
                            clientstate.BorderWidthTop = 0;
                            clientstate.BorderWidthLeft = .2f;
                            clientstate.BorderWidthRight = 0.2f;
                            clientstate.BorderColor = BaseColor.BLACK;
                            // clientstate.PaddingLeft = 20;
                            tempTable1.AddCell(clientstate);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                        if (Bdt.Rows.Count > 0)
                        {

                            if (State.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.BorderWidthRight = 0;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);

                                clietnpin = new PdfPCell(new Paragraph(" : " + State, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = 0;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);
                            }


                            if (StateCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 1;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.BorderWidthRight = 0;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);


                                clietnpin = new PdfPCell(new Paragraph(" : " + StateCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthLeft = 0;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                tempTable1.AddCell(clietnpin);

                            }


                        }

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.Border = 0;
                            clietnpin.PaddingTop = 4f;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            //clietnpin.BorderColor = BaseColor.BLACK;
                            // clietnpin.PaddingLeft = 120;
                            tempTable1.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);

                        }

                        PdfPCell cellemp1 = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellemp1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellemp1.Colspan = 3;
                        cellemp1.BorderWidthTop = 0;
                        cellemp1.BorderWidthBottom = 0;
                        cellemp1.BorderWidthLeft = .2f;
                        cellemp1.BorderWidthRight = 0.2f;
                        cellemp1.BorderColor = BaseColor.BLACK;
                        cellemp1.PaddingBottom = 15;
                        //tempTable1.AddCell(cellemp1);

                        #region copy
                        PdfPCell childTable1 = new PdfPCell(tempTable1);
                        childTable1.Border = 0;
                        childTable1.Colspan = 3;
                        // childTable1.FixedHeight = 100;
                        childTable1.HorizontalAlignment = 0;

                        address.AddCell(childTable1);

                        PdfPTable tempTable2 = new PdfPTable(2);
                        tempTable2.TotalWidth = 232f;
                        tempTable2.LockedWidth = true;
                        float[] tempWidth2 = new float[] { 0.8f, 1.2f };
                        tempTable2.SetWidths(tempWidth2);



                        var phrase = new Phrase();
                        phrase.Add(new Chunk("Invoice No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell13 = new PdfPCell();
                        cell13.AddElement(phrase);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10 = new Phrase();
                        phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phrase11 = new Phrase();
                        phrase11.Add(new Chunk("Invoice Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell131 = new PdfPCell();
                        cell131.AddElement(phrase11);
                        cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131.BorderWidthBottom = 0;
                        cell131.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131.Colspan = 1;
                        cell131.BorderWidthLeft = 0f;
                        cell131.BorderWidthRight = 0f;
                        cell131.PaddingTop = -5;
                        cell131.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131);

                        var phrase11v = new Phrase();
                        phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                            BillDate.Year, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell131v = new PdfPCell();
                        cell131v.AddElement(phrase11v);
                        cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131v.BorderWidthBottom = 0;
                        cell131v.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131v.Colspan = 1;
                        cell131v.BorderWidthLeft = 0;
                        cell131v.BorderWidthRight = .2f;
                        cell131v.PaddingTop = -5;
                        cell131v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131v);


                        var phraseim = new Phrase();
                        phraseim.Add(new Chunk("Invoice Month", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseim);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10im = new Phrase();
                        phrase10im.Add(new Chunk(": " + GetMonthName() + "'" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10im);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);


                        var phraseperiod = new Phrase();
                        phraseperiod.Add(new Chunk("Invoice Period", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseperiod);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        string Fromdate = txtfromdate.Text;
                        string Todate = txttodate.Text;


                        var phrase10p = new Phrase();
                        phrase10p.Add(new Chunk(": " + Fromdate + " to " + Todate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10p);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);





                        if (POContent.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Work Order No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + POContent, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (PODate.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Work Order Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + PODate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        if (Location.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Site At", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            // tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + Location, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            // tempTable2.AddCell(cell13v);

                        }

                        if (ReversCharges.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Revers Charges", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);
                            if (ReversCharges == "True")
                            {
                                ReversCharges = "Yes";
                            }
                            else
                            {
                                ReversCharges = "No";
                            }

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + ReversCharges, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        addressData = dtclientaddress.Rows[0]["ShiptoLine1"].ToString();

                        {
                            PdfPCell clientaddrhno2 = new PdfPCell(new Paragraph("Shipping Address", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno2.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno2.BorderWidthBottom = 0;
                            clientaddrhno2.BorderWidthTop = 1;
                            clientaddrhno2.BorderWidthLeft = .2f;
                            clientaddrhno2.BorderWidthRight = 0.2f;
                            clientaddrhno2.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable2.AddCell(clientaddrhno2);
                        }
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable2.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ShiptoLine2"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable2.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ShiptoLine3"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable2.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ShiptoLine4"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcolony.Colspan = 3;
                            clientcolony.BorderWidthBottom = 0;
                            clientcolony.BorderWidthTop = 0;
                            clientcolony.BorderWidthLeft = .2f;
                            clientcolony.BorderWidthRight = 0.2f;
                            clientcolony.BorderColor = BaseColor.BLACK;
                            //clientcolony.PaddingLeft = 20;
                            tempTable2.AddCell(clientcolony);
                        }
                        addressData = dtclientaddress.Rows[0]["ShiptoLine5"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcity.Colspan = 3;
                            clientcity.BorderWidthBottom = 0;
                            clientcity.BorderWidthTop = 0;
                            clientcity.BorderWidthLeft = .2f;
                            clientcity.BorderWidthRight = 0.2f;
                            clientcity.BorderColor = BaseColor.BLACK;
                            //  clientcity.PaddingLeft = 20;
                            tempTable2.AddCell(clientcity);
                        }
                        addressData = dtclientaddress.Rows[0]["ShiptoLine6"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstate.Colspan = 3;
                            clientstate.BorderWidthBottom = 0;
                            clientstate.BorderWidthTop = 0;
                            clientstate.BorderWidthLeft = .2f;
                            clientstate.BorderWidthRight = 0.2f;
                            clientstate.BorderColor = BaseColor.BLACK;
                            // clientstate.PaddingLeft = 20;
                            tempTable2.AddCell(clientstate);
                        }
                        if (ShipToState.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + ShipToState, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);
                        }


                        if (ShipToStateCode.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);


                            clietnpin = new PdfPCell(new Paragraph(" : " + ShipToStateCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);

                        }

                        if (GSTIN.Length > 0)
                        {
                            // PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + ShipToGSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            // clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            // clietnpin.Colspan = 2;
                            // clietnpin.Border = 0;
                            // //clietnpin.PaddingTop = 0;
                            // clietnpin.BorderWidthBottom = 0;
                            //clietnpin.BorderWidthTop = 0;
                            // clietnpin.BorderWidthLeft = 0;
                            // clietnpin.BorderWidthRight = 0.2f;
                            // //clietnpin.BorderColor = BaseColor.BLACK;
                            // // clietnpin.PaddingLeft = 120;
                            // tempTable2.AddCell(clietnpin);        

                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);


                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable2.AddCell(clietnpin);

                        }
                        PdfPCell childTable2 = new PdfPCell(tempTable2);
                        childTable2.Border = 0;
                        childTable2.Colspan = 2;
                        //childTable2.FixedHeight = 100;
                        childTable2.HorizontalAlignment = 0;
                        address.AddCell(childTable2);
                        // address.AddCell(celll);
                        document.Add(address);




                        PdfPTable address1 = new PdfPTable(2);
                        address1.TotalWidth = 580f;
                        address1.LockedWidth = true;
                        float[] addreslogo1 = new float[] { 0.6f, 2f };
                        address1.SetWidths(addreslogo1);


                        PdfPCell cellser = new PdfPCell(new Phrase(" Dear Sir/Madam,\n\n", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cellser.HorizontalAlignment = 0;
                        cellser.BorderWidthBottom = 0;
                        cellser.BorderWidthLeft = .2f;
                        cellser.BorderWidthTop = 0.2f;
                        cellser.Colspan = 2;
                        cellser.BorderWidthRight = 0.2f;
                        cellser.BorderColor = BaseColor.BLACK;
                        address1.AddCell(cellser);

                        PdfPCell cellserVal = new PdfPCell();
                        var cellserValvar = new Phrase();
                        cellserValvar.Add(new Chunk("We are presenting our bill for the month of ", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                        cellserValvar.Add(new Chunk(GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 12, Font.BOLDITALIC, BaseColor.BLACK)));
                        cellserValvar.Add(new Chunk(" towards services provided.The details of the bill are given below", FontFactory.GetFont(FontStyle, 10, Font.ITALIC, BaseColor.BLACK)));
                        cellserVal.AddElement(cellserValvar);
                        cellserVal.HorizontalAlignment = 0;
                        cellserVal.BorderWidthBottom = 0;
                        cellserVal.BorderWidthLeft = 0.2f;
                        cellserVal.Colspan = 2;
                        cellserVal.PaddingTop = -12;
                        cellserVal.BorderWidthTop = 0;
                        cellserVal.BorderWidthRight = .2f;
                        cellserVal.BorderColor = BaseColor.BLACK;
                        address1.AddCell(cellserVal);

                        cellser = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cellser.HorizontalAlignment = 0;
                        cellser.BorderWidthBottom = 0.2f;
                        cellser.BorderWidthLeft = .2f;
                        cellser.BorderWidthTop = 0;
                        cellser.Colspan = 2;
                        cellser.FixedHeight = 8;
                        cellser.BorderWidthRight = 0.2f;
                        cellser.BorderColor = BaseColor.BLACK;
                        address1.AddCell(cellser);
                        document.Add(address1);
                        #endregion


                        #region
                        int countGrid = gvClientBilling.Rows.Count;

                        DataTable dtheadings = null;
                        var SPNameD = "GetInvHeadings";
                        Hashtable htheadings = new Hashtable();
                        htheadings.Add("@clientid", ddlclientid.SelectedValue);
                        // htheadings.Add("@LastDay", DtLastDay);
                        dtheadings = config.ExecuteAdaptorAsyncWithParams(SPNameD, htheadings).Result;

                        string InvDescription = "";
                        string InvNoOfEmps = "";
                        string InvNoofDuties = "";
                        string InvPayrate = "";
                        string InvAmount = "";
                        string InvDescriptionVisible = "N";
                        string InvNoOfEmpsVisible = "N";
                        string InvNoofDutiesVisible = "N";
                        string InvPayrateVisible = "N";
                        string InvAmountVisible = "N";
                        string HSNNo = "";

                        if (dtheadings.Rows.Count > 0)
                        {
                            InvDescription = dtheadings.Rows[0]["InvDescription"].ToString();
                            InvNoOfEmps = dtheadings.Rows[0]["InvNoOfEmps"].ToString();
                            InvNoofDuties = dtheadings.Rows[0]["InvNoofDuties"].ToString();
                            InvPayrate = dtheadings.Rows[0]["InvPayrate"].ToString();
                            InvAmount = dtheadings.Rows[0]["InvAmount"].ToString();
                            InvDescriptionVisible = dtheadings.Rows[0]["InvDescriptionVisible"].ToString();
                            InvNoOfEmpsVisible = dtheadings.Rows[0]["InvNoOfEmpsVisible"].ToString();
                            InvNoofDutiesVisible = dtheadings.Rows[0]["InvNoofDutiesVisible"].ToString();
                            InvPayrateVisible = dtheadings.Rows[0]["InvPayrateVisible"].ToString();
                            InvAmountVisible = dtheadings.Rows[0]["InvAmountVisible"].ToString();
                        }




                        int colCount = 5;

                        if (InvDescriptionVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoOfEmpsVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvAmountVisible == "Y")
                        {
                            colCount += 1;
                        }


                        PdfPTable table = new PdfPTable(colCount);
                        table.TotalWidth = 580f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = 1;
                        float[] colWidths = new float[] { };
                        if (colCount == 10)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2f, 2f, 2f, 2f, 2.2f, 2f, 2f, 2.7f };
                        }

                        if (colCount == 9)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2f, 2f, 2f, 2.2f, 2f, 2f, 2.7f };
                        }
                        if (colCount == 8)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 7)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 6)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            colWidths = new float[] { 1.5f, 5.5f, 2.7f };
                        }


                        table.SetWidths(colWidths);

                        string cellText;


                        cell = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("Designation", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Head Count", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase(" Monthly Billing Rate", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase(" Daily Billing Rate", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);



                        cell = new PdfPCell(new Phrase(" Days in a Month", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);



                        cell = new PdfPCell(new Phrase("OT Rate", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);



                        cell = new PdfPCell(new Phrase("Pay Days", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("O.T Hrs", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);



                        cell = new PdfPCell(new Phrase("Total Amount", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        ////export rows from GridView to table

                        int GridLine = 1;

                        ////export rows from GridView to table
                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 10; j++)
                                        {
                                            //fetch the column value of the current row
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthTop = 0;
                                                cell.MinimumHeight = 20;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }


                                            if (j == 1)
                                            {
                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));

                                                string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                    "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.designid='" + labldesig.Text + "'";


                                                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(summaryQry).Result;
                                                cellText = label1.Text;
                                                if (dt.Rows.Count > 0)
                                                {
                                                    if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                        cellText += "\n " + dt.Rows[0]["summary"].ToString() + " ";
                                                }

                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.HorizontalAlignment = 0;
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }



                                            if (j == 2)
                                            {
                                                string HSNN = "";
                                                TextBox LblHSNNo = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));

                                                HSNN = LblHSNNo.Text;

                                                cell = new PdfPCell(new Phrase(HSNN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }



                                            if (j == 3)
                                            {


                                                TextBox lblpayrate = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                string payrate = lblpayrate.Text;

                                                cell = new PdfPCell(new Phrase(payrate, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }

                                            if (j == 4)
                                            {

                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));

                                                string qry = "select round((ISNULL(PayRate,0)/case when ISNULL(NoofDays,0)=0 then 1 else ISNULL(NoofDays,0) end ),2) as dayrate,ISNULL(OTHrs,0) as OThrs  from UnitBillBreakup where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and Designation='" + labldesig.Text + "' ";
                                                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;

                                                string dayrate = "0";

                                                if (dt.Rows.Count > 0)
                                                {
                                                    dayrate = dt.Rows[0]["dayrate"].ToString();
                                                }



                                                cell = new PdfPCell(new Phrase(float.Parse(dayrate).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }


                                            if (j == 5)
                                            {

                                                string Noofdaysinamonth = "";
                                                DropDownList ddlnod = (DropDownList)(gvClientBilling.Rows[rowIndex].FindControl("ddlnod"));

                                                Noofdaysinamonth = ddlnod.SelectedValue;

                                                cell = new PdfPCell(new Phrase(Noofdaysinamonth, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }



                                            if (j == 6)
                                            {
                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));

                                                string qry = "select ISNULL(OTRate,0) as OTRate  from UnitBillBreakup where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and Designation='" + labldesig.Text + "' ";
                                                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;

                                                string OTRate = "0";

                                                if (dt.Rows.Count > 0)
                                                {
                                                    OTRate = dt.Rows[0]["OTRate"].ToString();
                                                }




                                                cell = new PdfPCell(new Phrase(float.Parse(OTRate).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.BorderWidthRight = 0f;
                                                cell.HorizontalAlignment = 2;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }






                                            if (j == 7)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));

                                                if (label1.Text == "0")
                                                {
                                                    cellText = "";
                                                }
                                                else
                                                {
                                                    cellText = label1.Text;
                                                }
                                                //create a new cell with column value


                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (j == 8)
                                            {

                                                Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));

                                                string qry = "select round((ISNULL(PayRate,0)/case when ISNULL(NoofDays,0)=0 then 1 else ISNULL(NoofDays,0) end ),2) as dayrate,ISNULL(OTHrs,0) as OThrs  from UnitBillBreakup where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and Designation='" + labldesig.Text + "' ";
                                                DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(qry).Result;

                                                string OThrs = "";

                                                if (dt.Rows.Count > 0)
                                                {
                                                    OThrs = dt.Rows[0]["OThrs"].ToString();
                                                }




                                                cell = new PdfPCell(new Phrase(OThrs, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.HorizontalAlignment = 1;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = .2f;
                                                cell.BorderWidthTop = 0;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (j == 9)
                                            {

                                                TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                cellText = label1.Text;
                                                //create a new cell with column value

                                                if (cellText == "0")
                                                {
                                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.HorizontalAlignment = 2;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                                else
                                                {
                                                    cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 2;
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = .2f;
                                                    cell.HorizontalAlignment = 2;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                            GridLine++;
                        }

                        #region for space
                        PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty.HorizontalAlignment = 2;
                        Cellempty.Colspan = 1;
                        Cellempty.BorderWidthTop = 0;
                        Cellempty.BorderWidthRight = 0f;
                        Cellempty.BorderWidthLeft = .2f;
                        Cellempty.BorderWidthBottom = 0;
                        // Cellempty.MinimumHeight = 5;
                        Cellempty.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty1.HorizontalAlignment = 2;
                        Cellempty1.Colspan = 1;
                        Cellempty1.BorderWidthTop = 0;
                        Cellempty1.BorderWidthRight = 0f;
                        Cellempty1.BorderWidthLeft = 0.2f;
                        Cellempty1.BorderWidthBottom = 0;
                        Cellempty1.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty6 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty6.HorizontalAlignment = 2;
                        Cellempty6.Colspan = 1;
                        Cellempty6.BorderWidthTop = 0;
                        Cellempty6.BorderWidthRight = 0f;
                        Cellempty6.BorderWidthLeft = .2f;
                        Cellempty6.BorderWidthBottom = 0;

                        Cellempty6.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty7 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty7.HorizontalAlignment = 2;
                        Cellempty7.Colspan = 1;
                        Cellempty7.BorderWidthTop = 0;
                        Cellempty7.BorderWidthRight = 0.2f;
                        Cellempty7.BorderWidthLeft = 0.2f;
                        Cellempty7.BorderWidthBottom = 0;
                        Cellempty7.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty2.HorizontalAlignment = 2;
                        Cellempty2.Colspan = 1;
                        Cellempty2.BorderWidthTop = 0;
                        Cellempty2.BorderWidthRight = 0f;
                        Cellempty2.BorderWidthLeft = 0.2f;
                        Cellempty2.BorderWidthBottom = 0;
                        Cellempty2.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty3.HorizontalAlignment = 2;
                        Cellempty3.Colspan = 1;
                        Cellempty3.BorderWidthTop = 0;
                        Cellempty3.BorderWidthRight = 0f;
                        Cellempty3.BorderWidthLeft = 0.2f;
                        Cellempty3.BorderWidthBottom = 0;
                        Cellempty3.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty4.HorizontalAlignment = 2;
                        Cellempty4.Colspan = 1;
                        Cellempty4.BorderWidthTop = 0;
                        Cellempty4.BorderWidthRight = 0f;
                        Cellempty4.BorderWidthLeft = 0.2f;
                        Cellempty4.BorderWidthBottom = 0;
                        Cellempty4.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty5.HorizontalAlignment = 2;
                        Cellempty5.Colspan = 1;
                        Cellempty5.BorderWidthTop = 0;
                        Cellempty5.BorderWidthRight = 0.2f;
                        Cellempty5.BorderWidthLeft = 0.2f;
                        Cellempty5.BorderWidthBottom = 0;
                        Cellempty5.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellemptyss = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellemptyss.HorizontalAlignment = 2;
                        Cellemptyss.Colspan = 1;
                        Cellemptyss.BorderWidthTop = 0;
                        Cellemptyss.BorderWidthRight = 0.2f;
                        Cellemptyss.BorderWidthLeft = 0.2f;
                        Cellemptyss.BorderWidthBottom = 0;
                        Cellemptyss.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellemptyss1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellemptyss1.HorizontalAlignment = 2;
                        Cellemptyss1.Colspan = 1;
                        Cellemptyss1.BorderWidthTop = 0;
                        Cellemptyss1.BorderWidthRight = 0.2f;
                        Cellemptyss1.BorderWidthLeft = 0.2f;
                        Cellemptyss1.BorderWidthBottom = 0;
                        Cellemptyss1.BorderColor = BaseColor.BLACK;



                        if (gvClientBilling.Rows.Count == 1)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 13; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                    //table.AddCell(Cellempty4);
                                    //table.AddCell(Cellempty5);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 2)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 12; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 3)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 11; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 9; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }

                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 4)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 5)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 9; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 6)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 7)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }

                        if (gvClientBilling.Rows.Count == 8)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 4; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }

                        if (gvClientBilling.Rows.Count == 9)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 3; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }

                        if (gvClientBilling.Rows.Count == 10)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 4; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 2; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    if (InvDescriptionVisible == "Y")
                                    {
                                        table.AddCell(Cellempty1);
                                    }
                                    table.AddCell(Cellempty6);
                                    table.AddCell(Cellempty7);
                                    if (InvNoOfEmpsVisible == "Y")
                                    {
                                        table.AddCell(Cellempty2);
                                    }
                                    if (InvNoofDutiesVisible == "Y")
                                    {
                                        table.AddCell(Cellempty3);
                                    }
                                    if (InvPayrateVisible == "Y")
                                    {
                                        table.AddCell(Cellempty4);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellemptyss1);
                                    }
                                    if (InvAmountVisible == "Y")
                                    {
                                        table.AddCell(Cellempty5);
                                    }

                                }
                            }


                            #endregion
                        }







                        #endregion

                        document.Add(table);

                        // tablelogo.AddCell(celll);


                        PdfPTable tempTable22 = new PdfPTable(colCount);
                        tempTable22.TotalWidth = 580f;
                        tempTable22.LockedWidth = true;

                        float[] tempWidth22 = new float[] { };

                        if (colCount == 10)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2f, 2f, 2f, 2f, 2.2f, 2f, 2f, 2.7f };
                        }

                        if (colCount == 9)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2f, 2f, 2f, 2.2f, 2f, 2f, 2.7f };
                        }
                        if (colCount == 8)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 7)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 6)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            tempWidth22 = new float[] { 1.5f, 5.5f, 2.7f };
                        }

                        tempTable22.SetWidths(tempWidth22);

                        #region
                        if (RelChrgAmt > 0)
                        {

                            PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldz5.Colspan = colCount - 1;
                            celldz5.BorderWidthBottom = 0;
                            celldz5.BorderWidthLeft = .2f;
                            celldz5.BorderWidthTop = 0;
                            celldz5.BorderWidthRight = .2f;
                            celldz5.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz5);

                            PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldz6.BorderWidthBottom = 0;
                            celldz6.BorderWidthLeft = .2f;
                            celldz6.BorderWidthTop = 0;
                            celldz6.BorderWidthRight = .2f;
                            celldz6.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz6);
                        }

                        PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz1.Colspan = colCount - 1;
                        celldz1.BorderWidthBottom = 0;
                        celldz1.BorderWidthLeft = .2f;
                        celldz1.BorderWidthTop = .2f;
                        celldz1.BorderWidthRight = 0;
                        celldz1.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz1);

                        PdfPCell celldz4 = new PdfPCell(new Phrase(" " + totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz4.BorderWidthBottom = 0;
                        celldz4.BorderWidthLeft = 0.2f;
                        celldz4.BorderWidthTop = .2f;
                        celldz4.BorderWidthRight = .2f;
                        celldz4.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz4);

                        #region When Extradata check is false and STcheck is false

                        if (Extradatacheck == true)
                        {
                            if (machinarycost > 0)
                            {
                                if (STMachinary == false)
                                {
                                    if (SCMachinary == false)
                                    {
                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == false)
                                {
                                    if (SCMaterial == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == false)
                                {
                                    if (SCMaintenance == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == false)
                                {
                                    if (SCExtraone == false)
                                    {
                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == false)
                                {
                                    if (SCExtratwo == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                        }
                        #endregion
                        #endregion

                        Fromdate = txtfromdate.Text;
                        Todate = txttodate.Text;

                        #region



                        #region
                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2;
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == true)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);


                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        #endregion

                        #region When Extra data is checked and STcheck is false and SCcheck is true

                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = colCount - 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        #endregion
                        if (servicecharge > 0)//bSCType == true)
                        {
                            float scharge = servicecharge;
                            if (scharge > 0)
                            {
                                string SCharge = "";
                                if (bSCType == false)
                                {
                                    SCharge = ServiceCharge + "%";
                                }
                                else
                                {
                                    SCharge = ServiceCharge;
                                }


                                PdfPCell celldc2 = new PdfPCell(new Phrase(ServiceChargeDesc + " @ " + SCharge, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldc2.Colspan = colCount - 1;
                                celldc2.BorderWidthBottom = 0;
                                celldc2.BorderWidthLeft = .2f;
                                celldc2.BorderWidthTop = 0;
                                celldc2.BorderWidthRight = 0.2f;
                                celldc2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldc2);


                                PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldc4.BorderWidthBottom = 0;
                                celldc4.BorderWidthLeft = .2f;
                                celldc4.BorderWidthTop = 0;
                                celldc4.BorderWidthRight = .2f;
                                celldc4.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldc4);
                            }


                            if (STDiscountone == true)
                            {
                                if (discountone > 0)
                                {

                                    PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldMt1.Colspan = colCount - 1;
                                    celldMt1.BorderWidthBottom = 0;
                                    celldMt1.BorderWidthLeft = .2f;
                                    celldMt1.BorderWidthTop = 0;
                                    celldMt1.BorderWidthRight = .2f;
                                    celldMt1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt1);


                                    PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt3.BorderWidthBottom = 0;
                                    celldMt3.BorderWidthLeft = .2f;
                                    celldMt3.BorderWidthTop = 0;
                                    celldMt3.BorderWidthRight = .2f;
                                    celldMt3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt3);
                                }
                            }

                            if (STDiscounttwo == true)
                            {
                                if (discounttwo > 0)
                                {

                                    PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldMt1.BorderWidthBottom = 0;
                                    celldMt1.BorderWidthLeft = .2f;
                                    celldMt1.BorderWidthTop = 0;
                                    celldMt1.BorderWidthRight = .2f;
                                    celldMt1.BorderColor = BaseColor.BLACK;
                                    celldMt1.Colspan = colCount - 1;
                                    tempTable22.AddCell(celldMt1);

                                    PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt3.BorderWidthBottom = 0;
                                    celldMt3.BorderWidthLeft = .2f;
                                    celldMt3.BorderWidthTop = 0;
                                    celldMt3.BorderWidthRight = .2f;
                                    celldMt3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt3);
                                }
                            }



                            PdfPCell Cellb4tax = new PdfPCell(new Phrase("Total Before Tax", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            Cellb4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellb4tax.Colspan = colCount - 1;
                            Cellb4tax.BorderWidthBottom = 0;
                            Cellb4tax.BorderWidthLeft = .2f;
                            Cellb4tax.BorderWidthTop = 0;
                            Cellb4tax.BorderWidthRight = 0.2f;
                            Cellb4tax.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(Cellb4tax);


                            PdfPCell Cellb4tax1 = new PdfPCell(new Phrase(((servicecharge + totalamount) - (discountone + discounttwo)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            Cellb4tax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellb4tax1.BorderWidthBottom = 0;
                            Cellb4tax1.BorderWidthLeft = .2f;
                            Cellb4tax1.BorderWidthTop = 0;
                            Cellb4tax1.BorderWidthRight = .2f;
                            Cellb4tax1.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(Cellb4tax1);




                        }

                        if (STDiscountone == false)
                        {
                            if (discountone > 0)
                            {

                                PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = colCount - 1;
                                celldMt1.BorderWidthBottom = 0;
                                celldMt1.BorderWidthLeft = .2f;
                                celldMt1.BorderWidthTop = 0;
                                celldMt1.BorderWidthRight = .2f;
                                celldMt1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt1);


                                PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt3.BorderWidthBottom = 0;
                                celldMt3.BorderWidthLeft = .2f;
                                celldMt3.BorderWidthTop = 0;
                                celldMt3.BorderWidthRight = .2f;
                                celldMt3.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt3);
                            }
                        }
                        if (STDiscounttwo == false)
                        {
                            if (discounttwo > 0)
                            {

                                PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldMt1.BorderWidthBottom = 0;
                                celldMt1.BorderWidthLeft = .2f;
                                celldMt1.BorderWidthTop = 0;
                                celldMt1.BorderWidthRight = .2f;
                                celldMt1.BorderColor = BaseColor.BLACK;
                                celldMt1.Colspan = colCount - 1;
                                tempTable22.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt3.BorderWidthBottom = 0;
                                celldMt3.BorderWidthLeft = .2f;
                                celldMt3.BorderWidthTop = 0;
                                celldMt3.BorderWidthRight = .2f;
                                celldMt3.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt3);
                            }
                        }
                        //if (servicecharge > 0 && (discountone > 0 || discounttwo > 0)) 
                        //{
                        //    PdfPCell celldMt1 = new PdfPCell(new Phrase("Net Service Charge Claimed ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    celldMt1.BorderWidthBottom = 0;
                        //    celldMt1.BorderWidthLeft = .2f;
                        //    celldMt1.BorderWidthTop = 0;
                        //    celldMt1.BorderWidthRight = .2f;
                        //    celldMt1.BorderColor = BaseColor.BLACK;
                        //    celldMt1.Colspan = colCount - 1;
                        //    tempTable22.AddCell(celldMt1);

                        //    PdfPCell celldMt3 = new PdfPCell(new Phrase((servicecharge - (discounttwo + discountone)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    celldMt3.BorderWidthBottom = 0;
                        //    celldMt3.BorderWidthLeft = .2f;
                        //    celldMt3.BorderWidthTop = 0;
                        //    celldMt3.BorderWidthRight = .2f;
                        //    celldMt3.BorderColor = BaseColor.BLACK;
                        //    tempTable22.AddCell(celldMt3);
                        //}

                        #endregion

                        #region When Extra data is checked and STcheck is true
                        if (Extradatacheck == true)
                        {
                            //float machineryCostwithst = 0;
                            //if (lblMachinerywithst.Text.Length > 0)
                            //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                            if (machinarycost > 0)
                            {
                                if (STMachinary == true)
                                {
                                    if (SCMachinary == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;

                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            //float materialcostwithst = 0;
                            //if (lblMaterialwithst.Text.Length > 0)
                            //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                            if (materialcost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    if (SCMaterial == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            //float electricalcostwithst = 0;
                            //if (lblElectricalwithst.Text.Length > 0)
                            //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    if (SCMaintenance == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            //float extraamtwithst = 0;
                            //if (lblextraonewithst.Text.Length > 0)
                            //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                            if (extraonecost > 0)
                            {
                                if (STExtraone == true)
                                {
                                    if (SCExtraone == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            //float Extraamtwithst1 = 0;
                            //if (lblextratwowithst.Text.Length > 0)
                            //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    if (SCExtratwo == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = colCount - 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                        }

                        #endregion

                        #region for taxes

                        if (!bIncludeST)
                        {

                            string scpercent = "";
                            if (bST75 == true)
                            {
                                scpercent = "3";
                            }
                            else
                            {
                                scpercent = SCPersent;
                            }

                            if (servicetax > 0)
                            {


                                PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0;
                                celldd2.BorderWidthRight = 0f;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                celldd2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (sbcess > 0)
                            {

                                string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + SBCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }


                            if (kkcess > 0)
                            {

                                string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                                PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + KKCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk1.Colspan = colCount - 1;
                                Cellmtcesskk1.BorderWidthBottom = 0;
                                Cellmtcesskk1.BorderWidthLeft = .2f;
                                Cellmtcesskk1.BorderWidthTop = 0;
                                Cellmtcesskk1.BorderWidthRight = 0f;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                Cellmtcesskk1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellmtcesskk1);

                                PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk2.BorderWidthBottom = 0;
                                Cellmtcesskk2.BorderWidthLeft = 0.2f;
                                Cellmtcesskk2.BorderWidthTop = 0;
                                Cellmtcesskk2.BorderWidthRight = .2f;
                                Cellmtcesskk2.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(Cellmtcesskk2);

                            }

                            #region for GST as on 17-6-2017

                            if (CGST > 0)
                            {
                                PdfPCell CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGST.Colspan = colCount - 1;
                                CellCGST.BorderWidthBottom = 0;
                                CellCGST.BorderWidthLeft = .2f;
                                CellCGST.BorderWidthTop = 0;
                                CellCGST.BorderWidthRight = 0f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCGST);

                                PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGSTAmt.BorderWidthBottom = 0;
                                CellCGSTAmt.BorderWidthLeft = 0.2f;
                                CellCGSTAmt.BorderWidthTop = 0;
                                CellCGSTAmt.BorderWidthRight = .2f;
                                CellCGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellCGSTAmt.PaddingBottom = 5;
                                //CellCGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellCGSTAmt);

                            }


                            if (SGST > 0)
                            {
                                PdfPCell CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGST.Colspan = colCount - 1;
                                CellSGST.BorderWidthBottom = 0;
                                CellSGST.BorderWidthLeft = .2f;
                                CellSGST.BorderWidthTop = 0;
                                CellSGST.BorderWidthRight = 0f;
                                // CellSGST.PaddingBottom = 5;
                                // CellSGST.PaddingTop = 5;
                                CellSGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellSGST);

                                PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGSTAmt.BorderWidthBottom = 0;
                                CellSGSTAmt.BorderWidthLeft = 0.2f;
                                CellSGSTAmt.BorderWidthTop = 0;
                                CellSGSTAmt.BorderWidthRight = .2f;
                                CellSGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellSGSTAmt.PaddingBottom = 5;
                                //CellSGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellSGSTAmt);


                            }

                            if (IGST > 0)
                            {
                                PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST.Colspan = colCount - 1;
                                CellIGST.BorderWidthBottom = 0;
                                CellIGST.BorderWidthLeft = .2f;
                                CellIGST.BorderWidthTop = 0;
                                CellIGST.BorderWidthRight = 0f;
                                // CellIGST.PaddingBottom = 5;
                                // CellIGST.PaddingTop = 5;
                                CellIGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST);

                                PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGSTAmt.BorderWidthBottom = 0;
                                CellIGSTAmt.BorderWidthLeft = 0.2f;
                                CellIGSTAmt.BorderWidthTop = 0;
                                CellIGSTAmt.BorderWidthRight = .2f;
                                CellIGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellIGSTAmt.PaddingBottom = 5;
                                //CellIGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellIGSTAmt);


                            }

                            if (Cess1 > 0)
                            {
                                PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1.Colspan = colCount - 1;
                                CellCess1.BorderWidthBottom = 0;
                                CellCess1.BorderWidthLeft = .2f;
                                CellCess1.BorderWidthTop = 0;
                                CellCess1.BorderWidthRight = 0f;
                                // CellCess1.PaddingBottom = 5;
                                // CellCess1.PaddingTop = 5;
                                CellCess1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess1);

                                PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1Amt.BorderWidthBottom = 0;
                                CellCess1Amt.BorderWidthLeft = 0.2f;
                                CellCess1Amt.BorderWidthTop = 0;
                                CellCess1Amt.BorderWidthRight = .2f;
                                CellCess1Amt.BorderColor = BaseColor.BLACK;
                                //CellCess1Amt.PaddingBottom = 5;
                                //CellCess1Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess1Amt);

                            }


                            if (Cess2 > 0)
                            {
                                PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2.Colspan = colCount - 1;
                                CellCess2.BorderWidthBottom = 0;
                                CellCess2.BorderWidthLeft = .2f;
                                CellCess2.BorderWidthTop = 0;
                                CellCess2.BorderWidthRight = 0f;
                                // CellCess2.PaddingBottom = 5;
                                // CellCess2.PaddingTop = 5;
                                CellCess2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess2);

                                PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2Amt.BorderWidthBottom = 0;
                                CellCess2Amt.BorderWidthLeft = 0.2f;
                                CellCess2Amt.BorderWidthTop = 0;
                                CellCess2Amt.BorderWidthRight = .2f;
                                CellCess2Amt.BorderColor = BaseColor.BLACK;
                                //CellCess2Amt.PaddingBottom = 5;
                                //CellCess2Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess2Amt);

                            }

                            #endregion for GST

                            if (cess > 0)
                            {

                                string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + CESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = colCount - 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (shecess > 0)
                            {


                                string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                                PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + SHECESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf2.Colspan = colCount - 1;
                                celldf2.BorderWidthBottom = 0;
                                celldf2.BorderWidthLeft = .2f;
                                celldf2.BorderWidthTop = 0;
                                celldf2.BorderWidthRight = 0f;
                                celldf2.BorderColor = BaseColor.BLACK;
                                //celldf2.PaddingBottom = 5;
                                //celldf2.PaddingTop = 5;
                                tempTable22.AddCell(celldf2);


                                PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4.BorderWidthBottom = 0;
                                celldf4.BorderWidthLeft = 0.2f;
                                celldf4.BorderWidthTop = 0;
                                celldf4.BorderWidthRight = .2f;
                                celldf4.BorderColor = BaseColor.BLACK;
                                ////celldf4.PaddingBottom = 5;
                                //celldf4.PaddingTop = 5;
                                //celldf4.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldf4);
                            }
                            float totaltaxamt = 0;
                            totaltaxamt = CGST + SGST + IGST;
                            if (totaltaxamt > 0)
                            {
                                PdfPCell celldfTax2 = new PdfPCell(new Phrase("Total Tax Amount", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldfTax2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldfTax2.Colspan = colCount - 1;
                                celldfTax2.BorderWidthBottom = 0;
                                celldfTax2.BorderWidthLeft = .2f;
                                celldfTax2.BorderWidthTop = 0;
                                celldfTax2.BorderWidthRight = 0f;
                                celldfTax2.BorderColor = BaseColor.BLACK;
                                //celldfTax2.PaddingBottom = 5;
                                //celldfTax2.PaddingTop = 5;
                                //tempTable22.AddCell(celldfTax2);

                                PdfPCell celldf4tax = new PdfPCell(new Phrase(totaltaxamt.ToString("#,##0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldf4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4tax.BorderWidthBottom = 0;
                                celldf4tax.BorderWidthLeft = 0.2f;
                                celldf4tax.BorderWidthTop = 0;
                                celldf4tax.BorderWidthRight = .2f;
                                celldf4tax.BorderColor = BaseColor.BLACK;
                                ////celldf4tax.PaddingBottom = 5;
                                //celldf4tax.PaddingTop = 5;
                                //celldf4tax.BorderColor = BaseColor.BLACK;
                                //tempTable22.AddCell(celldf4tax);
                            }
                        }


                        #endregion for taxes


                        PdfPCell Cellgrandamount = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellgrandamount.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Cellgrandamount.Colspan = colCount - 1;
                        Cellgrandamount.BorderWidthBottom = 0;
                        Cellgrandamount.BorderWidthLeft = .2f;
                        Cellgrandamount.BorderWidthTop = 0;
                        Cellgrandamount.BorderWidthRight = 0f;
                        // CellSGST.PaddingBottom = 5;
                        // CellSGST.PaddingTop = 5;
                        Cellgrandamount.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(Cellgrandamount);

                        PdfPCell Cellgrandamountv = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellgrandamountv.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Cellgrandamountv.BorderWidthBottom = 0;
                        Cellgrandamountv.BorderWidthLeft = 0.2f;
                        Cellgrandamountv.BorderWidthTop = 0.2f;
                        Cellgrandamountv.BorderWidthRight = .2f;
                        Cellgrandamountv.BorderColor = BaseColor.BLACK;
                        //CellSGSTAmt.PaddingBottom = 5;
                        //CellSGSTAmt.PaddingTop = 5;
                        tempTable22.AddCell(Cellgrandamountv);



                        cell = new PdfPCell(new Phrase(" Amount In Words: ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderColor = BaseColor.BLACK;
                        cell.Colspan = colCount;
                        tempTable22.AddCell(cell);

                        string Amountinwords = NumberToEnglish.Instance.changeNumericToWords(Grandtotal.ToString());

                        cell = new PdfPCell(new Phrase(" " + lblamtinwords.Text.Trim() + "", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = colCount;
                        cell.BorderColor = BaseColor.BLACK;
                        cell.MinimumHeight = 23;
                        tempTable22.AddCell(cell);

                        document.Add(tempTable22);

                        #region footer

                        PdfPTable Addterms = new PdfPTable(6);
                        Addterms.TotalWidth = 580f;
                        Addterms.LockedWidth = true;
                        float[] widthrerms = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                        Addterms.SetWidths(widthrerms);

                        //if (notes.Length > 0)
                        //{
                        //    cell = new PdfPCell(new Phrase(notes, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    cell.HorizontalAlignment = 0;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.Colspan = 6;
                        //    cell.SetLeading(0, 1.3f);
                        //    cell.BorderColor = BaseColor.BLACK;
                        //    Addterms.AddCell(cell);
                        //}

                        if (BankAcNumber.Length > 0 || BankName.Length > 0 || IFSCCode.Length > 0 || BranchName.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("Bank Details", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 6;
                            // cell.SetLeading(0, 1.3f);
                            cell.BorderColor = BaseColor.BLACK;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead5 = new Paragraph();
                            CcellHead5.Add(new Chunk("Bank NAME : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead5.Add(new Chunk(BankName, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead5);
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.PaddingTop = -3f;
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead6 = new Paragraph();
                            CcellHead6.Add(new Chunk("A/C No : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead6.Add(new Chunk(BankAcNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead6);
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            cell.PaddingTop = -3f;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead1 = new Paragraph();
                            CcellHead1.Add(new Chunk("Branch : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead1.Add(new Chunk(BranchName, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead1);
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            cell.PaddingTop = -3f;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            Addterms.AddCell(cell);

                            cell = new PdfPCell();
                            Paragraph CcellHead2 = new Paragraph();
                            CcellHead2.Add(new Chunk("IFSC Code : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            CcellHead2.Add(new Chunk(IFSCCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(CcellHead2);
                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell.Colspan = 6;
                            cell.PaddingTop = -3f;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            Addterms.AddCell(cell);
                        }
                        else
                        {
                            cell = new PdfPCell(new Phrase(BillDesc, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 6;
                            cell.SetLeading(0, 1.3f);
                            cell.BorderColor = BaseColor.BLACK;
                            Addterms.AddCell(cell);
                        }


                        PdfPTable Childterms = new PdfPTable(3);
                        Childterms.TotalWidth = 335f;
                        Childterms.LockedWidth = true;
                        float[] Celters = new float[] { 1.5f, 2f, 2f };
                        Childterms.SetWidths(Celters);


                        #region for payment terms


                        cell = new PdfPCell(new Phrase(companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        // cell.PaddingTop = 7;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        if (Bdt.Rows.Count > 0)
                        {


                            if (HSNNumber.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("HSN NUMBER", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);


                                cell = new PdfPCell(new Paragraph(": " + HSNNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }



                            if (SACCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("SAC CODE", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);

                                cell = new PdfPCell(new Paragraph(": " + SACCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }


                        if (PANNO.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PAN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PANNO, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }

                        if (Bdt.Rows.Count > 0)
                        {
                            if (OurGSTIN.Length > 0)
                            {


                                cell = new PdfPCell(new Phrase(OurGSTINAlias, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0f;
                                cell.BorderWidthLeft = .2f;
                                cell.Colspan = 1;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);


                                cell = new PdfPCell(new Phrase(": " + OurGSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }
                        if (Servicetax.Length > 0)
                        {


                            cell = new PdfPCell(new Phrase("SER. TAX REG.NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Servicetax, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Category.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("SC-CATEGORY", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Category, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }
                        if (PFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PFNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Esino.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Esino, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (CINNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("CIN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CINNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (MSMENo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("MSME NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + MSMENo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        cell = new PdfPCell(new Phrase("\n\n\nCustomer's seal and signature", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthLeft = .2f;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 5f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        // Childterms.AddCell(cell);




                        #endregion for payment terms


                        PdfPCell Chid3 = new PdfPCell(Childterms);
                        Chid3.Border = 0;
                        Chid3.Colspan = 3;
                        Chid3.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid3);



                        PdfPTable chilk = new PdfPTable(3);
                        chilk.TotalWidth = 245f;
                        chilk.LockedWidth = true;
                        float[] Celterss = new float[] { 2.2f, 2f, 2.7f };
                        chilk.SetWidths(Celterss);




                        cell = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0;
                        cell.PaddingTop = 10f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);

                        cell = new PdfPCell(new Phrase("\n\n\n Authorised Signatory", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);



                        cell = new PdfPCell(new Phrase("Computer Generated Invoice and Requires No Signature", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        //chilk.AddCell(cell);


                        PdfPCell Chid4 = new PdfPCell(chilk);
                        Chid4.Border = 0;
                        Chid4.Colspan = 3;
                        Chid4.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid4);


                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 6;
                        // Addterms.AddCell(cell);

                        document.Add(Addterms);


                        #endregion
                        #endregion


                        PdfPTable Remarkscell = new PdfPTable(2);
                        Remarkscell.TotalWidth = 255f;
                        Remarkscell.LockedWidth = true;
                        float[] widtlogoCI = new float[] { 2f, 2f };
                        Remarkscell.SetWidths(widtlogoCI);

                        cellemp1 = new PdfPCell(new Paragraph(ExtraRemarks, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellemp1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellemp1.Colspan = 2;
                        cellemp1.BorderWidthTop = 0;
                        cellemp1.BorderWidthBottom = 0;
                        cellemp1.BorderWidthLeft = 0;
                        cellemp1.BorderWidthRight = 0;
                        cellemp1.BorderColor = BaseColor.BLACK;
                        cellemp1.PaddingBottom = 15;
                        Remarkscell.AddCell(cellemp1);

                        Remarkscell.WriteSelectedRows(0, -1, document.RightMargin + 15, document.BottomMargin + 280, content);

                        Rectangle rectangle = new Rectangle(document.PageSize);
                        #endregion
                    }

                    document.Close();

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void Btnannexure_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            MemoryStream ms = new MemoryStream();

            Document document = new Document();


            Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            string filename = "";
            string CopyName = "";
            document.Open();

            BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            string SelectBillNo = string.Empty;
            string DisplayBillNo = "";

            if (ddlType.SelectedIndex == 0)
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
            }
            else
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
            }
            DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;

            if (DtBilling.Rows.Count > 0)
            {
                DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
            }


            Downloadannexure(document, ms);

            filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
            Response.Buffer = true;
            Response.Clear();
            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
            Response.OutputStream.Flush();
            Response.End();

        }

        protected void chklistformanual_CheckedChanged(object sender, EventArgs e)
        {
            ClearData();
            EnabledFields();
            ClearExtraDataForBilling();
            ddlclientid.Items.Clear();
            ddlCname.Items.Clear();
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            string BillType = "Manual";
            int month = 0;
            bool SelectAll = false;
            if (chklistformanual.Checked == true)
                SelectAll = true;
            month = GetMonthBasedOnSelectionDateorMonth();
            LoadClientIDBasedonMonth(month, BillType, SelectAll, false);
        }

        protected void chkexcludelist_CheckedChanged(object sender, EventArgs e)
        {
            chkalllist.Checked = false;

            if (Chk_Month.Checked == true)
            {
                if (txtmonth.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Select Month');", true);
                    return;

                }
                else
                {
                    LoadCheckboxdata();
                }
            }
            else
            {
                if (ddlmonth.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Select Month');", true);
                    return;
                }
                else
                {
                    LoadCheckboxdata();
                }
            }

            //LoadCheckboxdata();
        }

        protected void chkalllist_CheckedChanged(object sender, EventArgs e)
        {
            // if (chkexcludelist.Checked == true)
            chkexcludelist.Checked = false;
            LoadCheckboxdata();
        }

        protected void LoadCheckboxdata()
        {
            ClearData();
            EnabledFields();
            ClearExtraDataForBilling();
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            bool SelectAll = false;
            if (chkalllist.Checked == true)
                SelectAll = true;

            bool excludeList = false;
            if (chkexcludelist.Checked == true)
                excludeList = true;
            string BillType = "Normal";
            int month = GetMonthBasedOnSelectionDateorMonth();
            LoadClientIDBasedonMonth(month, BillType, SelectAll, excludeList);
        }

        protected void btnemplocation_Click(object sender, EventArgs e)
        {

        }

        public void DownloadLifestyleBill(Document document, MemoryStream ms)
        {
            int month = 0;
            int font = Convert.ToInt32(ddlfont.SelectedValue);

            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    int m = 0;
                    int Copycount = 1;

                    if (chkcopy.Checked == true)
                    {
                        Copycount = 2;
                    }

                    for (m = 0; m < Copycount; m++)
                    {
                        document.NewPage();
                        string CopyName = "";
                        if (chkcopy.Checked == true)
                        {
                            if (m == 0)
                            {
                                CopyName = "ORIGINAL FOR RECIPIENT";
                            }
                            if (m == 1)
                            {
                                CopyName = "DUPLICATE FOR SUPPLIER";
                            }
                        }
                        PdfPCell cell;
                        #region for PDf
                        Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                        PdfWriter writer = PdfWriter.GetInstance(document, ms);

                        document.Open();
                        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                        #region for CompanyInfo
                        string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";

                        DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        string companyName = "Your Company Name";
                        string companyAddress = "Your Company Address";
                        string companyaddressline = " ";
                        string emailid = "";
                        string website = "";
                        string phoneno = "";
                        string PANNO = "";
                        string PFNo = "";
                        string Esino = "";
                        string CmpPFNo = "";
                        string CmpEsino = "";
                        string Servicetax = "";
                        string notes = "";
                        string ServiceText = "";
                        string PSARARegNo = "";
                        string Category = "";
                        string HSNNumber = "";
                        string SACCode = "";
                        string BillDesc = "";
                        string BankName = "";
                        string BankAcNumber = "";
                        string IFSCCode = "";
                        string BranchName = "";
                        string CINNo = "";
                        string MSMENo = "";
                        string ForEnquiresCall = "";
                        if (compInfo.Rows.Count > 0)
                        {
                            companyName = compInfo.Rows[0]["CompanyName"].ToString();
                            companyAddress = compInfo.Rows[0]["Address"].ToString();
                            //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                            companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                            //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                            PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                            CmpPFNo = compInfo.Rows[0]["PFNo"].ToString();
                            Category = compInfo.Rows[0]["Category"].ToString();
                            CmpEsino = compInfo.Rows[0]["ESINo"].ToString();
                            Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                            emailid = compInfo.Rows[0]["Emailid"].ToString();
                            website = compInfo.Rows[0]["Website"].ToString();
                            phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                            notes = compInfo.Rows[0]["notes"].ToString();
                            HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                            SACCode = compInfo.Rows[0]["SACCode"].ToString();
                            BillDesc = compInfo.Rows[0]["BillDesc"].ToString();
                            BankName = compInfo.Rows[0]["Bankname"].ToString();
                            BranchName = compInfo.Rows[0]["BranchName"].ToString();
                            BankAcNumber = compInfo.Rows[0]["bankaccountno"].ToString();
                            IFSCCode = compInfo.Rows[0]["IfscCode"].ToString();
                            CINNo = compInfo.Rows[0]["CINNo"].ToString();
                            MSMENo = compInfo.Rows[0]["MSMENo"].ToString();
                            ForEnquiresCall = compInfo.Rows[0]["ForEnquiresCall"].ToString();
                        }

                        #endregion

                        DateTime DtLastDay = DateTime.Now;
                        if (Chk_Month.Checked == false)
                        {
                            DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                        }
                        if (Chk_Month.Checked == true)
                        {
                            DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        }
                        var ContractID = "";


                        #region  Begin Get Contract Id Based on The Last Day

                        Hashtable HtGetContractID = new Hashtable();
                        var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                        HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                        HtGetContractID.Add("@LastDay", DtLastDay);
                        DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                        if (DTContractID.Rows.Count > 0)
                        {
                            ContractID = DTContractID.Rows[0]["contractid"].ToString();

                        }
                        #endregion

                        #region
                        string SqlQuryForServiCharge = "select ContractId,servicecharge,PODate, isnull(EBD.esino,'') EsiBranchname,isnull(PBD.pfno,'') PFBranchname,convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,'' billnotes,isnull(ServiceChargeDesc,'') as ServiceChargeDesc,GSTLineitem from contracts  C left join EsiBranchDetails EBD on EBD.EsiBranchid=isnull(C.Esibranch,0) left join PFBranchDetails PBD on PBD.PFBranchid=isnull(C.PFbranch,0)   where " +
                            " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                        DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                        string Typeofwork = "";
                        string BillNotes = "";
                        string ServiceCharge = "0";
                        string strSCType = "";
                        string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                        bool bSCType = false;
                        bool GSTLineitem = false;
                        string strIncludeST = "";
                        string ContractStartDate = "";
                        string strST75 = "";
                        bool bIncludeST = false;
                        bool bST75 = false;
                        string POContent = "";
                        string PODate = "";
                        string CnPFNo = "";
                        string CnESINo = "";
                        string Location = "";
                        string ReversCharges = "";
                        string ServiceChargeDesc = "";
                        // string ServiceTaxCategory = "";
                        if (DtServicecharge.Rows.Count > 0)
                        {
                            PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                            {
                                ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                            }
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                            {
                                strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                            }
                            string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                            if (tempDescription.Trim().Length > 0)
                            {
                                strDescription = tempDescription;
                            }
                            if (strSCType.Length > 0)
                            {
                                bSCType = Convert.ToBoolean(strSCType);
                            }
                            GSTLineitem = Convert.ToBoolean(DtServicecharge.Rows[0]["GSTLineitem"].ToString());
                            PFNo = DtServicecharge.Rows[0]["PFBranchname"].ToString().Trim();
                            Esino = DtServicecharge.Rows[0]["EsiBranchname"].ToString().Trim();

                            strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                            strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                            ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                            if (strIncludeST == "True")
                            {
                                bIncludeST = true;
                            }
                            if (strST75 == "True")
                            {
                                bST75 = true;
                            }
                            POContent = DtServicecharge.Rows[0]["pono"].ToString();
                            Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                            BillNotes = DtServicecharge.Rows[0]["BillNotes"].ToString();
                            // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                            string tempServiceDesc = DtServicecharge.Rows[0]["ServiceChargeDesc"].ToString();
                            if (tempServiceDesc.Trim().Length > 0)
                            {
                                ServiceChargeDesc = tempServiceDesc;
                            }
                        }

                        #endregion

                        #region

                        string selectclientaddress = "select isnull(sg.segname,'') as segname,c.*, s.state as Statename,s.GSTStateCode,gst.gstno,gst.State as gststate,gst.StateCode as gstStateCode,gst.GSTAddress,s1.state as ShipState,s1.GSTStateCode as ShipToStateCode1 from clients c left join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin left join states s1 on s1.stateid=c.ShipToState where clientid= '" + ddlclientid.SelectedValue + "'";
                        DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
                        string OurGSTIN = "";
                        string GSTIN = "";
                        string StateCode = "0";
                        string State = "";
                        string ShipToGSTIN = "";
                        string ShipToStateCode = "0";
                        string ShipToState = "";
                        string gststate = "";
                        string gstStateCode = "";
                        string ClientPanno = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                            StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                            GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                            State = dtclientaddress.Rows[0]["Statename"].ToString();
                            Location = dtclientaddress.Rows[0]["Location"].ToString();
                            ClientPanno = dtclientaddress.Rows[0]["Panno"].ToString();
                            companyAddress = dtclientaddress.Rows[0]["GSTAddress"].ToString();
                            ShipToStateCode = dtclientaddress.Rows[0]["ShipToStateCode1"].ToString();
                            ShipToGSTIN = dtclientaddress.Rows[0]["ShipToGSTIN"].ToString();
                            ShipToState = dtclientaddress.Rows[0]["ShipState"].ToString();

                            gststate = dtclientaddress.Rows[0]["gststate"].ToString();
                            gstStateCode = dtclientaddress.Rows[0]["gstStateCode"].ToString();
                        }

                        string SelectBillNo = string.Empty;
                        if (ddlType.SelectedIndex == 0)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                        }
                        else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                        }
                        DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                        string BillNo = "";
                        string DisplayBillNo = "";
                        string area = "";
                        string ExtraRemarks = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            area = dtclientaddress.Rows[0]["segname"].ToString();
                        }

                        DateTime BillDate;
                        DateTime DueDate;


                        #region Variables for data Fields as on 11/03/2014 by venkat


                        float servicecharge = 0;
                        float servicetax = 0;
                        float cess = 0;
                        float sbcess = 0;
                        float kkcess = 0;


                        #region for GST on 17-6-2017 by swathi

                        float CGST = 0;
                        float SGST = 0;
                        float IGST = 0;
                        float Cess1 = 0;
                        float Cess2 = 0;
                        float CGSTPrc = 0;
                        float SGSTPrc = 0;
                        float IGSTPrc = 0;
                        float Cess1Prc = 0;
                        float Cess2Prc = 0;

                        #endregion for GST on 17-6-2017 by swathi


                        float shecess = 0;
                        float totalamount = 0;
                        float Grandtotal = 0;

                        float ServiceTax75 = 0;
                        float ServiceTax25 = 0;

                        float machinarycost = 0;
                        float materialcost = 0;
                        float maintenancecost = 0;
                        float extraonecost = 0;
                        float extratwocost = 0;
                        float discountone = 0;
                        float discounttwo = 0;

                        string machinarycosttitle = "";
                        string materialcosttitle = "";
                        string maintenancecosttitle = "";
                        string extraonecosttitle = "";
                        string extratwocosttitle = "";
                        string discountonetitle = "";
                        string discounttwotitle = "";

                        bool Extradatacheck = false;
                        bool ExtraDataSTcheck = false;

                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;

                        string strExtradatacheck = "";
                        string strExtrastcheck = "";

                        string strSTMachinary = "";
                        string strSTMaterial = "";
                        string strSTMaintenance = "";
                        string strSTExtraone = "";
                        string strSTExtratwo = "";

                        string strSCMachinary = "";
                        string strSCMaterial = "";
                        string strSCMaintenance = "";
                        string strSCExtraone = "";
                        string strSCExtratwo = "";

                        string strSTDiscountone = "";
                        string strSTDiscounttwo = "";

                        float staxamtonservicecharge = 0;
                        float RelChrgAmt = 0;
                        float PFAmt = 0;
                        float ESIAmt = 0;
                        float BpfPer = 0;
                        float BesiPer = 0;


                        #endregion

                        DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        // for both "1/1/2000" or "25/1/2000" formats
                        string billdt = dtn.ToString("MM/dd/yyyy");

                        string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                        DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                        string CGSTAlias = "";
                        string SGSTAlias = "";
                        string IGSTAlias = "";
                        string Cess1Alias = "";
                        string Cess2Alias = "";
                        string GSTINAlias = "";
                        string OurGSTINAlias = "";

                        string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                        DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                        string SCPersent = "";
                        if (DtTaxes.Rows.Count > 0)
                        {
                            SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                            CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                            SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                            IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                            Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                            Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                            GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                            OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        }
                        else
                        {
                            lblResult.Text = "There Is No Tax Values For Generating Bills ";
                            return;
                        }


                        if (DtBilling.Rows.Count > 0)
                        {

                            ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                            BillNo = DtBilling.Rows[0]["billno"].ToString();
                            DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                            BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());

                            OurGSTIN = DtBilling.Rows[0]["OURGSTNo"].ToString();
                            StateCode = DtBilling.Rows[0]["BillToStateCode"].ToString();
                            GSTIN = DtBilling.Rows[0]["BillToGSTNo"].ToString();
                            State = DtBilling.Rows[0]["BillToState"].ToString();
                            ShipToStateCode = DtBilling.Rows[0]["ShipToStateCode"].ToString();
                            ShipToGSTIN = DtBilling.Rows[0]["ShipToGSTNo"].ToString();
                            ShipToState = DtBilling.Rows[0]["ShipToState"].ToString();

                            if (ddlType.SelectedIndex == 0)
                            {
                                DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                                {
                                    ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                                {
                                    ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                                {
                                    servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                                {
                                    RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                                }

                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Bpfamt"].ToString()) == false)
                                {
                                    PFAmt = float.Parse(DtBilling.Rows[0]["Bpfamt"].ToString());
                                }


                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Besiamt"].ToString()) == false)
                                {
                                    ESIAmt = float.Parse(DtBilling.Rows[0]["Besiamt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BpfPer"].ToString()) == false)
                                {
                                    BpfPer = float.Parse(DtBilling.Rows[0]["BpfPer"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BesiPer"].ToString()) == false)
                                {
                                    BesiPer = float.Parse(DtBilling.Rows[0]["BesiPer"].ToString());
                                }

                            }

                            else
                            {
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                                {
                                    servicecharge = float.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                                }
                            }



                            #region Begin New code for values taken from database as on 11/03/2014 by venkat

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                            {
                                totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                            {
                                servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                            {
                                sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                            {
                                kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                            }

                            #region for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                            {
                                CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                            {
                                SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                            {
                                IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                            {
                                Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                            {
                                Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                            {
                                CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                            {
                                SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                            {
                                IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                            {
                                Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                            {
                                Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                            }

                            #endregion for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                            {
                                cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                            {
                                shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                            {
                                Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                            {
                                machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                            {
                                materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                            {
                                maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                            {
                                extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                            {
                                extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                            {
                                discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                            {
                                discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                            }

                            machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                            materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                            maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                            extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                            extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                            discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                            discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                            {
                                strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                                if (strExtradatacheck == "True")
                                {
                                    Extradatacheck = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                            {
                                strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                                if (strExtrastcheck == "True")
                                {
                                    ExtraDataSTcheck = true;
                                }
                            }



                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                            {
                                strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                                if (strSTMachinary == "True")
                                {
                                    STMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                            {
                                strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                                if (strSTMaterial == "True")
                                {
                                    STMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                            {
                                strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                                if (strSTMaintenance == "True")
                                {
                                    STMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                            {
                                strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                                if (strSTExtraone == "True")
                                {
                                    STExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                            {
                                strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                                if (strSTExtratwo == "True")
                                {
                                    STExtratwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                            {
                                strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                                if (strSCMachinary == "True")
                                {
                                    SCMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                            {
                                strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                                if (strSCMaterial == "True")
                                {
                                    SCMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                            {
                                strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                                if (strSCMaintenance == "True")
                                {
                                    SCMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                            {
                                strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                                if (strSCExtraone == "True")
                                {
                                    SCExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                            {
                                strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                                if (strSCExtratwo == "True")
                                {
                                    SCExtratwo = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                            {
                                staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                            }

                            #endregion
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                            return;
                        }
                        string Year = DateTime.Now.Year.ToString();
                        #endregion

                        document.AddTitle(companyName);
                        document.AddAuthor("DIYOS");
                        document.AddSubject("Invoice");
                        document.AddKeywords("Keyword1, keyword2, …");

                        PdfContentByte content = writer.DirectContent;
                        PdfPTable tablelogo = new PdfPTable(2);
                        tablelogo.TotalWidth = 560f;
                        tablelogo.LockedWidth = true;
                        float[] widtlogo = new float[] { 0.4f, 2f };
                        tablelogo.SetWidths(widtlogo);
                        if (chkletterhead.Checked == true)
                        {
                            PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                            CCompName.HorizontalAlignment = 1;
                            CCompName.Border = 0;
                            CCompName.Colspan = 2;
                            // CCompName.PaddingTop =50;
                            tablelogo.AddCell(CCompName);

                            PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            CCompAddress.HorizontalAlignment = 1;
                            CCompAddress.Border = 0;
                            CCompAddress.Colspan = 2;
                            // space between lines
                            CCompAddress.SetLeading(0f, 1.3f);
                            tablelogo.AddCell(CCompAddress);

                            PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellline.Border = 0;
                            cellline.Colspan = 2;
                            tablelogo.AddCell(cellline);
                            //For Space

                            PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celll.Border = 0;
                            celll.Colspan = 2;
                            celll.PaddingTop = 30f;
                            tablelogo.AddCell(celll);
                            tablelogo.AddCell(celll);
                            document.Add(tablelogo);
                        }
                        else
                        {
                            string imagepath = Server.MapPath("~/assets/" + CmpIDPrefix + "BillLogo.png");

                            if (File.Exists(imagepath))
                            {
                                iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);
                                gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                                gif2.ScalePercent(55f);
                                gif2.SetAbsolutePosition(20f, 753f);
                                document.Add(gif2);
                            }

                            var FontColour = new BaseColor(178, 34, 34);
                            Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                            //if (CmpIDPrefix == "STD")
                            {
                                PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 15, Font.BOLD, BaseColor.BLACK)));
                                CCompName1.HorizontalAlignment = 1;
                                CCompName1.Colspan = 2;
                                // CCompName1.PaddingTop = 20f;
                                CCompName1.Border = 0;
                                CCompName1.PaddingLeft = 80;
                                tablelogo.AddCell(CCompName1);

                                PdfPCell CCompName = new PdfPCell(new Paragraph("" + companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName.HorizontalAlignment = 1;
                                CCompName.Colspan = 2;
                                CCompName.Border = 0;
                                //CCompName.PaddingTop = 5f;
                                CCompName.PaddingLeft = 80;
                                CCompName.SetLeading(0, 1.2f);
                                tablelogo.AddCell(CCompName);
                            }


                            if (emailid.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 1;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                //CCompName2.PaddingTop = 4f;
                                CCompName2.PaddingLeft = 40;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (phoneno.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 1;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                CCompName2.PaddingBottom = 5;
                                tablelogo.AddCell(CCompName2);
                            }

                            var CelGSTaddr = new Paragraph();
                            CelGSTaddr.Add(new Chunk(CopyName, FontFactory.GetFont(FontStyle, 11 - 1, Font.BOLD, BaseColor.BLACK)));
                            CelGSTaddr.SetLeading(0, 1f);
                            PdfPCell CellGstaddress = new PdfPCell();
                            CellGstaddress.AddElement(CelGSTaddr);
                            CellGstaddress.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellGstaddress.Colspan = 2;
                            CellGstaddress.BorderWidthTop = 0;
                            CellGstaddress.BorderWidthBottom = 0;
                            CellGstaddress.BorderWidthLeft = 0;
                            CellGstaddress.BorderWidthRight = 0;
                            CellGstaddress.PaddingLeft = 430;
                            tablelogo.AddCell(CellGstaddress);

                            document.Add(tablelogo);
                        }

                        #region copy

                        PdfPTable address = new PdfPTable(5);
                        address.TotalWidth = 560f;
                        address.LockedWidth = true;
                        float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                        address.SetWidths(addreslogo);

                        PdfPCell Celemail = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
                        Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Celemail.Colspan = 5;
                        Celemail.BorderWidthTop = 0;
                        Celemail.BorderWidthBottom = 0;
                        Celemail.BorderWidthLeft = 0;
                        Celemail.BorderWidthRight = 0;
                        Celemail.PaddingTop = 10;
                        Celemail.BorderColor = BaseColor.BLACK;
                        address.AddCell(Celemail);

                        cell = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 5;
                        cell.Border = 0;
                        cell.PaddingTop = 10;
                        address.AddCell(cell);

                        PdfPTable tempTable1 = new PdfPTable(3);
                        tempTable1.TotalWidth = 335f;
                        tempTable1.LockedWidth = true;
                        float[] tempWidth1 = new float[] { 0.8f, 2f, 2f };
                        tempTable1.SetWidths(tempWidth1);


                        cell = new PdfPCell(new Paragraph("CLIENT GSTIN : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 3;
                        cell.Border = 0;
                        tempTable1.AddCell(cell);
                        cell = new PdfPCell(new Paragraph("CLIENT PAN : " + dtclientaddress.Rows[0]["BillToPanno"].ToString(), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 3;
                        cell.Border = 0;
                        tempTable1.AddCell(cell);
                        cell = new PdfPCell(new Paragraph("STATE CODE & NM : " + gstStateCode + " & " + gststate, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 3;
                        cell.Border = 0;
                        tempTable1.AddCell(cell);
                        if (GSTIN.Length > 1 || OurGSTIN.Length > 1)
                        {
                            cell = new PdfPCell(new Paragraph("GSTIN : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.WHITE)));
                            cell.HorizontalAlignment = 0;
                            cell.Colspan = 3;
                            cell.Border = 0;
                            tempTable1.AddCell(cell);
                        }


                        string addressData = "";

                        addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();

                        if (addressData.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = .2f;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable1.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 3;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcolony.Colspan = 3;
                            clientcolony.BorderWidthBottom = 0;
                            clientcolony.BorderWidthTop = 0;
                            clientcolony.BorderWidthLeft = .2f;
                            clientcolony.BorderWidthRight = 0.2f;
                            clientcolony.BorderColor = BaseColor.BLACK;
                            //clientcolony.PaddingLeft = 20;
                            tempTable1.AddCell(clientcolony);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientcity.Colspan = 3;
                            clientcity.BorderWidthBottom = 0;
                            clientcity.BorderWidthTop = 0;
                            clientcity.BorderWidthLeft = .2f;
                            clientcity.BorderWidthRight = 0.2f;
                            clientcity.BorderColor = BaseColor.BLACK;
                            //  clientcity.PaddingLeft = 20;
                            tempTable1.AddCell(clientcity);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstate.Colspan = 3;
                            clientstate.BorderWidthBottom = 0;
                            clientstate.BorderWidthTop = 0;
                            clientstate.BorderWidthLeft = .2f;
                            clientstate.BorderWidthRight = 0.2f;
                            clientstate.BorderColor = BaseColor.BLACK;
                            // clientstate.PaddingLeft = 20;
                            tempTable1.AddCell(clientstate);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }


                        cell = new PdfPCell(new Paragraph("\nOrder No.: ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell.Colspan = 3;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthRight = 0.2f;
                        cell.BorderColor = BaseColor.BLACK;
                        tempTable1.AddCell(cell);


                        PdfPCell childTable1 = new PdfPCell(tempTable1);
                        childTable1.Border = 0;
                        childTable1.Colspan = 3;
                        // childTable1.FixedHeight = 100;
                        childTable1.HorizontalAlignment = 0;

                        address.AddCell(childTable1);

                        PdfPTable tempTable2 = new PdfPTable(2);
                        tempTable2.TotalWidth = 225f;
                        tempTable2.LockedWidth = true;
                        float[] tempWidth2 = new float[] { 0.8f, 1.2f };
                        tempTable2.SetWidths(tempWidth2);

                        cell = new PdfPCell(new Paragraph("CIN : " + CINNo, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 3;
                        cell.Border = 0;
                        tempTable2.AddCell(cell);
                        cell = new PdfPCell(new Paragraph("MSME No. : " + MSMENo, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 3;
                        cell.Border = 0;
                        tempTable2.AddCell(cell);
                        cell = new PdfPCell(new Paragraph("PAN : " + PANNO, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Colspan = 3;
                        cell.Border = 0;
                        tempTable2.AddCell(cell);
                        if (OurGSTIN.Length > 1 || GSTIN.Length > 1)
                        {
                            cell = new PdfPCell(new Paragraph("GSTIN : " + OurGSTIN, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.Colspan = 3;
                            cell.Border = 0;
                            tempTable2.AddCell(cell);
                        }

                        var phrase = new Phrase();
                        phrase.Add(new Chunk("Invoice No.", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell13 = new PdfPCell();
                        cell13.AddElement(phrase);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = .2f;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10 = new Phrase();
                        phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = .2f;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phrase11 = new Phrase();
                        phrase11.Add(new Chunk("Invoice Date", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell131 = new PdfPCell();
                        cell131.AddElement(phrase11);
                        cell131.HorizontalAlignment = 0;
                        cell131.BorderWidthBottom = 0;
                        cell131.BorderWidthTop = 0;
                        cell131.Colspan = 1;
                        cell131.BorderWidthLeft = 0f;
                        cell131.BorderWidthRight = 0f;
                        cell131.PaddingTop = -5;
                        cell131.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131);

                        var phrase11v = new Phrase();
                        phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                            BillDate.Year, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell131v = new PdfPCell();
                        cell131v.AddElement(phrase11v);
                        cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131v.BorderWidthBottom = 0;
                        cell131v.BorderWidthTop = 0;
                        cell131v.Colspan = 1;
                        cell131v.BorderWidthLeft = 0;
                        cell131v.BorderWidthRight = .2f;
                        cell131v.PaddingTop = -5;
                        cell131v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131v);


                        var phraseim = new Phrase();
                        phraseim.Add(new Chunk("Month", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseim);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10im = new Phrase();
                        phrase10im.Add(new Chunk(": " + GetMonthName() + "'" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10im);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        string Fromdate = txtfromdate.Text;
                        string Todate = txttodate.Text;

                        if (Location.Length > 0)
                        {
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Place of Supply", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + Location, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }


                        PdfPCell childTable2 = new PdfPCell(tempTable2);
                        childTable2.Border = 0;
                        childTable2.Colspan = 2;
                        childTable2.HorizontalAlignment = 0;
                        address.AddCell(childTable2);


                        document.Add(address);





                        #endregion


                        #region
                        int countGrid = gvClientBilling.Rows.Count;


                        PdfPTable table = new PdfPTable(6);
                        table.TotalWidth = 560f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = 1;
                        float[] colWidths = new float[] { };
                        colWidths = new float[] { 7.1f, 2f, 2.2f, 1.5f, 1.5f, 2.7f };
                        table.SetWidths(colWidths);

                        string cellText;

                        #region

                        cell = new PdfPCell(new Phrase("DESCRIPTION/DETAILS", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("SAC/HSN", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.FixedHeight = 25;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Duties/\nShift", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Persons", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Amount (Rs)", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0.2f;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);


                        var SPName1 = "";
                        Hashtable HTPaysheet1 = new Hashtable();
                        SPName1 = "EmpWiseBillingDetails";
                        HTPaysheet1.Add("@ClientID", ddlclientid.SelectedValue);
                        HTPaysheet1.Add("@Month", month);
                        HTPaysheet1.Add("@BillNo", BillNo);
                        HTPaysheet1.Add("Option", 0);
                        DataTable dt1 = config.ExecuteAdaptorAsyncWithParams(SPName1, HTPaysheet1).Result;
                        if (dt1.Rows.Count > 0)
                        {
                            string HSNCode = "";
                            string Designation = "";
                            float PayRate = 0;
                            float Duties = 0;
                            float Persons = 0;
                            float BasicDA = 0;


                            for (int j = 0; j < dt1.Rows.Count; j++)
                            {
                                HSNCode = dt1.Rows[j]["HSNNumber"].ToString();
                                Designation = dt1.Rows[j]["Designation"].ToString();
                                PayRate = float.Parse(dt1.Rows[j]["PayRate"].ToString());
                                Duties = float.Parse(dt1.Rows[j]["DutyHrs"].ToString());
                                Persons = float.Parse(dt1.Rows[j]["NoofEmps"].ToString());
                                BasicDA = float.Parse(dt1.Rows[j]["BasicDA"].ToString());

                                cell = new PdfPCell(new Phrase(Designation + " As Per Detail Attached", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0.2f;
                                cell.BorderWidthLeft = 0.2f;
                                cell.BorderWidthTop = 0.2f;
                                cell.BorderWidthRight = 0f;
                                cell.PaddingTop = 5;
                                cell.BorderColor = BaseColor.BLACK;
                                table.AddCell(cell);

                                cell = new PdfPCell(new Phrase(HSNCode, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.2f;
                                cell.BorderWidthLeft = .2f;
                                cell.BorderWidthTop = 0.2f;
                                cell.BorderWidthRight = 0f;
                                cell.Colspan = 1;
                                cell.PaddingTop = 5;
                                cell.BorderColor = BaseColor.BLACK;
                                table.AddCell(cell);

                                cell = new PdfPCell(new Phrase(PayRate.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 2;
                                cell.BorderWidthBottom = 0.2f;
                                cell.BorderWidthLeft = 0.2f;
                                cell.BorderWidthTop = 0.2f;
                                cell.BorderWidthRight = 0f;
                                cell.PaddingTop = 5;
                                cell.BorderColor = BaseColor.BLACK;
                                table.AddCell(cell);

                                cell = new PdfPCell(new Phrase(Duties.ToString(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.2f;
                                cell.BorderWidthLeft = 0.2f;
                                cell.BorderWidthTop = 0.2f;
                                cell.BorderWidthRight = 0f;
                                cell.PaddingTop = 5;
                                cell.BorderColor = BaseColor.BLACK;
                                table.AddCell(cell);

                                cell = new PdfPCell(new Phrase(Persons.ToString(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 1;
                                cell.BorderWidthBottom = 0.2f;
                                cell.BorderWidthLeft = 0.2f;
                                cell.BorderWidthTop = 0.2f;
                                cell.BorderWidthRight = 0f;
                                cell.PaddingTop = 5;
                                cell.BorderColor = BaseColor.BLACK;
                                table.AddCell(cell);

                                cell = new PdfPCell(new Phrase(BasicDA.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 2;
                                cell.BorderWidthBottom = 0.2f;
                                cell.BorderWidthLeft = 0.2f;
                                cell.BorderWidthTop = 0.2f;
                                cell.BorderWidthRight = 0.2f;
                                cell.PaddingTop = 5;
                                cell.BorderColor = BaseColor.BLACK;
                                table.AddCell(cell);
                            }
                        }

                        #endregion

                        #region for space
                        PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty.HorizontalAlignment = 2;
                        Cellempty.Colspan = 1;
                        Cellempty.BorderWidthTop = 0;
                        Cellempty.BorderWidthRight = 0f;
                        Cellempty.BorderWidthLeft = .2f;
                        Cellempty.BorderWidthBottom = 0;
                        // Cellempty.MinimumHeight = 5;
                        Cellempty.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty1.HorizontalAlignment = 2;
                        Cellempty1.Colspan = 1;
                        Cellempty1.BorderWidthTop = 0;
                        Cellempty1.BorderWidthRight = 0f;
                        Cellempty1.BorderWidthLeft = 0.2f;
                        Cellempty1.BorderWidthBottom = 0;
                        Cellempty1.BorderColor = BaseColor.BLACK;


                        PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty2.HorizontalAlignment = 2;
                        Cellempty2.Colspan = 1;
                        Cellempty2.BorderWidthTop = 0;
                        Cellempty2.BorderWidthRight = 0f;
                        Cellempty2.BorderWidthLeft = .2f;
                        Cellempty2.BorderWidthBottom = 0;
                        Cellempty2.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty3.HorizontalAlignment = 2;
                        Cellempty3.Colspan = 1;
                        Cellempty3.BorderWidthTop = 0;
                        Cellempty3.BorderWidthRight = 0;
                        Cellempty3.BorderWidthLeft = 0.2f;
                        Cellempty3.BorderWidthBottom = 0;
                        Cellempty3.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty4.HorizontalAlignment = 2;
                        Cellempty4.Colspan = 1;
                        Cellempty4.BorderWidthTop = 0;
                        Cellempty4.BorderWidthRight = 0f;
                        Cellempty4.BorderWidthLeft = 0.2f;
                        Cellempty4.BorderWidthBottom = 0;
                        Cellempty4.BorderColor = BaseColor.BLACK;

                        PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellempty5.HorizontalAlignment = 2;
                        Cellempty5.Colspan = 1;
                        Cellempty5.BorderWidthTop = 0;
                        Cellempty5.BorderWidthRight = .2f;
                        Cellempty5.BorderWidthLeft = 0.2f;
                        Cellempty5.BorderWidthBottom = 0;
                        Cellempty5.BorderColor = BaseColor.BLACK;



                        if (gvClientBilling.Rows.Count == 1)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 13; i++)
                                {
                                    //1

                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 2)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 12; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }
                            else
                            {

                                for (int i = 0; i < 10; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }



                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 3)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 11; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);
                                }
                            }
                            else
                            {

                                for (int i = 0; i < 9; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }

                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 4)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    //1
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 5)
                        {
                            #region For cell count

                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 9; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 6)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 8; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 7)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 7; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }


                            #endregion
                        }
                        if (gvClientBilling.Rows.Count == 8)
                        {
                            #region For cell count
                            if (!bIncludeST)
                            {
                                for (int i = 0; i < 6; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }
                            else
                            {
                                for (int i = 0; i < 4; i++)
                                {
                                    table.AddCell(Cellempty);
                                    table.AddCell(Cellempty1);
                                    table.AddCell(Cellempty2);
                                    table.AddCell(Cellempty3);
                                    table.AddCell(Cellempty4);
                                    table.AddCell(Cellempty5);

                                }
                            }


                            #endregion
                        }




                        #endregion

                        document.Add(table);

                        // tablelogo.AddCell(celll);

                        PdfPTable MaintempTable = new PdfPTable(6);
                        MaintempTable.TotalWidth = 560f;
                        MaintempTable.LockedWidth = true;
                        float[] maintempWidth = new float[] { };
                        maintempWidth = new float[] { 2f, 2f, 2f, 2f, 2.1f, 1.9f };
                        MaintempTable.SetWidths(maintempWidth);

                        PdfPTable tempTabl2 = new PdfPTable(4);
                        tempTabl2.TotalWidth = 373f;
                        tempTabl2.LockedWidth = true;
                        float[] tempwiTabl2 = new float[] { };
                        tempwiTabl2 = new float[] { 2f, 2f, 2f, 2f };
                        tempTabl2.SetWidths(tempwiTabl2);


                        if (PFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO : " + PFNo, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = .2f;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);

                        }
                        else if (CmpPFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO : " + CmpPFNo, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = .2f;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);


                        }
                        if (Esino.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("ESI CODE NO : " + Esino, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }
                        else if (CmpEsino.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("ESI CODE NO: " + CmpEsino, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }

                        if (notes.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("PAYMENT TERMS :", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            cell.PaddingTop = 20;
                            tempTabl2.AddCell(cell);

                            cell = new PdfPCell(new Phrase(notes, FontFactory.GetFont(FontStyle, font - 2, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.SetLeading(0, 1.3f);
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }

                        if (BankName.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("Bank Name : " + BankName, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.PaddingTop = 20;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }
                        if (BranchName.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("Branch : " + BranchName, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }
                        if (BankAcNumber.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("Ac No. : " + BankAcNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }
                        if (IFSCCode.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("IFSC Code : " + IFSCCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 4;
                            cell.BorderColor = BaseColor.BLACK;
                            tempTabl2.AddCell(cell);
                        }

                        cell = new PdfPCell(new Phrase(lblamtinwords.Text.Trim(), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 4;
                        cell.PaddingTop = 5;
                        cell.MinimumHeight = 25;
                        cell.BorderColor = BaseColor.BLACK;
                        tempTabl2.AddCell(cell);


                        cell = new PdfPCell(new Phrase("For Enquires - Call" + ForEnquiresCall, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.PaddingTop = 10;
                        cell.Colspan = 4;
                        cell.BorderColor = BaseColor.BLACK;
                        tempTabl2.AddCell(cell);

                        PdfPCell endftempTable2 = new PdfPCell(tempTabl2);
                        endftempTable2.Border = 0;
                        endftempTable2.Colspan = 4;
                        endftempTable2.HorizontalAlignment = 0;
                        MaintempTable.AddCell(endftempTable2);


                        PdfPTable tempTable22 = new PdfPTable(2);
                        tempTable22.TotalWidth = 187f;
                        tempTable22.LockedWidth = true;
                        float[] tempWidth22 = new float[] { };
                        tempWidth22 = new float[] { 2.1f, 1.9f };
                        tempTable22.SetWidths(tempWidth22);

                        #region

                        if (RelChrgAmt > 0)
                        {

                            PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldz5.Colspan = 1;
                            celldz5.BorderWidthBottom = 0;
                            celldz5.BorderWidthLeft = .2f;
                            celldz5.BorderWidthTop = 0;
                            celldz5.BorderWidthRight = .2f;
                            celldz5.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz5);

                            PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldz6.BorderWidthBottom = 0;
                            celldz6.BorderWidthLeft = .2f;
                            celldz6.BorderWidthTop = 0;
                            celldz6.BorderWidthRight = .2f;
                            celldz6.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldz6);
                        }

                        PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz1.Colspan = 1;
                        celldz1.BorderWidthBottom = 0;
                        celldz1.BorderWidthLeft = .2f;
                        celldz1.BorderWidthTop = .2f;
                        celldz1.BorderWidthRight = 0;
                        celldz1.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz1);

                        PdfPCell celldz4 = new PdfPCell(new Phrase(" " + (totalamount - (PFAmt + ESIAmt)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz4.BorderWidthBottom = 0;
                        celldz4.BorderWidthLeft = 0.2f;
                        celldz4.BorderWidthTop = .2f;
                        celldz4.BorderWidthRight = .2f;
                        celldz4.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(celldz4);


                        if (PFAmt > 0)
                        {

                            PdfPCell CellCGST = new PdfPCell(new Phrase("EPF Employer Share @ " + BpfPer + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = 1;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = .2f;
                            CellCGST.BorderWidthTop = 0.2f;
                            CellCGST.BorderWidthRight = 0f;
                            // CellCGST.PaddingBottom = 5;
                            // CellCGST.PaddingTop = 5;
                            CellCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(PFAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0.2f;
                            CellCGSTAmt.BorderWidthTop = 0.2f;
                            CellCGSTAmt.BorderWidthRight = .2f;
                            CellCGSTAmt.BorderColor = BaseColor.BLACK;
                            //CellCGSTAmt.PaddingBottom = 5;
                            //CellCGSTAmt.PaddingTop = 5;
                            tempTable22.AddCell(CellCGSTAmt);

                        }


                        if (ESIAmt > 0)
                        {

                            PdfPCell CellCGST = new PdfPCell(new Phrase("ESI Employer Share @ " + BesiPer + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = 1;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = .2f;
                            CellCGST.BorderWidthTop = 0.2f;
                            CellCGST.BorderWidthRight = 0f;
                            // CellCGST.PaddingBottom = 5;
                            // CellCGST.PaddingTop = 5;
                            CellCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(ESIAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0.2f;
                            CellCGSTAmt.BorderWidthTop = 0.2f;
                            CellCGSTAmt.BorderWidthRight = .2f;
                            CellCGSTAmt.BorderColor = BaseColor.BLACK;
                            //CellCGSTAmt.PaddingBottom = 5;
                            //CellCGSTAmt.PaddingTop = 5;
                            tempTable22.AddCell(CellCGSTAmt);
                        }

                        #region When Extradata check is false and STcheck is false

                        if (Extradatacheck == true)
                        {
                            if (machinarycost > 0)
                            {
                                if (STMachinary == false)
                                {
                                    if (SCMachinary == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == false)
                                {
                                    if (SCMaterial == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == false)
                                {
                                    if (SCMaintenance == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == false)
                                {
                                    if (SCExtraone == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == false)
                                {
                                    if (SCExtratwo == false)
                                    {

                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                        }
                        #endregion
                        #endregion

                        Fromdate = txtfromdate.Text;
                        Todate = txttodate.Text;

                        #region



                        #region
                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == true)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2;
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == true)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);


                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        #endregion

                        #region When Extra data is checked and STcheck is false and SCcheck is true

                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == true)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }

                            // bool SCMachinary = false;
                            //bool SCMaterial = false;
                            // bool SCMaintenance = false;
                            //bool SCExtraone = false;
                            //bool SCExtratwo = false;


                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == true)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 1;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = .2f;
                                    celldcst1.BorderWidthTop = 0.2f;
                                    celldcst1.BorderWidthRight = 0.2f;
                                    celldcst1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0f;
                                    celldcst2.BorderWidthTop = 0.2f;
                                    celldcst2.BorderWidthRight = .2f;
                                    celldcst2.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        #endregion
                        if (servicecharge > 0)//bSCType == true)
                        {
                            float scharge = servicecharge;
                            if (scharge > 0)
                            {
                                string SCharge = "";
                                if (bSCType == false)
                                {
                                    SCharge = ServiceCharge + "%";
                                }
                                else
                                {
                                    SCharge = ServiceCharge;
                                }

                                //if (ServiceChargeDesc.Length > 0)
                                {


                                    PdfPCell celldc3 = new PdfPCell(new Phrase(ServiceChargeDesc + " @ " + SCharge, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                    celldc3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldc3.Colspan = 1;
                                    celldc3.BorderWidthBottom = 0;
                                    celldc3.BorderWidthLeft = .2f;
                                    celldc3.BorderWidthTop = 0.2f;
                                    celldc3.BorderWidthRight = 0.2f;
                                    celldc3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldc3);
                                }
                                //else
                                //{
                                //    PdfPCell CellIGST2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                //    CellIGST2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                //    CellIGST2.Colspan = colCount - 2;
                                //    CellIGST2.BorderWidthBottom = 0;
                                //    CellIGST2.BorderWidthLeft = .2f;
                                //    CellIGST2.BorderWidthTop = 0f;
                                //    CellIGST2.BorderWidthRight = 0.2f;
                                //    // CellCGST.PaddingBottom = 5;
                                //    // CellCGST.PaddingTop = 5;
                                //    CellIGST2.BorderColor = BaseColor.BLACK;
                                //    tempTable22.AddCell(CellIGST2);

                                //    PdfPCell celldc2 = new PdfPCell(new Phrase(ServiceChargeDesc + " @ " + SCharge, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                //    celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                //    celldc2.Colspan =  1;
                                //    celldc2.BorderWidthBottom = 0;
                                //    celldc2.BorderWidthLeft = .2f;
                                //    celldc2.BorderWidthTop = 0;
                                //    celldc2.BorderWidthRight = 0.2f;
                                //    celldc2.BorderColor = BaseColor.BLACK;
                                //    tempTable22.AddCell(celldc2);
                                //}

                                PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldc4.BorderWidthBottom = 0;
                                celldc4.BorderWidthLeft = .2f;
                                celldc4.BorderWidthTop = 0.2f;
                                celldc4.BorderWidthRight = .2f;
                                celldc4.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldc4);
                            }


                            if (STDiscountone == true)
                            {
                                if (discountone > 0)
                                {


                                    PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt1.Colspan = 1;
                                    celldMt1.BorderWidthBottom = 0;
                                    celldMt1.BorderWidthLeft = .2f;
                                    celldMt1.BorderWidthTop = 0.2f;
                                    celldMt1.BorderWidthRight = .2f;
                                    celldMt1.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt1);


                                    PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt3.BorderWidthBottom = 0;
                                    celldMt3.BorderWidthLeft = .2f;
                                    celldMt3.BorderWidthTop = 0.2f;
                                    celldMt3.BorderWidthRight = .2f;
                                    celldMt3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt3);
                                }
                            }

                            if (STDiscounttwo == true)
                            {
                                if (discounttwo > 0)
                                {

                                    PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt1.BorderWidthBottom = 0;
                                    celldMt1.BorderWidthLeft = .2f;
                                    celldMt1.BorderWidthTop = 0.2f;
                                    celldMt1.BorderWidthRight = .2f;
                                    celldMt1.BorderColor = BaseColor.BLACK;
                                    celldMt1.Colspan = 1;
                                    tempTable22.AddCell(celldMt1);

                                    PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                    celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldMt3.BorderWidthBottom = 0;
                                    celldMt3.BorderWidthLeft = .2f;
                                    celldMt3.BorderWidthTop = 0.2f;
                                    celldMt3.BorderWidthRight = .2f;
                                    celldMt3.BorderColor = BaseColor.BLACK;
                                    tempTable22.AddCell(celldMt3);
                                }
                            }



                            PdfPCell Cellb4tax = new PdfPCell(new Phrase("Total Before Tax", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            Cellb4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellb4tax.Colspan = 1;
                            Cellb4tax.BorderWidthBottom = 0;
                            Cellb4tax.BorderWidthLeft = .2f;
                            Cellb4tax.BorderWidthTop = 0.2f;
                            Cellb4tax.BorderWidthRight = 0.2f;
                            Cellb4tax.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(Cellb4tax);


                            PdfPCell Cellb4tax1 = new PdfPCell(new Phrase(((servicecharge + totalamount) - (discountone + discounttwo)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            Cellb4tax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellb4tax1.BorderWidthBottom = 0;
                            Cellb4tax1.BorderWidthLeft = .2f;
                            Cellb4tax1.BorderWidthTop = 0.2f;
                            Cellb4tax1.BorderWidthRight = .2f;
                            Cellb4tax1.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(Cellb4tax1);




                        }

                        if (STDiscountone == false)
                        {
                            if (discountone > 0)
                            {

                                PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = 1;
                                celldMt1.BorderWidthBottom = 0;
                                celldMt1.BorderWidthLeft = .2f;
                                celldMt1.BorderWidthTop = 0.2f;
                                celldMt1.BorderWidthRight = .2f;
                                celldMt1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt1);


                                PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt3.BorderWidthBottom = 0;
                                celldMt3.BorderWidthLeft = .2f;
                                celldMt3.BorderWidthTop = 0.2f;
                                celldMt3.BorderWidthRight = .2f;
                                celldMt3.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt3);
                            }
                        }
                        if (STDiscounttwo == false)
                        {
                            if (discounttwo > 0)
                            {


                                PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt1.BorderWidthBottom = 0;
                                celldMt1.BorderWidthLeft = .2f;
                                celldMt1.BorderWidthTop = 0.2f;
                                celldMt1.BorderWidthRight = .2f;
                                celldMt1.BorderColor = BaseColor.BLACK;
                                celldMt1.Colspan = 1;
                                tempTable22.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt3.BorderWidthBottom = 0;
                                celldMt3.BorderWidthLeft = .2f;
                                celldMt3.BorderWidthTop = 0.2f;
                                celldMt3.BorderWidthRight = .2f;
                                celldMt3.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldMt3);
                            }
                        }


                        #endregion

                        #region When Extra data is checked and STcheck is true
                        if (Extradatacheck == true)
                        {
                            //float machineryCostwithst = 0;
                            //if (lblMachinerywithst.Text.Length > 0)
                            //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                            if (machinarycost > 0)
                            {
                                if (STMachinary == true)
                                {
                                    if (SCMachinary == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;

                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            //float materialcostwithst = 0;
                            //if (lblMaterialwithst.Text.Length > 0)
                            //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                            if (materialcost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    if (SCMaterial == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                            //float electricalcostwithst = 0;
                            //if (lblElectricalwithst.Text.Length > 0)
                            //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    if (SCMaintenance == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }

                            //float extraamtwithst = 0;
                            //if (lblextraonewithst.Text.Length > 0)
                            //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                            if (extraonecost > 0)
                            {
                                if (STExtraone == true)
                                {
                                    if (SCExtraone == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);


                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }
                            //float Extraamtwithst1 = 0;
                            //if (lblextratwowithst.Text.Length > 0)
                            //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    if (SCExtratwo == false)
                                    {


                                        PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst1.Colspan = 1;
                                        celldcst1.BorderWidthBottom = 0;
                                        celldcst1.BorderWidthLeft = .2f;
                                        celldcst1.BorderWidthTop = 0.2f;
                                        celldcst1.BorderWidthRight = .2f;
                                        celldcst1.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst1);

                                        PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                        celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                        celldcst2.BorderWidthBottom = 0;
                                        celldcst2.BorderWidthLeft = .2f;
                                        celldcst2.BorderWidthTop = 0.2f;
                                        celldcst2.BorderWidthRight = .2f;
                                        celldcst2.BorderColor = BaseColor.BLACK;
                                        tempTable22.AddCell(celldcst2);
                                    }
                                }
                            }


                        }

                        #endregion

                        #region for taxes

                        if (!bIncludeST)
                        {

                            string scpercent = "";
                            if (bST75 == true)
                            {
                                scpercent = "3";
                            }
                            else
                            {
                                scpercent = SCPersent;
                            }

                            if (servicetax > 0)
                            {


                                PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0.2f;
                                celldd2.BorderWidthRight = 0f;
                                //celldd2.PaddingBottom = 5;
                                //celldd2.PaddingTop = 5;
                                celldd2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0.2f;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }

                            if (sbcess > 0)
                            {


                                string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                                PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + SBCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd2.Colspan = 1;
                                celldd2.BorderWidthBottom = 0;
                                celldd2.BorderWidthLeft = .2f;
                                celldd2.BorderWidthTop = 0.2f;
                                celldd2.BorderWidthRight = 0f;
                                celldd2.BorderColor = BaseColor.BLACK;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                tempTable22.AddCell(celldd2);


                                PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldd4.BorderWidthBottom = 0;
                                celldd4.BorderWidthLeft = 0.2f;
                                celldd4.BorderWidthTop = 0.2f;
                                celldd4.BorderWidthRight = .2f;
                                celldd4.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(celldd4);

                            }


                            if (kkcess > 0)
                            {



                                string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                                PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + KKCESSPresent + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk1.Colspan = 1;
                                Cellmtcesskk1.BorderWidthBottom = 0;
                                Cellmtcesskk1.BorderWidthLeft = .2f;
                                Cellmtcesskk1.BorderWidthTop = 0.2f;
                                Cellmtcesskk1.BorderWidthRight = 0f;
                                // celldd2.PaddingBottom = 5;
                                // celldd2.PaddingTop = 5;
                                Cellmtcesskk1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(Cellmtcesskk1);

                                PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cellmtcesskk2.BorderWidthBottom = 0;
                                Cellmtcesskk2.BorderWidthLeft = 0.2f;
                                Cellmtcesskk2.BorderWidthTop = 0.2f;
                                Cellmtcesskk2.BorderWidthRight = .2f;
                                Cellmtcesskk2.BorderColor = BaseColor.BLACK;
                                //celldd4.PaddingBottom = 5;
                                //celldd4.PaddingTop = 5;
                                tempTable22.AddCell(Cellmtcesskk2);

                            }

                            #region for GST as on 17-6-2017

                            if (CGST > 0)
                            {


                                PdfPCell CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                                CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGST.Colspan = 1;
                                CellCGST.BorderWidthBottom = 0;
                                CellCGST.BorderWidthLeft = .2f;
                                CellCGST.BorderWidthTop = 0.2f;
                                CellCGST.BorderWidthRight = 0f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCGST);

                                PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGSTAmt.BorderWidthBottom = 0;
                                CellCGSTAmt.BorderWidthLeft = 0.2f;
                                CellCGSTAmt.BorderWidthTop = 0.2f;
                                CellCGSTAmt.BorderWidthRight = .2f;
                                CellCGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellCGSTAmt.PaddingBottom = 5;
                                //CellCGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellCGSTAmt);

                            }


                            if (SGST > 0)
                            {


                                PdfPCell CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                                CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGST.Colspan = 1;
                                CellSGST.BorderWidthBottom = 0;
                                CellSGST.BorderWidthLeft = .2f;
                                CellSGST.BorderWidthTop = 0.2f;
                                CellSGST.BorderWidthRight = 0f;
                                // CellSGST.PaddingBottom = 5;
                                // CellSGST.PaddingTop = 5;
                                CellSGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellSGST);

                                PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGSTAmt.BorderWidthBottom = 0;
                                CellSGSTAmt.BorderWidthLeft = 0.2f;
                                CellSGSTAmt.BorderWidthTop = 0.2f;
                                CellSGSTAmt.BorderWidthRight = .2f;
                                CellSGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellSGSTAmt.PaddingBottom = 5;
                                //CellSGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellSGSTAmt);


                            }

                            if (IGST > 0)
                            {


                                PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGST.Colspan = 1;
                                CellIGST.BorderWidthBottom = 0;
                                CellIGST.BorderWidthLeft = .2f;
                                CellIGST.BorderWidthTop = 0.2f;
                                CellIGST.BorderWidthRight = 0f;
                                // CellIGST.PaddingBottom = 5;
                                // CellIGST.PaddingTop = 5;
                                CellIGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST);

                                PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGSTAmt.BorderWidthBottom = 0;
                                CellIGSTAmt.BorderWidthLeft = 0.2f;
                                CellIGSTAmt.BorderWidthTop = 0.2f;
                                CellIGSTAmt.BorderWidthRight = .2f;
                                CellIGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellIGSTAmt.PaddingBottom = 5;
                                //CellIGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellIGSTAmt);


                            }

                            if (Cess1 > 0)
                            {


                                PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1.Colspan = 1;
                                CellCess1.BorderWidthBottom = 0;
                                CellCess1.BorderWidthLeft = .2f;
                                CellCess1.BorderWidthTop = 0.2f;
                                CellCess1.BorderWidthRight = 0f;
                                // CellCess1.PaddingBottom = 5;
                                // CellCess1.PaddingTop = 5;
                                CellCess1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess1);

                                PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess1Amt.BorderWidthBottom = 0;
                                CellCess1Amt.BorderWidthLeft = 0.2f;
                                CellCess1Amt.BorderWidthTop = 0.2f;
                                CellCess1Amt.BorderWidthRight = .2f;
                                CellCess1Amt.BorderColor = BaseColor.BLACK;
                                //CellCess1Amt.PaddingBottom = 5;
                                //CellCess1Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess1Amt);

                            }


                            if (Cess2 > 0)
                            {

                                PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2.Colspan = 1;
                                CellCess2.BorderWidthBottom = 0;
                                CellCess2.BorderWidthLeft = .2f;
                                CellCess2.BorderWidthTop = 0.2f;
                                CellCess2.BorderWidthRight = 0f;
                                // CellCess2.PaddingBottom = 5;
                                // CellCess2.PaddingTop = 5;
                                CellCess2.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCess2);

                                PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCess2Amt.BorderWidthBottom = 0;
                                CellCess2Amt.BorderWidthLeft = 0.2f;
                                CellCess2Amt.BorderWidthTop = 0.2f;
                                CellCess2Amt.BorderWidthRight = .2f;
                                CellCess2Amt.BorderColor = BaseColor.BLACK;
                                //CellCess2Amt.PaddingBottom = 5;
                                //CellCess2Amt.PaddingTop = 5;
                                tempTable22.AddCell(CellCess2Amt);

                            }

                            #endregion for GST

                        }



                        #endregion for taxes

                        PdfPCell endtempTable22 = new PdfPCell(tempTable22);
                        endtempTable22.Border = 0;
                        endtempTable22.Colspan = 2;
                        endtempTable22.HorizontalAlignment = 0;
                        MaintempTable.AddCell(endtempTable22);

                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 4;
                        cell.MinimumHeight = 20;
                        MaintempTable.AddCell(cell);
                        cell = new PdfPCell(new Phrase("Gross Bill Value", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        MaintempTable.AddCell(cell);
                        cell = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = .2f;
                        MaintempTable.AddCell(cell);


                        string Amountinwords = NumberToEnglish.Instance.changeNumericToWords(Grandtotal.ToString());




                        document.Add(MaintempTable);


                        #region footer

                        PdfPTable Addterms = new PdfPTable(3);
                        Addterms.TotalWidth = 560f;
                        Addterms.LockedWidth = true;
                        float[] widthrerms = new float[] { 2f, 2f, 4f };
                        Addterms.SetWidths(widthrerms);

                        cell = new PdfPCell(new Phrase("E.&O.E", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Border = 0;
                        cell.Colspan = 3;
                        Addterms.AddCell(cell);

                        cell = new PdfPCell(new Phrase("Prepared by.", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Border = 0;
                        Addterms.AddCell(cell);
                        cell = new PdfPCell(new Phrase("                 Checked by.", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Border = 0;
                        Addterms.AddCell(cell);
                        cell = new PdfPCell(new Phrase(companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.Border = 0;
                        Addterms.AddCell(cell);

                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Border = 0;
                        cell.PaddingTop = 40;
                        Addterms.AddCell(cell);
                        cell = new PdfPCell(new Phrase("                 Signature", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Border = 0;
                        cell.PaddingTop = 40;
                        Addterms.AddCell(cell);
                        cell = new PdfPCell(new Phrase("Authorised Signatory", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.Border = 0;
                        cell.PaddingTop = 40;
                        Addterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase("ENCLOSURES :", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.Border = 0;
                        cell.Colspan = 3;
                        Addterms.AddCell(cell);



                        document.Add(Addterms);


                        #endregion
                        #endregion


                        #endregion

                        document.NewPage();

                        #region support sheet Table Headings

                        var SPName = "";
                        Hashtable HTPaysheet = new Hashtable();
                        SPName = "EmpWiseBillingDetails";
                        HTPaysheet.Add("@ClientID", ddlclientid.SelectedValue);
                        HTPaysheet.Add("@Month", month);
                        HTPaysheet.Add("@BillNo", BillNo);
                        HTPaysheet.Add("Option", 1);
                        DataTable dt = config.ExecuteAdaptorAsyncWithParams(SPName, HTPaysheet).Result;

                        PdfPTable SMaintable = new PdfPTable(9);
                        SMaintable.TotalWidth = 500f;
                        SMaintable.LockedWidth = true;
                        float[] width = new float[] { 1f, 2.5f, 2f, 2.5f, 2.6f, 1.7f, 1.7f, 2f, 2f };
                        SMaintable.SetWidths(width);


                        if (dt.Rows.Count > 0)
                        {


                            PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            cellemp.Colspan = 9;
                            cellemp.Border = 0;

                            PdfPCell Heading = new PdfPCell(new Phrase(GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            Heading.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            Heading.Colspan = 9;
                            Heading.Border = 0;
                            SMaintable.AddCell(Heading);

                            DataTable DtGroup = dt.DefaultView.ToTable(true, "Designation");
                            if (dt.Rows.Count > 0)
                            {
                                for (int K = 0; K < DtGroup.Rows.Count; K++)
                                {
                                    string Type = DtGroup.Rows[K]["Designation"].ToString();


                                    PdfPCell Heading1 = new PdfPCell(new Phrase(ddlCname.SelectedItem.Text, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    Heading1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    Heading1.Colspan = 9;
                                    Heading1.Border = 0;
                                    Heading1.PaddingTop = 10;
                                    SMaintable.AddCell(Heading1);

                                    PdfPCell Heading2 = new PdfPCell(new Phrase("Billing for the month of " + GetMonthName() + "-" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    Heading2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    Heading2.Colspan = 9;
                                    Heading2.Border = 0;
                                    SMaintable.AddCell(Heading2);

                                    Heading2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    Heading2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    Heading2.Colspan = 9;
                                    Heading2.Border = 0;
                                    Heading2.PaddingTop = 15;
                                    SMaintable.AddCell(Heading2);

                                    PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                                 //sNo.Colspan = 1;
                                    sNo.Border = 15;// 15;
                                    SMaintable.AddCell(sNo);

                                    //2
                                    PdfPCell CEmpId = new PdfPCell(new Phrase("Location", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CEmpId.Border = 15;// 15;
                                    SMaintable.AddCell(CEmpId);

                                    //3
                                    PdfPCell CEmpName = new PdfPCell(new Phrase("Store Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CEmpName.Border = 15;// 15;
                                    SMaintable.AddCell(CEmpName);

                                    //4
                                    PdfPCell CDesgn = new PdfPCell(new Phrase("INV No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    CDesgn.Border = 15;
                                    SMaintable.AddCell(CDesgn);



                                    cell = new PdfPCell(new Phrase("Rank", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase("Strength", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase("Duty", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase("Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    float totalemps = 0;
                                    float totalduties = 0;
                                    totalamount = 0;
                                    float totalRate = 0;
                                    int sno = 1;

                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {

                                        if (DtGroup.Rows[K]["Designation"].ToString() == dt.Rows[i]["Designation"].ToString())
                                        {

                                            string EmpName = dt.Rows[i]["Location"].ToString();
                                            string Designation = dt.Rows[i]["Designation"].ToString();
                                            string StoreCode = dt.Rows[i]["StoreCode"].ToString();
                                            float DutyHrs = float.Parse(dt.Rows[i]["DutyHrs"].ToString());
                                            float NoofEmps = float.Parse(dt.Rows[i]["NoofEmps"].ToString());
                                            float ActualAmount = float.Parse(dt.Rows[i]["BasicDA"].ToString());
                                            string invno = dt.Rows[i]["invno"].ToString();
                                            float Payrate = float.Parse(dt.Rows[i]["PayRate"].ToString());

                                            cell = new PdfPCell(new Phrase(sno++.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                                          //sNo.Colspan = 1;
                                            cell.Border = 15;// 15;
                                            SMaintable.AddCell(cell);

                                            //2
                                            cell = new PdfPCell(new Phrase(EmpName, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;// 15;
                                            SMaintable.AddCell(cell);

                                            //4
                                            cell = new PdfPCell(new Phrase(StoreCode, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);



                                            cell = new PdfPCell(new Phrase(DisplayBillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);

                                            cell = new PdfPCell(new Phrase(Designation, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);

                                            cell = new PdfPCell(new Phrase(NoofEmps.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);
                                            totalemps += float.Parse(NoofEmps.ToString());

                                            cell = new PdfPCell(new Phrase(DutyHrs.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);
                                            totalduties += float.Parse(DutyHrs.ToString());

                                            cell = new PdfPCell(new Phrase(Payrate.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);
                                            totalRate += float.Parse(Payrate.ToString());

                                            cell = new PdfPCell(new Phrase(ActualAmount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                            cell.Border = 15;
                                            SMaintable.AddCell(cell);
                                            totalamount += float.Parse(ActualAmount.ToString());
                                        }
                                    }

                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;// 15;
                                    SMaintable.AddCell(cell);

                                    //2
                                    cell = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;// 15;
                                    SMaintable.AddCell(cell);

                                    //4
                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);



                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase(totalemps.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);


                                    cell = new PdfPCell(new Phrase(totalduties.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);


                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);


                                    cell = new PdfPCell(new Phrase(totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 15;
                                    SMaintable.AddCell(cell);

                                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                    cell.Border = 0;
                                    cell.Colspan = 9;
                                    cell.FixedHeight = 20f;
                                    SMaintable.AddCell(cell);

                                    document.NewPage();
                                }
                            }
                        }
                        document.Add(SMaintable);
                        #endregion
                    }

                    document.Close();

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btnlifestyleBill_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            MemoryStream ms = new MemoryStream();

            Document document = new Document();
            if (chkletterhead.Checked == true)
            {
                document = new Document(PageSize.A4, 0, 0, 100, 10);
            }
            else
            {
                document = new Document(PageSize.A4, 0, 0, 0, 0);
            }
            Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            string filename = "";
            string CopyName = "";
            document.Open();

            BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            string SelectBillNo = string.Empty;
            string DisplayBillNo = "";

            if (ddlType.SelectedIndex == 0)
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
            }
            else
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
            }
            DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;

            if (DtBilling.Rows.Count > 0)
            {
                DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
            }


            DownloadLifestyleBill(document, ms);

            filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
            Response.Buffer = true;
            Response.Clear();
            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
            Response.OutputStream.Flush();
            Response.End();
        }

        public string GetMonthNew()
        {

            string DateVal = "";

            var testDate = 0;
            string EnteredDate = "";

            #region Validation

            if (txtmonth.Text.Trim().Length > 0)
            {

                try
                {

                    testDate = GlobalData.Instance.CheckEnteredDate(txtmonth.Text);
                    if (testDate > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return "0";
                    }
                    EnteredDate = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb")).ToString();
                }
                catch (Exception ex)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                    return "0";
                }
            }
            #endregion

            #region  Month Get Based on the Control Selection
            int month = 0;
            if (Chk_Month.Checked == false)
            {
                month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                DateVal = monthval(month);

            }
            if (Chk_Month.Checked == true)
            {
                DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                month = Timings.Instance.GetIdForEnteredMOnth(date);
                DateVal = monthval(month);
            }
            return DateVal;

            #endregion

        }

        public string monthval(int month)
        {
            string monthnew = "";

            if (month.ToString().Length == 3)
            {
                monthnew = month.ToString().Substring(1, 2) + 0 + month.ToString().Substring(0, 1);
            }
            else
            {
                monthnew = month.ToString().Substring(2, 2) + month.ToString().Substring(0, 2);
            }

            return monthnew;

        }

        protected void lnkExportexcel_Click(object sender, EventArgs e)
        {

            if (ddlclientid.SelectedIndex == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Select Client Id ');", true);
                return;
            }

            if (Chk_Month.Checked == true)
            {
                if (txtmonth.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Enter Month for Bill ');", true);
                    return;
                }
                if (Timings.Instance.CheckEnteredDate(txtmonth.Text) == 1)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid TO DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                    return;
                }
            }
            else
            {
                if (ddlmonth.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Select Month for Bill ');", true);

                    return;
                }
            }


            #region  Begin Get Contract Id Based on The Last Day

            DateTime DtLastDay = DateTime.Now;
            var ContractID = "";

            if (Chk_Month.Checked == false)
            {
                DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
            }
            if (Chk_Month.Checked == true)
            {
                DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
            }

            Hashtable HtGetContractID = new Hashtable();
            var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
            HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
            HtGetContractID.Add("@LastDay", DtLastDay);
            DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

            if (DTContractID.Rows.Count > 0)
            {
                ContractID = DTContractID.Rows[0]["contractid"].ToString();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not Avaialable For This Client.');", true);
                return;
            }

            #endregion  End Get Contract Id Based on The Last Day

            string query = "";
            var monthnew = "0";
            monthnew = GetMonthNew();

            DataTable dt = null;

            if (ddlType.SelectedIndex != 0)
            {
                query = " select top (1) '' as 'Location','' as 'StoreCode','' as 'Designation','' as HSNNumber,0 as 'NoofEmps',0 as DutyHours,0 as payrate,'' as NOD " +
                            " from unitbill ";

                dt = config.ExecuteReaderWithQueryAsync(query).Result;

                if (dt.Rows.Count > 0)
                {
                    gve.NewExportExcel("Samplesheet.xlsx", dt);
                }
            }

        }

        public string GetExcelSheetNames()
        {
            string ExcelSheetname = "";
            OleDbConnection con = null;
            DataTable dt = null;
            string filename = Path.Combine(Server.MapPath("~/ImportDocuments"), Guid.NewGuid().ToString() + Path.GetExtension(fileupload1.PostedFile.FileName));
            fileupload1.PostedFile.SaveAs(filename);
            string extn = Path.GetExtension(fileupload1.PostedFile.FileName);
            string conStr = string.Empty;
            if (extn.ToLower() == ".xls")
            {
                conStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filename + ";Extended properties=\"excel 8.0;HDR=Yes;IMEX=2\"";
            }
            else if (extn.ToLower() == ".xlsx")
            {
                conStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filename + ";Extended properties=\"excel 12.0;HDR=Yes;IMEX=2\"";
            }

            con = new OleDbConnection(conStr);
            con.Open();
            dt = con.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);

            if (dt == null)
            {
                return null;
            }
            ExcelSheetname = dt.Rows[0]["TABLE_NAME"].ToString();
            return ExcelSheetname;
        }

        protected void lnkImportexcel_Click(object sender, EventArgs e)
        {

            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();

            if (ddlType.SelectedIndex != 0) ;
            {
                string filename = Path.Combine(Server.MapPath("~/ImportDocuments"), Guid.NewGuid().ToString() + Path.GetExtension(fileupload1.PostedFile.FileName));
                fileupload1.PostedFile.SaveAs(filename);
                string extn = Path.GetExtension(fileupload1.PostedFile.FileName);
                string constring = "";
                if (extn.ToLower() == ".xls")
                {
                    constring = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filename + ";Extended properties=\"excel 8.0;HDR=Yes;IMEX=2\"";

                }
                else if (extn.ToLower() == ".xlsx")
                {
                    constring = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filename + ";Extended properties=\"excel 12.0;HDR=Yes;IMEX=2\"";
                }

                string Sheetname = string.Empty;


                string qry = "select Location,StoreCode,Designation,HSNNumber,NoofEmps,DutyHours,payrate,NOD,0 as Designid,0 as type,0 as Noofdays, '' as  UOM ,'' as Extra,0 as newpayrate,0 as BasicDa,0 as GSTper,0 as CGSTAmt,0 as CGSTPrc,0 as SGSTAmt,0 as SGSTPrc,0 as IGSTAmt,0 as IGSTPrc,0 as TotalTaxAmount,0 as OTAmount " +
                "  from  [" + GetExcelSheetNames() + "]" + "";


                OleDbConnection con = new OleDbConnection(constring);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                OleDbCommand cmd = new OleDbCommand(qry, con);
                OleDbDataAdapter da = new OleDbDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);
                da.Dispose();
                con.Close();
                con.Dispose();
                GC.Collect();


                #region  Begin Get Contract Id Based on The Last Day

                DateTime DtLastDay = DateTime.Now;
                var ContractID = "";

                if (Chk_Month.Checked == false)
                {
                    DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }

                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                HtGetContractID.Add("@LastDay", DtLastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not Avaialable For This Client.');", true);
                    return;
                }

                #endregion  End Get Contract Id Based on The Last Day





                if (dt.Rows.Count > 0)
                {
                    gvClientBilling.DataSource = dt;
                    gvClientBilling.DataBind();



                    btnAddNewRow.Visible = true;
                    btnCalculateTotals.Visible = true;

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        TextBox lblnoofemployees = gvClientBilling.Rows[i].FindControl("lblnoofemployees") as TextBox;
                        TextBox lblpayrate = gvClientBilling.Rows[i].FindControl("lblpayrate") as TextBox;

                        if (lblnoofemployees.Text == "")
                        {
                            lblnoofemployees.Text = "0";
                        }

                        if (lblpayrate.Text == "")
                        {
                            lblpayrate.Text = "0";
                        }

                        DropDownList Nods = gvClientBilling.Rows[i].FindControl("ddlnod") as DropDownList;

                        if (Nods != null)
                        {
                            Nods.SelectedValue = dt.Rows[i]["NOD"].ToString();
                        }


                        TextBox totalAmt = gvClientBilling.Rows[i].FindControl("lblAmount") as TextBox;
                        totalAmt.Text = "0";

                        ViewState["DTDefaultManual"] = dt;

                    }
                }




            }

            EnabledFields();

        }

        protected void Chk_Month_CheckedChanged(object sender, EventArgs e)
        {
            if (Chk_Month.Checked == true)
            {
                txtmonth.Visible = true;
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = false;
            }
            else
            {
                txtmonth.Visible = false;
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = true;
            }
        }

        protected void Button3_Click(object sender, EventArgs e)
        {
            int month = GetMonthBasedOnSelectionDateorMonth();

            MemoryStream ms = new MemoryStream();
            Document document = new Document();
            if (chkletterhead.Checked == true)
            {
                document = new Document(PageSize.A4, 0, 0, 100, 10);
            }
            else
            {
                document = new Document(PageSize.A4, 0, 0, 0, 0);
            }


            Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            string filename = "";
            string CopyName = "";
            document.Open();

            BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            string SelectBillNo = string.Empty;
            string DisplayBillNo = "";

            if (ddlType.SelectedIndex == 0)
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
            }
            else
            {
                SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
            }
            DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;

            if (DtBilling.Rows.Count > 0)
            {
                DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
            }


            DownloadBillForManualPDF(document, ms);

            filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
            Response.Buffer = true;
            Response.Clear();
            Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
            Response.OutputStream.Flush();
            Response.End();
        }

        public void DownloadBillForManualPDF(Document document, MemoryStream ms)
        {

            int month = 0;
            int font = Convert.ToInt32(ddlfont.SelectedValue);

            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    int m = 0;
                    int Copycount = 1;

                    if (chkcopy.Checked == true)
                    {
                        Copycount = 2;
                    }

                    //for (m = 0; m < Copycount; m++)
                    {
                        document.NewPage();
                        string CopyName = "";
                        if (chkcopy.Checked == true)
                        {
                            //if (m == 0)
                            //{
                            //    CopyName = "ORIGINAL FOR RECIPIENT";
                            //}
                            //if (m == 1)
                            //{
                            //    CopyName = "DUPLICATE FOR SUPPLIER";
                            //}
                        }
                        PdfPCell cell;
                        #region for PDf
                        Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);

                        PdfWriter writer = PdfWriter.GetInstance(document, ms);

                        document.Open();
                        BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                        #region for CompanyInfo
                        string strQry = "select * from companyinfo where BranchID='" + Session["Branch"].ToString() + "' ";
                        DataTable compInfo = config.ExecuteAdaptorAsyncWithQueryParams(strQry).Result;
                        string companyName = "Your Company Name";
                        string companyAddress = "Your Company Address";
                        string companyaddressline = " ";
                        string emailid = "";
                        string website = "";
                        string phoneno = "";
                        string PANNO = "";
                        string PFNo = "";
                        string Esino = "";
                        string CmpPFNo = "";
                        string CmpEsino = "";
                        string Servicetax = "";
                        string notes = "";
                        string ServiceText = "";
                        string PSARARegNo = "";
                        string Category = "";
                        string HSNNumber = "";
                        string SACCode = "";
                        string BillDesc = "";
                        string BankName = "";
                        string BankAcNumber = "";
                        string IFSCCode = "";
                        string BranchName = "";
                        string CINNo = "";
                        string MSMENo = "";
                        string BillSeq = "";
                        if (compInfo.Rows.Count > 0)
                        {
                            companyName = compInfo.Rows[0]["CompanyName"].ToString();
                            companyAddress = compInfo.Rows[0]["Address"].ToString();
                            //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                            companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                            //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                            PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                            CmpPFNo = compInfo.Rows[0]["PFNo"].ToString();
                            Category = compInfo.Rows[0]["Category"].ToString();
                            CmpEsino = compInfo.Rows[0]["ESINo"].ToString();
                            Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                            emailid = compInfo.Rows[0]["Emailid"].ToString();
                            website = compInfo.Rows[0]["Website"].ToString();
                            phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                            notes = compInfo.Rows[0]["notes"].ToString();
                            HSNNumber = compInfo.Rows[0]["HSNNumber"].ToString();
                            SACCode = compInfo.Rows[0]["SACCode"].ToString();
                            BillDesc = compInfo.Rows[0]["BillDesc"].ToString();
                            BankName = compInfo.Rows[0]["Bankname"].ToString();
                            BranchName = compInfo.Rows[0]["BranchName"].ToString();
                            BankAcNumber = compInfo.Rows[0]["bankaccountno"].ToString();
                            IFSCCode = compInfo.Rows[0]["IfscCode"].ToString();
                            CINNo = compInfo.Rows[0]["CINNo"].ToString();
                            MSMENo = compInfo.Rows[0]["MSMENo"].ToString();
                            BillSeq = compInfo.Rows[0]["BillSeq"].ToString();
                        }

                        #endregion

                        DateTime DtLastDay = DateTime.Now;
                        if (Chk_Month.Checked == false)
                        {
                            DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                        }
                        if (Chk_Month.Checked == true)
                        {
                            DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        }
                        var ContractID = "";


                        #region  Begin Get Contract Id Based on The Last Day

                        Hashtable HtGetContractID = new Hashtable();
                        var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                        HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                        HtGetContractID.Add("@LastDay", DtLastDay);
                        DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                        if (DTContractID.Rows.Count > 0)
                        {
                            ContractID = DTContractID.Rows[0]["contractid"].ToString();

                        }
                        #endregion

                        #region
                        string SqlQuryForServiCharge = "select ContractId,servicecharge,PODate, isnull(EBD.ESiNO,'') EsiBranchname,isnull(PBD.PFNo,'') PFBranchname,convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,'' billnotes,isnull(ServiceChargeDesc,'') as ServiceChargeDesc,GSTLineitem from contracts  C left join EsiBranchDetails EBD on EBD.EsiBranchid=isnull(C.Esibranch,0) left join PFBranchDetails PBD on PBD.PFBranchid=isnull(C.PFbranch,0)   where " +
                            " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                        DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                        string Typeofwork = "";
                        string BillNotes = "";
                        string ServiceCharge = "0";
                        string strSCType = "";
                        string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                        bool bSCType = false;
                        bool GSTLineitem = false;
                        string strIncludeST = "";
                        string ContractStartDate = "";
                        string strST75 = "";
                        bool bIncludeST = false;
                        bool bST75 = false;
                        string POContent = "";
                        string PODate = "";
                        string CnPFNo = "";
                        string CnESINo = "";
                        string Location = "";
                        string ReversCharges = "";
                        string ServiceChargeDesc = "";
                        // string ServiceTaxCategory = "";
                        if (DtServicecharge.Rows.Count > 0)
                        {
                            PODate = DtServicecharge.Rows[0]["PODate"].ToString();
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                            {
                                ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                            }
                            if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                            {
                                strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                            }
                            string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                            if (tempDescription.Trim().Length > 0)
                            {
                                strDescription = tempDescription;
                            }
                            if (strSCType.Length > 0)
                            {
                                bSCType = Convert.ToBoolean(strSCType);
                            }
                            GSTLineitem = Convert.ToBoolean(DtServicecharge.Rows[0]["GSTLineitem"].ToString());
                            PFNo = DtServicecharge.Rows[0]["PFBranchname"].ToString().Trim();
                            Esino = DtServicecharge.Rows[0]["EsiBranchname"].ToString().Trim();

                            strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                            strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                            ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                            if (strIncludeST == "True")
                            {
                                bIncludeST = true;
                            }
                            if (strST75 == "True")
                            {
                                bST75 = true;
                            }
                            POContent = DtServicecharge.Rows[0]["pono"].ToString();
                            Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                            BillNotes = DtServicecharge.Rows[0]["BillNotes"].ToString();
                            // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                            string tempServiceDesc = DtServicecharge.Rows[0]["ServiceChargeDesc"].ToString();
                            if (tempServiceDesc.Trim().Length > 0)
                            {
                                ServiceChargeDesc = tempServiceDesc;
                            }
                        }

                        #endregion

                        #region

                        string selectclientaddress = "select isnull(sg.segname,'') as segname,c.*, s.state as Statename,s.GSTStateCode,gst.gstno,gst.GSTAddress,s1.state as ShipState,s1.GSTStateCode as ShipToStateCode1 from clients c left join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin left join states s1 on s1.stateid=c.ShipToState where clientid= '" + ddlclientid.SelectedValue + "'";
                        DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;
                        string OurGSTIN = "";
                        string GSTIN = "";
                        string StateCode = "0";
                        string State = "";
                        string ShipToGSTIN = "";
                        string ShipToStateCode = "0";
                        string ShipToState = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                            StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                            GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                            State = dtclientaddress.Rows[0]["Statename"].ToString();
                            Location = dtclientaddress.Rows[0]["Location"].ToString();

                            //companyAddress = dtclientaddress.Rows[0]["GSTAddress"].ToString();
                            ShipToStateCode = dtclientaddress.Rows[0]["ShipToStateCode1"].ToString();
                            ShipToGSTIN = dtclientaddress.Rows[0]["ShipToGSTIN"].ToString();
                            ShipToState = dtclientaddress.Rows[0]["ShipState"].ToString();
                        }

                        string SelectBillNo = string.Empty;
                        if (ddlType.SelectedIndex == 0)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                        }
                        else //if (ddlType.SelectedIndex == 1 || ddlType.SelectedIndex == 2)
                        {
                            SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from mUnitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "' and billno = '" + ddlMBBillnos.SelectedValue + "'";
                        }
                        DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                        string BillNo = "";
                        string DisplayBillNo = "";
                        string area = "";
                        string ExtraRemarks = "";

                        if (dtclientaddress.Rows.Count > 0)
                        {
                            area = dtclientaddress.Rows[0]["segname"].ToString();
                        }

                        DateTime BillDate;
                        DateTime DueDate;


                        #region Variables for data Fields as on 11/03/2014 by venkat


                        decimal servicecharge = 0;
                        decimal servicetax = 0;
                        decimal cess = 0;
                        decimal sbcess = 0;
                        decimal kkcess = 0;


                        #region for GST on 17-6-2017 by swathi

                        decimal CGST = 0;
                        decimal SGST = 0;
                        decimal IGST = 0;
                        decimal Cess1 = 0;
                        decimal Cess2 = 0;
                        decimal CGSTPrc = 0;
                        decimal SGSTPrc = 0;
                        decimal IGSTPrc = 0;
                        decimal Cess1Prc = 0;
                        decimal Cess2Prc = 0;

                        #endregion for GST on 17-6-2017 by swathi


                        decimal shecess = 0;
                        decimal totalamount = 0;
                        decimal TotalbeforeTax = 0;
                        decimal Grandtotal = 0;

                        decimal ServiceTax75 = 0;
                        decimal ServiceTax25 = 0;

                        decimal machinarycost = 0;
                        decimal materialcost = 0;
                        decimal maintenancecost = 0;
                        decimal extraonecost = 0;
                        decimal extratwocost = 0;
                        decimal discountone = 0;
                        decimal discounttwo = 0;

                        string machinarycosttitle = "";
                        string materialcosttitle = "";
                        string maintenancecosttitle = "";
                        string extraonecosttitle = "";
                        string extratwocosttitle = "";
                        string discountonetitle = "";
                        string discounttwotitle = "";

                        bool Extradatacheck = false;
                        bool ExtraDataSTcheck = false;

                        bool STMachinary = false;
                        bool STMaterial = false;
                        bool STMaintenance = false;
                        bool STExtraone = false;
                        bool STExtratwo = false;

                        bool SCMachinary = false;
                        bool SCMaterial = false;
                        bool SCMaintenance = false;
                        bool SCExtraone = false;
                        bool SCExtratwo = false;

                        bool STDiscountone = false;
                        bool STDiscounttwo = false;

                        string strExtradatacheck = "";
                        string strExtrastcheck = "";

                        string strSTMachinary = "";
                        string strSTMaterial = "";
                        string strSTMaintenance = "";
                        string strSTExtraone = "";
                        string strSTExtratwo = "";

                        string strSCMachinary = "";
                        string strSCMaterial = "";
                        string strSCMaintenance = "";
                        string strSCExtraone = "";
                        string strSCExtratwo = "";

                        string strSTDiscountone = "";
                        string strSTDiscounttwo = "";
                        string PlaceofSupply = "";
                        string NatureOfSupply = "";
                        string JPCode = "";

                        decimal staxamtonservicecharge = 0;
                        decimal RelChrgAmt = 0;
                        decimal PFAmt = 0;
                        decimal ESIAmt = 0;
                        decimal BpfPer = 0;
                        decimal BesiPer = 0;


                        #endregion

                        DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        // for both "1/1/2000" or "25/1/2000" formats
                        string billdt = dtn.ToString("MM/dd/yyyy");

                        string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate";
                        DataTable Bdt = config.ExecuteAdaptorAsyncWithQueryParams(BQry).Result;

                        string CGSTAlias = "";
                        string SGSTAlias = "";
                        string IGSTAlias = "";
                        string Cess1Alias = "";
                        string Cess2Alias = "";
                        string GSTINAlias = "";
                        string OurGSTINAlias = "";

                        string SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                        DataTable DtTaxes = config.ExecuteAdaptorAsyncWithQueryParams(SqlQryForTaxes).Result;

                        string SCPersent = "";
                        if (DtTaxes.Rows.Count > 0)
                        {
                            SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                            CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                            SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                            IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                            Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                            Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                            GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                            OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        }
                        else
                        {
                            lblResult.Text = "There Is No Tax Values For Generating Bills ";
                            return;
                        }


                        if (DtBilling.Rows.Count > 0)
                        {

                            ExtraRemarks = DtBilling.Rows[0]["Remarks"].ToString();
                            BillNo = DtBilling.Rows[0]["billno"].ToString();
                            DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                            BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());

                            OurGSTIN = DtBilling.Rows[0]["OURGSTNo"].ToString();
                            StateCode = DtBilling.Rows[0]["BillToStateCode"].ToString();
                            GSTIN = DtBilling.Rows[0]["BillToGSTNo"].ToString();
                            State = DtBilling.Rows[0]["BillToState"].ToString();
                            ShipToStateCode = DtBilling.Rows[0]["ShipToStateCode"].ToString();
                            ShipToGSTIN = DtBilling.Rows[0]["ShipToGSTNo"].ToString();
                            ShipToState = DtBilling.Rows[0]["ShipToState"].ToString();

                            if (ddlType.SelectedIndex == 0)
                            {
                                DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                                {
                                    ServiceTax75 = decimal.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                                {
                                    ServiceTax25 = decimal.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                                {
                                    servicecharge = decimal.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                                {
                                    RelChrgAmt = decimal.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                                }

                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Bpfamt"].ToString()) == false)
                                {
                                    PFAmt = decimal.Parse(DtBilling.Rows[0]["Bpfamt"].ToString());
                                }


                                if (string.IsNullOrEmpty(DtBilling.Rows[0]["Besiamt"].ToString()) == false)
                                {
                                    ESIAmt = decimal.Parse(DtBilling.Rows[0]["Besiamt"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BpfPer"].ToString()) == false)
                                {
                                    BpfPer = decimal.Parse(DtBilling.Rows[0]["BpfPer"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["BesiPer"].ToString()) == false)
                                {
                                    BesiPer = decimal.Parse(DtBilling.Rows[0]["BesiPer"].ToString());
                                }

                            }

                            else
                            {
                                NatureOfSupply = DtBilling.Rows[0]["NatureOfSupply"].ToString();
                                PlaceofSupply= DtBilling.Rows[0]["PlaceOfSupply"].ToString();
                                JPCode= DtBilling.Rows[0]["JPCode"].ToString();

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                                {
                                    servicecharge = decimal.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                                }

                                if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrgPer"].ToString()) == false)
                                {
                                    ServiceCharge = DtBilling.Rows[0]["ServiceChrgPer"].ToString();
                                }
                            }



                            #region Begin New code for values taken from database as on 11/03/2014 by venkat

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                            {
                                totalamount = decimal.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalbeforeTax"].ToString()) == false)
                            {
                                TotalbeforeTax = decimal.Parse(DtBilling.Rows[0]["TotalbeforeTax"].ToString());
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                            {
                                servicetax = decimal.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                            {
                                sbcess = decimal.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                            {
                                kkcess = decimal.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                            }

                            #region for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                            {
                                CGST = decimal.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                            {
                                SGST = decimal.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                            {
                                IGST = decimal.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                            {
                                Cess1 = decimal.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                            {
                                Cess2 = decimal.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                            {
                                CGSTPrc = decimal.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                            {
                                SGSTPrc = decimal.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                            {
                                IGSTPrc = decimal.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                            {
                                Cess1Prc = decimal.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                            {
                                Cess2Prc = decimal.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                            }

                            #endregion for GST as on 17-6-2017 by swathi

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                            {
                                cess = decimal.Parse(DtBilling.Rows[0]["CESS"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                            {
                                shecess = decimal.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                            {
                                Grandtotal = decimal.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                            {
                                machinarycost = decimal.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                            {
                                materialcost = decimal.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                            {
                                maintenancecost = decimal.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                            {
                                extraonecost = decimal.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                            {
                                extratwocost = decimal.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                            {
                                discountone = decimal.Parse(DtBilling.Rows[0]["Discount"].ToString());
                            }
                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                            {
                                discounttwo = decimal.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                            }

                            machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                            materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                            maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                            extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                            extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                            discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                            discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                            {
                                strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                                if (strExtradatacheck == "True")
                                {
                                    Extradatacheck = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                            {
                                strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                                if (strExtrastcheck == "True")
                                {
                                    ExtraDataSTcheck = true;
                                }
                            }



                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                            {
                                strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                                if (strSTMachinary == "True")
                                {
                                    STMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                            {
                                strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                                if (strSTMaterial == "True")
                                {
                                    STMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                            {
                                strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                                if (strSTMaintenance == "True")
                                {
                                    STMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                            {
                                strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                                if (strSTExtraone == "True")
                                {
                                    STExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                            {
                                strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                                if (strSTExtratwo == "True")
                                {
                                    STExtratwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                            {
                                strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                                if (strSCMachinary == "True")
                                {
                                    SCMachinary = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                            {
                                strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                                if (strSCMaterial == "True")
                                {
                                    SCMaterial = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                            {
                                strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                                if (strSCMaintenance == "True")
                                {
                                    SCMaintenance = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                            {
                                strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                                if (strSCExtraone == "True")
                                {
                                    SCExtraone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                            {
                                strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                                if (strSCExtratwo == "True")
                                {
                                    SCExtratwo = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }


                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                            {
                                strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                                if (strSTDiscountone == "True")
                                {
                                    STDiscountone = true;
                                }
                            }

                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                            {
                                strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                                if (strSTDiscounttwo == "True")
                                {
                                    STDiscounttwo = true;
                                }
                            }




                            if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                            {
                                staxamtonservicecharge = decimal.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                            }

                            #endregion
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                            return;
                        }
                        string Year = DateTime.Now.Year.ToString();
                        #endregion

                        document.AddTitle(companyName);
                        document.AddAuthor("DIYOS");
                        document.AddSubject("Invoice");
                        document.AddKeywords("Keyword1, keyword2, …");
                        string imagepath = Server.MapPath("~/assets/" + CmpIDPrefix + "BillLogo.png");
                        //if (CmpIDPrefix == "STD")
                        //{

                        //}

                        //PdfContentByte content = writer.DirectContent;
                        PdfPTable tablelogo = new PdfPTable(2);
                        tablelogo.TotalWidth = 500f;
                        tablelogo.LockedWidth = true;
                        float[] widtlogo = new float[] { 0.4f, 2f };
                        tablelogo.SetWidths(widtlogo);
                        if (chkletterhead.Checked == true)
                        {
                            PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                            CCompName.HorizontalAlignment = 1;
                            CCompName.Border = 0;
                            CCompName.Colspan = 2;
                            // CCompName.PaddingTop =50;
                            tablelogo.AddCell(CCompName);

                            PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                            CCompAddress.HorizontalAlignment = 1;
                            CCompAddress.Border = 0;
                            CCompAddress.Colspan = 2;
                            // space between lines
                            CCompAddress.SetLeading(0f, 1.3f);
                            tablelogo.AddCell(CCompAddress);

                            PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cellline.Border = 0;
                            cellline.Colspan = 2;
                            tablelogo.AddCell(cellline);
                            //For Space

                            PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                            celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celll.Border = 0;
                            celll.Colspan = 2;
                            celll.PaddingTop = 25f;
                            tablelogo.AddCell(celll);
                            tablelogo.AddCell(celll);
                            document.Add(tablelogo);
                        }
                        else
                        {
                            if (File.Exists(imagepath))
                            {
                                iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);
                                gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                                gif2.ScalePercent(75f);//55
                                gif2.SetAbsolutePosition(50f, 750f); //745
                                document.Add(gif2);
                            }

                            //tablelogo.AddCell(celll);


                            var FontColour = new BaseColor(178, 34, 34);
                            Font FontStyle1 = FontFactory.GetFont("Belwe-Bold", BaseFont.CP1252, BaseFont.EMBEDDED, 30, Font.NORMAL, FontColour);

                            //if (CmpIDPrefix == "STD")
                            {
                                PdfPCell CCompName1 = new PdfPCell(new Paragraph("" + companyName, FontFactory.GetFont(FontStyle, 20, Font.BOLD, BaseColor.BLACK)));
                                CCompName1.HorizontalAlignment = 0;
                                CCompName1.Colspan = 2;
                                CCompName1.PaddingLeft = 120f;
                                CCompName1.PaddingTop = 10f;
                                CCompName1.Border = 0;
                                tablelogo.AddCell(CCompName1);

                                PdfPCell CCompName = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName.HorizontalAlignment = 0;
                                CCompName.Colspan = 2;
                                CCompName.Border = 0;
                                //CCompName.PaddingTop = 5f;
                                CCompName.PaddingLeft = 120;
                                CCompName.SetLeading(0, 1.2f);
                                tablelogo.AddCell(CCompName);
                            }

                            if (emailid.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Website :" + website + " | Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 0;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                //CCompName2.PaddingTop = 4f;
                                CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (phoneno.Length > 0)
                            {
                                PdfPCell CCompName2 = new PdfPCell(new Paragraph("Phone :" + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                CCompName2.HorizontalAlignment = 0;
                                CCompName2.Colspan = 2;
                                CCompName2.Border = 0;
                                CCompName2.PaddingBottom = 5;
                                CCompName2.PaddingLeft = 120;
                                tablelogo.AddCell(CCompName2);
                            }
                            if (GSTIN.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN :" + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.Border = 0;
                                // clietnpin.PaddingTop = 4f;
                                //clietnpin.BorderWidthBottom = 0;
                                //clietnpin.BorderWidthTop = 0;
                                //clietnpin.BorderWidthLeft = .2f;
                                //clietnpin.BorderWidthRight = 0;
                                //clietnpin.BorderColor = BaseColor.BLACK;
                                // clietnpin.PaddingLeft = 120;
                                //tablelogo.AddCell(clietnpin);                      

                            }

                            var CelGSTaddr = new Paragraph();
                            CelGSTaddr.Add(new Chunk(CopyName, FontFactory.GetFont(FontStyle, 11 - 1, Font.BOLD, BaseColor.BLACK)));
                            CelGSTaddr.SetLeading(0, 1f);
                            PdfPCell CellGstaddress = new PdfPCell();
                            CellGstaddress.AddElement(CelGSTaddr);
                            CellGstaddress.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellGstaddress.Colspan = 2;
                            CellGstaddress.BorderWidthTop = 0;
                            CellGstaddress.BorderWidthBottom = 0;
                            CellGstaddress.BorderWidthLeft = 0;
                            CellGstaddress.BorderWidthRight = 0;
                            CellGstaddress.PaddingLeft = 430;
                            tablelogo.AddCell(CellGstaddress);

                            document.Add(tablelogo);
                        }

                        PdfPTable tempTable111 = new PdfPTable(4);
                        tempTable111.TotalWidth = 500f;
                        tempTable111.LockedWidth = true;
                        float[] tempWidth111 = new float[] { 1f, 2f, 1f, 2f };
                        tempTable111.SetWidths(tempWidth111);

                        PdfPCell Celemail = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 13, Font.BOLD, BaseColor.BLACK)));
                        Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Celemail.Colspan = 5;
                        Celemail.FixedHeight = 20;
                        Celemail.BorderWidthTop = .2f;
                        Celemail.BorderWidthBottom = .2f;
                        Celemail.BorderWidthLeft = .2f;
                        Celemail.BorderWidthRight = .2f;
                        Celemail.BorderColor = BaseColor.BLACK;
                        tempTable111.AddCell(Celemail);

                     
                        PdfPTable tempTable12 = new PdfPTable(2);
                        tempTable12.TotalWidth = 250f;
                        tempTable12.LockedWidth = true;
                        float[] tempWidth12 = new float[] { 1f, 2f };
                        tempTable12.SetWidths(tempWidth12);

                        PdfPCell clientaddrhno11 = new PdfPCell(new Paragraph("Corporate Office:", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        clientaddrhno11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno11.Colspan = 1;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno11.BorderWidthBottom = 0.2f;
                        clientaddrhno11.BorderWidthTop = 0;
                        clientaddrhno11.BorderWidthLeft = .2f;
                        clientaddrhno11.BorderWidthRight = 0.2f;
                        clientaddrhno11.BorderColor = BaseColor.BLACK;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable12.AddCell(clientaddrhno11);
                        if (companyAddress.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 1;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0.2f;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable12.AddCell(clientaddrhno);
                        }

                        

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("Supplier's GSTIN ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.Border = 0;
                            clietnpin.PaddingTop = 4f;
                            clietnpin.BorderWidthBottom = 0.2f;
                            clietnpin.BorderWidthTop = 0.2f;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            //clietnpin.BorderColor = BaseColor.BLACK;
                            // clietnpin.PaddingLeft = 120;
                            tempTable12.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph( OurGSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 1;
                            clietnpin.BorderWidthBottom = 0.2f;
                            clietnpin.BorderWidthTop = 0.2f;
                            clietnpin.BorderWidthLeft = 0;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable12.AddCell(clietnpin);

                        }                      

                        PdfPCell childTable11 = new PdfPCell(tempTable12);
                        childTable11.Border = 0;
                        childTable11.Colspan = 2;
                        childTable11.HorizontalAlignment = 0;
                        tempTable111.AddCell(childTable11);

                        PdfPTable tempTable121 = new PdfPTable(2);
                        tempTable121.TotalWidth = 250f;
                        tempTable121.LockedWidth = true;
                        float[] tempWidth121 = new float[] { 1f, 2f };
                        tempTable121.SetWidths(tempWidth121);

                        PdfPCell clientaddrhno111 = new PdfPCell(new Paragraph("Branch Office", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        clientaddrhno111.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno111.Colspan = 1;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno111.BorderWidthBottom = 0.2f;
                        clientaddrhno111.BorderWidthTop = 0;
                        clientaddrhno111.BorderWidthLeft = .2f;
                        clientaddrhno111.BorderWidthRight = 0.2f;
                        clientaddrhno111.BorderColor = BaseColor.BLACK;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable121.AddCell(clientaddrhno111);
                        if (companyAddress.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 1;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0.2f;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable121.AddCell(clientaddrhno);
                        }                     

                        PdfPCell childTable112 = new PdfPCell(tempTable121);
                        childTable112.Border = 0;
                        childTable112.Colspan = 2;
                        childTable112.HorizontalAlignment = 0;
                        tempTable111.AddCell(childTable112);

                        document.Add(tempTable111);

                        PdfPTable address = new PdfPTable(4);
                        address.TotalWidth = 500f;
                        address.LockedWidth = true;
                        float[] addreslogo = new float[] { 1f, 2f, 1f, 2f };
                        address.SetWidths(addreslogo);

                      

                        PdfPTable tempTable1 = new PdfPTable(2);
                        tempTable1.TotalWidth = 250f;
                        tempTable1.LockedWidth = true;
                        float[] tempWidth1 = new float[] { 1f, 2f };
                        tempTable1.SetWidths(tempWidth1);                                         

                            string addressData = "";
                        addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                        if (addressData.Trim().Length > 0)
                        {

                            PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientaddrhno.Colspan = 2;                                 //clientaddrhno.Colspan = 0;
                            clientaddrhno.BorderWidthBottom = 0;
                            clientaddrhno.BorderWidthTop = 0;
                            clientaddrhno.BorderWidthLeft = .2f;
                            clientaddrhno.BorderWidthRight = 0.2f;
                            clientaddrhno.BorderColor = BaseColor.BLACK;
                            //clientaddrhno.clientaddrhno = 20;
                            tempTable1.AddCell(clientaddrhno);
                        }
                        addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 2;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            //clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }


                        addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clientstreet.BorderWidthBottom = 0;
                            clientstreet.BorderWidthTop = 0;
                            clientstreet.Colspan = 2;
                            clientstreet.BorderColor = BaseColor.BLACK;
                            clientstreet.BorderWidthLeft = .2f;
                            clientstreet.BorderWidthRight = 0.2f;
                            // clientstreet.PaddingLeft = 20;
                            tempTable1.AddCell(clientstreet);
                        }

                      
                        var ClientAddrColony = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                        var ClientAddrcity = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                        var ClientAddrstate = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                        var ClientAddrpin = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                        addressData = (ClientAddrColony + "," + ClientAddrcity + "," + ClientAddrstate + "," + ClientAddrpin);
                        if (addressData.Trim().Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                        PdfPCell clietnpin1 = new PdfPCell(new Paragraph("Place of Supply", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        clietnpin1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin1.Colspan = 2;
                        clietnpin1.Border = 0;
                        clietnpin1.BorderWidthBottom = 0.2f;
                        clietnpin1.BorderWidthTop = 0.2f;
                        clietnpin1.BorderWidthLeft = .2f;
                        clietnpin1.BorderWidthRight = 0.2f;
                        tempTable1.AddCell(clietnpin1);

                        clietnpin1 = new PdfPCell(new Paragraph(PlaceofSupply, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        clietnpin1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin1.Colspan = 2;
                        clietnpin1.BorderWidthBottom = 0.2f;
                        clietnpin1.BorderWidthTop = 0.2f;
                        clietnpin1.BorderWidthLeft = 0.2f;
                        clietnpin1.BorderWidthRight = 0.2f;
                        clietnpin1.BorderColor = BaseColor.BLACK;
                        //  clietnpin.PaddingLeft = 20;
                        tempTable1.AddCell(clietnpin1);


                        #region copy
                        PdfPCell childTable1 = new PdfPCell(tempTable1);
                        childTable1.Border = 0;
                        childTable1.Colspan = 2;
                        // childTable1.FixedHeight = 100;
                        childTable1.HorizontalAlignment = 0;

                        address.AddCell(childTable1);

                        PdfPTable tempTable2 = new PdfPTable(2);
                        tempTable2.TotalWidth = 250f;
                        tempTable2.LockedWidth = true;
                        float[] tempWidth2 = new float[] {1f,2f };
                        tempTable2.SetWidths(tempWidth2);                     

                        var phrase = new Phrase();
                        phrase.Add(new Chunk("Invoice No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell13 = new PdfPCell();
                        cell13.AddElement(phrase);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0.2f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10 = new Phrase();
                        phrase10.Add(new Chunk( BillNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phrase11 = new Phrase();
                        phrase11.Add(new Chunk("Invoice Date", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell131 = new PdfPCell();
                        cell131.AddElement(phrase11);
                        cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131.BorderWidthBottom = 0;
                        cell131.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131.Colspan = 1;
                        cell131.BorderWidthLeft = 0f;
                        cell131.BorderWidthRight = 0.2f;
                        cell131.PaddingTop = -5;
                        cell131.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131);

                        var phrase11v = new Phrase();
                        phrase11v.Add(new Chunk(BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                            BillDate.Year, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        PdfPCell cell131v = new PdfPCell();
                        cell131v.AddElement(phrase11v);
                        cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell131v.BorderWidthBottom = 0;
                        cell131v.BorderWidthTop = 0;
                        // cell131.FixedHeight = 35;
                        cell131v.Colspan = 1;
                        cell131v.BorderWidthLeft = 0;
                        cell131v.BorderWidthRight = .2f;
                        cell131v.PaddingTop = -5;
                        cell131v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell131v);


                        var phraseim = new Phrase();
                        phraseim.Add(new Chunk("Vendor Code", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseim);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0.2f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        var phrase10im = new Phrase();
                        phrase10im.Add(new Chunk("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10im);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        if (POContent.Length > 0)
                        {
                            var phrasew12 = new Phrase();
                            phrasew12.Add(new Chunk("PO No", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew12);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0.2f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w = new Phrase();
                            phrase10w.Add(new Chunk(": " + POContent, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);

                        }

                        var phraseperiod = new Phrase();
                        phraseperiod.Add(new Chunk("PAN NO. Vendor", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseperiod);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0.2f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);

                        string Fromdate = txtfromdate.Text;
                        string Todate = txttodate.Text;


                        var phrase10p = new Phrase();
                        phrase10p.Add(new Chunk(PANNO, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10p);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);

                        var phraseperiod1 = new Phrase();
                        phraseperiod1.Add(new Chunk("Supply Period", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13 = new PdfPCell();
                        cell13.AddElement(phraseperiod1);
                        cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13.BorderWidthBottom = 0;
                        cell13.BorderWidthTop = 0;
                        //cell13.FixedHeight = 35;
                        cell13.Colspan = 1;
                        cell13.BorderWidthLeft = 0f;
                        cell13.BorderWidthRight = 0.2f;
                        cell13.PaddingTop = -5;
                        cell13.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13);



                        var phrase10p1 = new Phrase();
                        phrase10p1.Add(new Chunk(GetMonthName() + "'" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell13v = new PdfPCell();
                        cell13v.AddElement(phrase10p1);
                        cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell13v.BorderWidthBottom = 0;
                        cell13v.BorderWidthTop = 0;
                        cell13v.Colspan = 1;
                        cell13v.BorderWidthLeft = 0;
                        cell13v.BorderWidthRight = .2f;
                        cell13v.PaddingTop = -5;
                        cell13v.BorderColor = BaseColor.BLACK;
                        tempTable2.AddCell(cell13v);                      
                        
                      
                            var phrasew = new Phrase();
                            phrasew.Add(new Chunk("Nature of Supply", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;           
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0.2f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);

                            var phrase10w1 = new Phrase();
                            phrase10w1.Add(new Chunk(NatureOfSupply, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w1);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);                                          

                        var phrasew111 = new Phrase();
                            phrasew111.Add(new Chunk("", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13 = new PdfPCell();
                            cell13.AddElement(phrasew111);
                            cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13.BorderWidthBottom = 0;
                            cell13.BorderWidthTop = 0;
                            //cell13.FixedHeight = 35;
                            cell13.Colspan = 1;
                            cell13.BorderWidthLeft = 0f;
                            cell13.BorderWidthRight = 0.2f;
                            cell13.PaddingTop = -5;
                            cell13.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13);                          

                        if(JPCode.Length>0)
                        { 
                            var phrase10w12 = new Phrase();
                            phrase10w12.Add(new Chunk("JP Code : " +JPCode, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell13v = new PdfPCell();
                            cell13v.AddElement(phrase10w12);
                            cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell13v.BorderWidthBottom = 0;
                            cell13v.BorderWidthTop = 0;
                            cell13v.Colspan = 1;
                            cell13v.BorderWidthLeft = 0;
                            cell13v.BorderWidthRight = .2f;
                            cell13v.PaddingTop = -5;
                            cell13v.BorderColor = BaseColor.BLACK;
                            tempTable2.AddCell(cell13v);
                        }

                        PdfPCell childTable2 = new PdfPCell(tempTable2);
                        childTable2.Border = 0;
                        childTable2.Colspan = 2;  
                        childTable2.HorizontalAlignment = 0;
                        address.AddCell(childTable2);

                        if (Bdt.Rows.Count > 0)
                        {
                            if (StateCode == "1" || StateCode == "2" || StateCode == "3" || StateCode == "4" || StateCode == "5" || StateCode == "6" || StateCode == "7" || StateCode == "8" || StateCode == "7")
                            {
                                StateCode = "0" + StateCode;
                            }

                            if (StateCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("State - State Code as per GST ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.BorderWidthBottom = 0.2f;
                                clietnpin.BorderWidthTop = 0.2f;
                                clietnpin.BorderWidthLeft = 0.2f;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                address.AddCell(clietnpin);

                                clietnpin = new PdfPCell(new Paragraph(StateCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.Colspan = 2;
                                clietnpin.BorderWidthBottom = 0.2f;
                                clietnpin.BorderWidthTop = 0.2f;
                                clietnpin.BorderWidthLeft = 0.2f;
                                clietnpin.BorderWidthRight = 0.2f;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                //  clietnpin.PaddingLeft = 20;
                                address.AddCell(clietnpin);
                            }

                        }

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GSTIN/Unique ID ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.Border = 0;                         
                            clietnpin.BorderWidthBottom = 0.2f;
                            clietnpin.BorderWidthTop = 0.2f;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0;                    
                            address.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(" : " + GSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0.2f;
                            clietnpin.BorderWidthTop = 0.2f;
                            clietnpin.BorderWidthLeft = 0.2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;              
                            address.AddCell(clietnpin);

                        }

                        var BillToPanNo = dtclientaddress.Rows[0]["BillToPanNo"].ToString();
                        if (BillToPanNo.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("PAN No Buyer", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.Border = 0;                    
                            clietnpin.BorderWidthBottom = 0.2f;
                            clietnpin.BorderWidthTop = 0.2f;
                            clietnpin.BorderWidthLeft = .2f;
                            clietnpin.BorderWidthRight = 0.2f;                          
                            address.AddCell(clietnpin);

                            clietnpin = new PdfPCell(new Paragraph(BillToPanNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 2;
                            clietnpin.BorderWidthBottom = 0.2f;
                            clietnpin.BorderWidthTop = 0.2f;
                            clietnpin.BorderWidthLeft = 0.2f;
                            clietnpin.BorderWidthRight = 0.2f;
                            clietnpin.BorderColor = BaseColor.BLACK;
                            //  clietnpin.PaddingLeft = 20;
                            address.AddCell(clietnpin);

                        }

                       

                        document.Add(address);

                        #endregion


                        #region
                        int countGrid = gvClientBilling.Rows.Count;

                        DataTable dtheadings = null;
                        var SPNameD = "GetInvHeadings";
                        Hashtable htheadings = new Hashtable();
                        htheadings.Add("@clientid", ddlclientid.SelectedValue);
                        // htheadings.Add("@LastDay", DtLastDay);
                        dtheadings = config.ExecuteAdaptorAsyncWithParams(SPNameD, htheadings).Result;

                        string InvDescription = "";
                        string InvNoOfEmps = "";
                        string InvNoofDuties = "";
                        string InvPayrate = "";
                        string InvAmount = "";
                        string InvSACCode = "";
                        string InvMonthDays = "";
                        string InvDescriptionVisible = "N";
                        string InvNoOfEmpsVisible = "N";
                        string InvNoofDutiesVisible = "N";
                        string InvPayrateVisible = "N";
                        string InvAmountVisible = "N";
                        string InvSACCodeVisible = "N";
                        string InvMonthDaysVisible = "N";
                        string HSNNo = "";
                        var ExDBRemarks = "";
                        if (dtheadings.Rows.Count > 0)
                        {
                            InvDescription = dtheadings.Rows[0]["InvDescription"].ToString();
                            InvNoOfEmps = dtheadings.Rows[0]["InvNoOfEmps"].ToString();
                            InvNoofDuties = dtheadings.Rows[0]["InvNoofDuties"].ToString();
                            InvPayrate = dtheadings.Rows[0]["InvPayrate"].ToString();
                            InvAmount = dtheadings.Rows[0]["InvAmount"].ToString();
                            InvMonthDays = dtheadings.Rows[0]["InvMonthDays"].ToString();
                            InvSACCode = dtheadings.Rows[0]["InvSACCode"].ToString();
                            InvDescriptionVisible = dtheadings.Rows[0]["InvDescriptionVisible"].ToString();
                            InvNoOfEmpsVisible = dtheadings.Rows[0]["InvNoOfEmpsVisible"].ToString();
                            InvNoofDutiesVisible = dtheadings.Rows[0]["InvNoofDutiesVisible"].ToString();
                            InvPayrateVisible = dtheadings.Rows[0]["InvPayrateVisible"].ToString();
                            InvAmountVisible = dtheadings.Rows[0]["InvAmountVisible"].ToString();
                            InvSACCodeVisible = dtheadings.Rows[0]["InvSACCodeVisible"].ToString();
                            InvMonthDaysVisible = dtheadings.Rows[0]["InvMonthDaysVisible"].ToString();
                        }




                        int colCount = 2;

                        if (InvDescriptionVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoOfEmpsVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvAmountVisible == "Y")
                        {
                            colCount += 1;
                        }



                        if (InvSACCodeVisible == "Y")
                        {
                            colCount += 1;
                        }

                        if (InvMonthDaysVisible == "Y")
                        {
                            colCount += 1;
                        }


                        PdfPTable table = new PdfPTable(colCount);
                        table.TotalWidth = 500f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = 1;
                        //float[] colWidths = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.7f };



                        float[] colWidths = new float[] { };

                        if (colCount == 9)
                        {
                            colWidths = new float[] { 1f, 2f, 6f,1f ,2f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 8)
                        {
                            colWidths = new float[] { 1f, 2f, 6f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 7)
                        {
                            colWidths = new float[] { 1f, 2f, 6f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 6)
                        {
                            colWidths = new float[] { 1f, 2f, 6f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            colWidths = new float[] { 1f, 2f, 6f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            colWidths = new float[] { 1f, 2.2f, 6f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            colWidths = new float[] { 1f, 2.7f, 6f };
                        }


                        table.SetWidths(colWidths);

                        string cellText;


                        cell = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = .2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        if (InvSACCodeVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvSACCode, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvDescriptionVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvDescription, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        cell = new PdfPCell(new Phrase("UOM", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0.2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = 0f;
                        //cell.Colspan = 1;
                        cell.BorderColor = BaseColor.BLACK;
                        table.AddCell(cell);

                        if (InvMonthDaysVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvMonthDays, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }
                        if (InvNoOfEmpsVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvNoOfEmps, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            //cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvPayrateVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvPayrate, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvNoofDutiesVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvNoofDuties, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = 0f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        if (InvAmountVisible == "Y")
                        {
                            cell = new PdfPCell(new Phrase(InvAmount, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.2f;
                            cell.BorderWidthLeft = 0.2f;
                            cell.BorderWidthTop = 0.2f;
                            cell.BorderWidthRight = .2f;
                            cell.BorderColor = BaseColor.BLACK;
                            table.AddCell(cell);
                        }

                        ////export rows from GridView to table
                        float noofshifts = 0;
                        int GridLine = 1;

                        ////export rows from GridView to table
                        for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                        {
                            if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                            {
                                TextBox lblamount = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                if (lblamount != null)
                                {
                                    string strAmount = lblamount.Text;
                                    float amount = 0;
                                    if (strAmount.Length > 0)
                                        amount = Convert.ToSingle(strAmount);
                                    //if (amount >= 0)
                                    {
                                        for (int j = 0; j < 9; j++)
                                        {
                                            //fetch the column value of the current row
                                            if (j == 0)
                                            {
                                                Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                                cellText = label1.Text;
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                cell.Colspan = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderWidthLeft = .2f;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthTop = 0;
                                                if (gvClientBilling.Rows.Count >= 14)
                                                {
                                                    cell.MinimumHeight = 18;
                                                }
                                                else
                                                {
                                                    cell.MinimumHeight = 20;
                                                }
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderColor = BaseColor.BLACK;
                                                table.AddCell(cell);
                                            }

                                            if (InvSACCodeVisible == "Y")
                                            {
                                                if (j == 1)
                                                {
                                                    string HSNN = "";
                                                    TextBox LblHSNNo = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("txtHSNNumber"));

                                                    HSNN = LblHSNNo.Text;

                                                    cell = new PdfPCell(new Phrase(HSNN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }
                                            }

                                            if (InvDescriptionVisible == "Y")
                                            {
                                                if (j == 2)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                                    Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                    Label lbltype = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbltype"));

                                                    string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                        "  where c.clientid='" + ddlclientid.SelectedValue + "' and c.Type='" + lbltype.Text + "' and d.designid='" + labldesig.Text + "'";


                                                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(summaryQry).Result;
                                                    cellText = label1.Text;
                                                    if (dt.Rows.Count > 0)
                                                    {
                                                        if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                            cellText += "\n " + dt.Rows[0]["summary"].ToString() + " ";
                                                    }

                                                    //create a new cell with column value
                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }

                                            }

                                            if (j == 3)
                                            {
                                               
                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase("Nos", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                //cell.Border = 0;
                                                if (GridLine == countGrid)
                                                {
                                                    cell.BorderWidthBottom = 0;
                                                }
                                                else
                                                {
                                                    cell.BorderWidthBottom = 0.2f;
                                                }
                                                cell.BorderWidthLeft = 0.2f;
                                                cell.BorderWidthTop = 0;
                                                cell.HorizontalAlignment = 1;
                                                cell.BorderWidthRight = 0f;
                                                cell.BorderColor = BaseColor.BLACK;
                                                cell.Colspan = 1;
                                                table.AddCell(cell);
                                            }

                                            if (InvMonthDaysVisible == "Y")
                                            {
                                                if (j == 4)
                                                {
                                                    string Noofdaysinamonth = "";
                                                    DropDownList LblHSNNo = (DropDownList)(gvClientBilling.Rows[rowIndex].FindControl("ddlnod"));

                                                    Noofdaysinamonth = LblHSNNo.SelectedValue;

                                                    cell = new PdfPCell(new Phrase(Noofdaysinamonth, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    //cell.Border = 0;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = 0.2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    cell.Colspan = 1;
                                                    table.AddCell(cell);
                                                }
                                            }
                                            if (InvNoOfEmpsVisible == "Y")
                                            {
                                                if (j == 5)
                                                {

                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                                    if (label1.Text == "0")
                                                    {
                                                        cellText = "";
                                                    }
                                                    else
                                                    {
                                                        cellText = label1.Text;
                                                    }
                                                    //create a new cell with column value


                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                            }


                                            if (InvPayrateVisible == "Y")
                                            {

                                                if (j == 6)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                                    TextBox label2 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));
                                                    Label labldesig = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesignid"));
                                                    string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                                       "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.designid='" + labldesig.Text + "'";

                                                    //Duty Hrs removed for KL on 27/05/2015
                                                    DataTable dt = config.ExecuteAdaptorAsyncWithQueryParams(dutyhrsQry).Result;
                                                    cellText = label1.Text;

                                                    //create a new cell with column value
                                                    if (cellText == "0")
                                                    {
                                                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 1;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = 0f;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                    else
                                                    {
                                                        cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 1;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.HorizontalAlignment = 1;
                                                        cell.BorderWidthRight = 0f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }

                                                }

                                            }


                                            if (InvNoofDutiesVisible == "Y")
                                            {
                                                if (j == 7)
                                                {

                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                                    if (label1.Text == "0")
                                                    {
                                                        cellText = "";
                                                    }
                                                    else
                                                    {
                                                        cellText = label1.Text;
                                                    }
                                                    //create a new cell with column value


                                                    cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                    cell.HorizontalAlignment = 1;
                                                    if (GridLine == countGrid)
                                                    {
                                                        cell.BorderWidthBottom = 0;
                                                    }
                                                    else
                                                    {
                                                        cell.BorderWidthBottom = 0.2f;
                                                    }
                                                    cell.BorderWidthLeft = .2f;
                                                    cell.BorderWidthTop = 0;
                                                    cell.HorizontalAlignment = 1;
                                                    cell.BorderWidthRight = 0f;
                                                    cell.BorderColor = BaseColor.BLACK;
                                                    table.AddCell(cell);
                                                }
                                            }

                                            if (InvAmountVisible == "Y")
                                            {
                                                if (j == 8)
                                                {
                                                    TextBox label1 = (TextBox)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                                    cellText = label1.Text;
                                                    //create a new cell with column value

                                                    if (cellText == "0")
                                                    {
                                                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 2;
                                                        //cell.Border = 0;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = .2f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                    else
                                                    {
                                                        cell = new PdfPCell(new Phrase(decimal.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                                        cell.HorizontalAlignment = 2;
                                                        //cell.Border = 0;
                                                        if (GridLine == countGrid)
                                                        {
                                                            cell.BorderWidthBottom = 0;
                                                        }
                                                        else
                                                        {
                                                            cell.BorderWidthBottom = 0.2f;
                                                        }
                                                        cell.BorderWidthLeft = .2f;
                                                        cell.BorderWidthTop = 0;
                                                        cell.BorderWidthRight = .2f;
                                                        cell.BorderColor = BaseColor.BLACK;
                                                        table.AddCell(cell);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            GridLine++;
                        }                        

                        document.Add(table);

                        // tablelogo.AddCell(celll);


                        PdfPTable tempTable22 = new PdfPTable(colCount);
                        tempTable22.TotalWidth = 500f;
                        tempTable22.LockedWidth = true;
                        // float[] tempWidth22 = new float[] { 1f, 6.4f, 2f, 2.2f, 2f, 2.7f };//2.9f, 1.83f
                        float[] tempWidth22 = new float[] { };
                        if (colCount == 9)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 1f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 8)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 7)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2f, 2.2f, 2f, 2.7f };
                        }
                        if (colCount == 6)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2.2f, 2f, 2.7f };
                        }

                        if (colCount == 5)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2f, 2.2f, 2.7f };
                        }

                        if (colCount == 4)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2.2f, 2.7f };
                        }

                        if (colCount == 3)
                        {
                            tempWidth22 = new float[] { 1f, 6f, 2.7f };
                        }


                        tempTable22.SetWidths(tempWidth22);                       

                        Fromdate = txtfromdate.Text;
                        Todate = txttodate.Text;

                        decimal GSTDiscounts = 0;

                         if (totalamount > 0)
                            {

                                PdfPCell
                                CellbbCGST = new PdfPCell(new Phrase("Total Supply Value (Basic)", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.Colspan = colCount-1;
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = .2f;
                                CellbbCGST.BorderWidthTop = 0.2f;
                                CellbbCGST.BorderWidthRight = 0f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);

                                CellbbCGST = new PdfPCell(new Phrase(totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST.BorderWidthBottom = 0;
                                CellbbCGST.BorderWidthLeft = 0.2f;
                                CellbbCGST.BorderWidthTop = 0.2f;
                                CellbbCGST.BorderWidthRight = .2f;
                                CellbbCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST);
                            }                                                                    

                               PdfPCell CellbbCGST1 = new PdfPCell(new Phrase("Less : Basic value of Advance Paid with Service Tax", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellbbCGST1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CellbbCGST1.Colspan = colCount-1;
                                CellbbCGST1.BorderWidthBottom = 0;
                                CellbbCGST1.BorderWidthLeft = .2f;
                                CellbbCGST1.BorderWidthTop = 0.2f;
                                CellbbCGST1.BorderWidthRight = 0f;
                                CellbbCGST1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST1);

                                CellbbCGST1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellbbCGST1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellbbCGST1.BorderWidthBottom = 0;
                                CellbbCGST1.BorderWidthLeft = 0.2f;
                                CellbbCGST1.BorderWidthTop = 0.2f;
                                CellbbCGST1.BorderWidthRight = .2f;
                                CellbbCGST1.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellbbCGST1);
                       

                        if (TotalbeforeTax > 0)
                        {
                            PdfPCell

                            CellbbCGST = new PdfPCell(new Phrase("Balance Invoice Value (Net off Advance paid with Service Tax)", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellbbCGST.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CellbbCGST.Colspan = colCount-1;
                            CellbbCGST.BorderWidthBottom = 0;
                            CellbbCGST.BorderWidthLeft = .2f;
                            CellbbCGST.BorderWidthTop = 0.2f;
                            CellbbCGST.BorderWidthRight = 0f;
                            CellbbCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellbbCGST);

                            CellbbCGST = new PdfPCell(new Phrase((TotalbeforeTax).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            CellbbCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellbbCGST.BorderWidthBottom = 0;
                            CellbbCGST.BorderWidthLeft = 0.2f;
                            CellbbCGST.BorderWidthTop = 0.2f;
                            CellbbCGST.BorderWidthRight = .2f;
                            CellbbCGST.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(CellbbCGST);
                        }



                        #region for taxes

                      if (!bIncludeST)
                        {                          

                            #region for GST as on 17-6-2017

                            if (CGST > 0)
                            {
                                PdfPCell
                                CellCGST = new PdfPCell(new Phrase("Central Tax @ " + CGSTPrc + "% ("+ CGSTAlias+")", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                                CellCGST.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CellCGST.Colspan = colCount-1;
                                CellCGST.BorderWidthBottom = 0;
                                CellCGST.BorderWidthLeft = .2f;
                                CellCGST.BorderWidthTop = 0.2f;
                                CellCGST.BorderWidthRight = 0f;
                                // CellCGST.PaddingBottom = 5;
                                // CellCGST.PaddingTop = 5;
                                CellCGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellCGST);

                                PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellCGSTAmt.BorderWidthBottom = 0;
                                CellCGSTAmt.BorderWidthLeft = 0.2f;
                                CellCGSTAmt.BorderWidthTop = 0.2f;
                                CellCGSTAmt.BorderWidthRight = .2f;
                                CellCGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellCGSTAmt.PaddingBottom = 5;
                                //CellCGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellCGSTAmt);

                            }


                            if (SGST > 0)
                            {
                                PdfPCell
                                CellSGST = new PdfPCell(new Phrase("State Tax @ " + SGSTPrc + "% ("+ SGSTAlias +")", FontFactory.GetFont(FontStyle, font - 1, Font.NORMAL, BaseColor.BLACK)));
                                CellSGST.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CellSGST.Colspan = colCount - 1 ;
                                CellSGST.BorderWidthBottom = 0;
                                CellSGST.BorderWidthLeft = .2f;
                                CellSGST.BorderWidthTop = 0.2f;
                                CellSGST.BorderWidthRight = 0f;
                                // CellSGST.PaddingBottom = 5;
                                // CellSGST.PaddingTop = 5;
                                CellSGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellSGST);

                                PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellSGSTAmt.BorderWidthBottom = 0;
                                CellSGSTAmt.BorderWidthLeft = 0.2f;
                                CellSGSTAmt.BorderWidthTop = 0.2f;
                                CellSGSTAmt.BorderWidthRight = .2f;
                                CellSGSTAmt.BorderColor = BaseColor.BLACK;
                                //CellSGSTAmt.PaddingBottom = 5;
                                //CellSGSTAmt.PaddingTop = 5;
                                tempTable22.AddCell(CellSGSTAmt);


                            }

                            if (IGST > 0)
                            {                               

                                PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGST.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                CellIGST.Colspan = colCount-1;
                                CellIGST.BorderWidthBottom = 0;
                                CellIGST.BorderWidthLeft = .2f;
                                CellIGST.BorderWidthTop = 0.2f;
                                CellIGST.BorderWidthRight = 0f;                              
                                CellIGST.BorderColor = BaseColor.BLACK;
                                tempTable22.AddCell(CellIGST);

                                PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CellIGSTAmt.BorderWidthBottom = 0;
                                CellIGSTAmt.BorderWidthLeft = 0.2f;
                                CellIGSTAmt.BorderWidthTop = 0.2f;
                                CellIGSTAmt.BorderWidthRight = .2f;
                                CellIGSTAmt.BorderColor = BaseColor.BLACK;                              
                                tempTable22.AddCell(CellIGSTAmt);
                            }

                          
                            #endregion for GST                                                                                            

                            decimal totaltaxamt = 0;
                            totaltaxamt = CGST + SGST + IGST;
                            if (totaltaxamt > 0)
                            {
                                PdfPCell celldfTax21 = new PdfPCell(new Phrase("Total GST Payable on Balance Invoice Value (Net off Advance paid with Service Tax)", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldfTax21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldfTax21.Colspan = colCount - 1;
                                celldfTax21.BorderWidthBottom = 0;
                                celldfTax21.BorderWidthLeft = .2f;
                                celldfTax21.BorderWidthTop = 0;
                                celldfTax21.BorderWidthRight = 0f;
                                celldfTax21.BorderColor = BaseColor.BLACK;                            
                                tempTable22.AddCell(celldfTax21);

                                PdfPCell celldf4tax1 = new PdfPCell(new Phrase(totaltaxamt.ToString("#,##0.00"),
                                    FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                celldf4tax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldf4tax1.BorderWidthBottom = 0;
                                celldf4tax1.BorderWidthLeft = 0.2f;
                                celldf4tax1.BorderWidthTop = 0;
                                celldf4tax1.BorderWidthRight = .2f;
                                celldf4tax1.BorderColor = BaseColor.BLACK;                                                           
                                tempTable22.AddCell(celldf4tax1);
                            }
                        }


                        if (CGST + SGST + IGST + totalamount > 0)
                        {
                            decimal TotalValuewithGST = CGST + SGST + IGST + totalamount;
                            PdfPCell celldfTax21 = new PdfPCell(new Phrase("Total Invoice Value with GST", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            celldfTax21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldfTax21.Colspan = colCount - 1;
                            celldfTax21.BorderWidthBottom = 0;
                            celldfTax21.BorderWidthLeft = .2f;
                            celldfTax21.BorderWidthTop = 0;
                            celldfTax21.BorderWidthRight = 0f;
                            celldfTax21.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldfTax21);

                            PdfPCell celldf4tax11 = new PdfPCell(new Phrase(TotalValuewithGST.ToString("#,##0.00"),
                                FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            celldf4tax11.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4tax11.BorderWidthBottom = 0;
                            celldf4tax11.BorderWidthLeft = 0.2f;
                            celldf4tax11.BorderWidthTop = 0;
                            celldf4tax11.BorderWidthRight = .2f;
                            celldf4tax11.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldf4tax11);
                        }

                                           
                            PdfPCell celldfTax2 = new PdfPCell(new Phrase("Less  - Advance paid without Service Tax  ", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            celldfTax2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldfTax2.Colspan = colCount - 1;
                            celldfTax2.BorderWidthBottom = 0;
                            celldfTax2.BorderWidthLeft = .2f;
                            celldfTax2.BorderWidthTop = 0;
                            celldfTax2.BorderWidthRight = 0f;
                            celldfTax2.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldfTax2);

                            PdfPCell celldf4tax = new PdfPCell(new Phrase("",
                                FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            celldf4tax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4tax.BorderWidthBottom = 0;
                            celldf4tax.BorderWidthLeft = 0.2f;
                            celldf4tax.BorderWidthTop = 0;
                            celldf4tax.BorderWidthRight = .2f;
                            celldf4tax.BorderColor = BaseColor.BLACK;
                            tempTable22.AddCell(celldf4tax);

                        decimal GSTAmount = CGST + SGST + IGST;



                        #endregion for taxes

                        decimal GrandTotalVal = Grandtotal;

                        decimal GrandtotalRoundOff = Math.Round(GrandTotalVal, 0);
                        decimal RoundOff = (GrandtotalRoundOff - GrandTotalVal);
                        decimal GrandtotalValue = (GrandTotalVal + RoundOff);

                        PdfPCell
                        cellgrandto = new PdfPCell(new Phrase("Net Payable Amount", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellgrandto.Colspan = colCount-1;
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = .2f;
                        cellgrandto.BorderWidthTop = 0.2f;
                        cellgrandto.BorderWidthRight = 0f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);

                        cellgrandto = new PdfPCell(new Phrase(GrandTotalVal.ToString(), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = 0.2f;
                        cellgrandto.BorderWidthTop = 0.2f;
                        cellgrandto.BorderWidthRight = .2f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);

                        
                        cellgrandto = new PdfPCell(new Phrase("Round Off Net amount", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellgrandto.Colspan = colCount-1;
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = .2f;
                        cellgrandto.BorderWidthTop = 0.2f;
                        cellgrandto.BorderWidthRight = 0f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);

                        cellgrandto = new PdfPCell(new Phrase(GrandtotalValue.ToString("N2"), FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cellgrandto.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        cellgrandto.BorderWidthBottom = 0;
                        cellgrandto.BorderWidthLeft = 0.2f;
                        cellgrandto.BorderWidthTop = 0.2f;
                        cellgrandto.BorderWidthRight = .2f;
                        cellgrandto.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(cellgrandto);


                        PdfPCell Cellnoofamout = new PdfPCell(new Phrase("Service  Amount in Words :" + " " + AmountInWords(TotalbeforeTax) + "", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellnoofamout.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cellnoofamout.Colspan = colCount;
                        Cellnoofamout.BorderWidthBottom = .2f;
                        Cellnoofamout.BorderWidthLeft = .2f;
                        Cellnoofamout.BorderWidthTop = .2f;
                        Cellnoofamout.BorderWidthRight = 0.2f;
                        Cellnoofamout.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(Cellnoofamout);

                        PdfPCell Cellnoofamout1 = new PdfPCell(new Phrase("GST Amount in words :" + " " + AmountInWords(GSTAmount) + "", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        Cellnoofamout1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cellnoofamout1.Colspan = colCount;
                        Cellnoofamout1.BorderWidthBottom = .2f;
                        Cellnoofamout1.BorderWidthLeft = .2f;
                        Cellnoofamout1.BorderWidthTop = .2f;
                        Cellnoofamout1.BorderWidthRight = 0.2f;
                        Cellnoofamout1.BorderColor = BaseColor.BLACK;
                        tempTable22.AddCell(Cellnoofamout1);

                        PdfPCell Pcell = new PdfPCell(new Phrase("For " +companyName+ "", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        Pcell.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Pcell.Colspan = colCount;
                        Pcell.BorderWidthBottom = .2f;
                        Pcell.BorderWidthLeft = .2f;
                        Pcell.BorderWidthTop = .2f;
                        Pcell.BorderWidthRight = 0.2f;
                        Pcell.BorderColor = BaseColor.BLACK;
                        //tempTable22.AddCell(Pcell);


                        document.Add(tempTable22);

                        #region footer

                        PdfPTable Addterms = new PdfPTable(6);
                        Addterms.TotalWidth = 500f;
                        Addterms.LockedWidth = true;
                        float[] widthrerms = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                        Addterms.SetWidths(widthrerms);

                        if (notes.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase(notes, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = .2f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 6;
                            cell.SetLeading(0, 1.3f);
                            cell.BorderColor = BaseColor.BLACK;
                            Addterms.AddCell(cell);
                        }

                        //if (BankAcNumber.Length > 0 || BankName.Length > 0 || IFSCCode.Length > 0 || BranchName.Length > 0)
                        //{
                        //    cell = new PdfPCell(new Phrase("Bank Details", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    cell.HorizontalAlignment = 0;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.Colspan = 6;
                        //    // cell.SetLeading(0, 1.3f);
                        //    cell.BorderColor = BaseColor.BLACK;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead5 = new Paragraph();
                        //    CcellHead5.Add(new Chunk("Bank NAME : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead5.Add(new Chunk(BankName, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead5);
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.PaddingTop = -3f;
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead6 = new Paragraph();
                        //    CcellHead6.Add(new Chunk("A/C No : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead6.Add(new Chunk(BankAcNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead6);
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    cell.PaddingTop = -3f;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead1 = new Paragraph();
                        //    CcellHead1.Add(new Chunk("Branch : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead1.Add(new Chunk(BranchName, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead1);
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    cell.PaddingTop = -3f;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    Addterms.AddCell(cell);

                        //    cell = new PdfPCell();
                        //    Paragraph CcellHead2 = new Paragraph();
                        //    CcellHead2.Add(new Chunk("IFSC Code : ", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        //    CcellHead2.Add(new Chunk(IFSCCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.AddElement(CcellHead2);
                        //    cell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        //    cell.Colspan = 6;
                        //    cell.PaddingTop = -3f;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    Addterms.AddCell(cell);
                        //}
                        //else
                        //{
                        //    cell = new PdfPCell(new Phrase(BillDesc, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        //    cell.HorizontalAlignment = 0;
                        //    cell.BorderWidthBottom = 0;
                        //    cell.BorderWidthTop = 0;
                        //    cell.BorderWidthRight = .2f;
                        //    cell.BorderWidthLeft = .2f;
                        //    cell.Colspan = 6;
                        //    cell.SetLeading(0, 1.3f);
                        //    cell.BorderColor = BaseColor.BLACK;
                        //    Addterms.AddCell(cell);
                        //}


                        PdfPTable Childterms = new PdfPTable(3);
                        Childterms.TotalWidth = 290f;
                        Childterms.LockedWidth = true;
                        float[] Celters = new float[] { 1.5f, 2f, 2f };
                        Childterms.SetWidths(Celters);


                        #region for payment terms


                        cell = new PdfPCell(new Phrase(companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = .2f;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        // cell.PaddingTop = 7;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);

                        if (Bdt.Rows.Count > 0)
                        {


                            if (HSNNumber.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("HSN NUMBER", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);


                                cell = new PdfPCell(new Paragraph(": " + HSNNumber, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }



                            if (SACCode.Length > 0)
                            {
                                PdfPCell clietnpin = new PdfPCell(new Paragraph("SAC CODE", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                clietnpin.HorizontalAlignment = 0;
                                clietnpin.BorderWidthBottom = 0;
                                clietnpin.BorderWidthTop = 0;
                                clietnpin.BorderWidthRight = 0f;
                                clietnpin.BorderWidthLeft = .2f;
                                clietnpin.Colspan = 1;
                                clietnpin.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(clietnpin);

                                cell = new PdfPCell(new Paragraph(": " + SACCode, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }


                        if (PANNO.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PAN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PANNO, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }

                        if (Bdt.Rows.Count > 0)
                        {
                            if (OurGSTIN.Length > 0)
                            {


                                cell = new PdfPCell(new Phrase(OurGSTINAlias, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0f;
                                cell.BorderWidthLeft = .2f;
                                cell.Colspan = 1;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);


                                cell = new PdfPCell(new Phrase(": " + OurGSTIN, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                                cell.HorizontalAlignment = 0;
                                cell.BorderWidthBottom = 0;
                                cell.BorderWidthTop = 0;
                                cell.BorderWidthRight = 0;
                                cell.BorderWidthLeft = 0;
                                cell.Colspan = 2;
                                cell.BorderColor = BaseColor.BLACK;
                                Childterms.AddCell(cell);

                            }
                        }
                        if (Servicetax.Length > 0)
                        {


                            cell = new PdfPCell(new Phrase("SER. TAX REG.NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Servicetax, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Category.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("SC-CATEGORY", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Category, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }
                        if (PFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);


                            cell = new PdfPCell(new Phrase(": " + PFNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        else if (CmpPFNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("PF CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CmpPFNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }
                        if (Esino.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + Esino, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }
                        else if (CmpEsino.Length > 0)
                        {


                            cell = new PdfPCell(new Phrase("ESI CODE NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CmpEsino, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);
                        }

                        if (CINNo.Length > 0)
                        {

                            cell = new PdfPCell(new Phrase("CIN NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + CINNo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        if (MSMENo.Length > 0)
                        {
                            cell = new PdfPCell(new Phrase("MSME NO", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0f;
                            cell.BorderWidthLeft = .2f;
                            cell.Colspan = 1;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                            cell = new PdfPCell(new Phrase(": " + MSMENo, FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 0;
                            cell.BorderWidthBottom = 0;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0;
                            cell.BorderWidthLeft = 0;
                            cell.Colspan = 2;
                            cell.BorderColor = BaseColor.BLACK;
                            Childterms.AddCell(cell);

                        }

                        cell = new PdfPCell(new Phrase("\n\nCustomer's seal and signature", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthLeft = .2f;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 5f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        Childterms.AddCell(cell);


                        cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, font, Font.NORMAL, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 0;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0f;
                        cell.BorderWidthLeft = .2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        // Childterms.AddCell(cell);




                        #endregion for payment terms


                        PdfPCell Chid3 = new PdfPCell(Childterms);
                        Chid3.Border = 0;
                        Chid3.Colspan = 3;
                        Chid3.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid3);



                        PdfPTable chilk = new PdfPTable(3);
                        chilk.TotalWidth = 210f;
                        chilk.LockedWidth = true;
                        float[] Celterss = new float[] { 2.2f, 2f, 2.7f };
                        chilk.SetWidths(Celterss);




                        cell = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = 0;
                        cell.PaddingTop = 10f;
                        cell.BorderWidthTop = 0.2f;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);

                        cell = new PdfPCell(new Phrase("\n\n\n\n Authorised Signatory", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);



                        cell = new PdfPCell(new Phrase("Computer Generated Invoice and Requires No Signature", FontFactory.GetFont(FontStyle, font, Font.ITALIC, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 2;
                        cell.BorderWidthBottom = .2f;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = .2f;
                        cell.BorderWidthLeft = 0.2f;
                        cell.Colspan = 3;
                        cell.PaddingTop = 5;
                        cell.BorderColor = BaseColor.BLACK;
                        chilk.AddCell(cell);


                        PdfPCell Chid4 = new PdfPCell(chilk);
                        Chid4.Border = 0;
                        Chid4.Colspan = 3;
                        Chid4.HorizontalAlignment = 0;
                        Addterms.AddCell(Chid4);


                        cell = new PdfPCell(new Phrase("***We are with you for ur safe solutions thank you***", FontFactory.GetFont(FontStyle, font, Font.BOLD, BaseColor.BLACK)));
                        cell.HorizontalAlignment = 1;
                        cell.BorderWidthBottom = 0;
                        cell.BorderWidthTop = 0;
                        cell.BorderWidthRight = 0;
                        cell.BorderWidthLeft = 0;
                        cell.Colspan = 6;
                        Addterms.AddCell(cell);

                        document.Add(Addterms);


                        #endregion

                        #endregion

                        #endregion
                    }

                    document.Close();

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }
    }
}
